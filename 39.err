DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'position', 'did', 'Moon', 'play', 'in', 'professional', 'football', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'senior', 'vice', 'president', 'of', 'the', 'American', 'Enterprise', 'Institute', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'the', 'overthrown', 'government', 'come', 'to', 'power', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['At', 'what', 'site', 'in', 'Luxor', 'did', 'the', 'massacre', 'occur', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'the', 'program', 'first', 'broadcast', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Oscar', 'awards', 'did', 'Hitchcock', 'win', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'Chavez', "'s", 'opponent', 'in', 'his', '1998', 'Presidential', 'race', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'became', 'Tufts', 'University', 'President', 'in', '1992', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'senior', 'vice', 'president', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Enterprise', 'Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['At', 'what', 'site', 'in', 'did', 'the', 'massacre', 'occur', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'position', 'did', 'play', 'in', 'professional', 'football', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Warren', 'Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['tourists', 'massacred', 'at', 'Luxor', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'senior', 'vice', 'president', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['American Enterprise Institute', 'American Enterprise Institute']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'senior', 'vice', 'president', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'senior', 'vice', 'president', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 1, 'senior': 1, 'vice': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Enterprise Institute': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'president': 1, 'senior': 1, 'American Enterprise Institute': 2, 'vice': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x237bdd50>]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Warren Moon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'position', 'did', 'play', 'in', 'professional', 'football', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Moon', 'Warren Moon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'position', 'did', 'play', 'in', 'professional', 'football', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'position', 'did', 'play', 'in', 'professional', 'football']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'did': 1, 'position': 1, 'play': 1, 'football': 1, 'professional': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Warren Moon': 1, 'Moon': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'play': 1, 'did': 1, 'football': 1, 'Warren Moon': 1, 'professional': 1, 'position': 1, 'Moon': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2382ecd0>]
DEBUG  Here is the answer template: question_id: 143.4; query_terms: set(['president', 'senior', 'vice']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG  Here is the answer template: question_id: 141.1; query_terms: set(['did', 'position', 'play', 'football', 'professional']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['At', 'what', 'site', 'in', 'did', 'the', 'massacre', 'occur', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Luxor', 'Luxor']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['At', 'what', 'site', 'in', 'did', 'the', 'massacre', 'occur', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['At', 'what', 'site', 'in', 'did', 'the', 'massacre', 'occur', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'massacred': 1, '1997': 1, 'did': 1, 'massacre': 1, 'site': 1, 'occur': 1, 'tourists': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Luxor': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'massacred': 1, '1997': 1, 'did': 1, 'Luxor': 2, 'massacre': 1, 'site': 1, 'tourists': 1, 'occur': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23453e90>]
DEBUG  Here is the answer template: question_id: 148.4; query_terms: set(['massacred', '1997', 'did', 'massacre', 'site', 'tourists', 'occur']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'the', 'overthrown', 'government', 'come', 'to', 'power', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pakistani', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pakistani']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'the', 'overthrown', 'government', 'come', 'to', 'power', '?', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pakistani']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'the', 'overthrown', 'government', 'come', 'to', 'power', '?', 'government', 'overthrown', 'in', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'the', 'overthrown', 'government', 'come', 'to', 'power', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'power': 1, 'government': 2, 'did': 1, '1999': 1, 'come': 1, 'overthrown': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pakistani': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'power': 1, 'government': 2, 'did': 1, '1999': 1, 'Pakistani': 1, 'come': 1, 'overthrown': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 146.2; query_terms: set(['power', 'government', 'did', '1999', 'come', 'overthrown']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'the', 'program', 'first', 'broadcast', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'the', 'program', 'first', 'broadcast', '?', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'the', 'program', 'first', 'broadcast', '?', 'television', 'show', 'Cheers']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'the', 'program', 'first', 'broadcast', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'broadcast': 1, 'Cheers': 1, 'television': 1, 'program': 1, 'show': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'broadcast': 1, 'Cheers': 1, 'television': 1, 'program': 1, 'show': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23b96110>]
DEBUG  Here is the answer template: question_id: 150.6; query_terms: set(['broadcast', 'Cheers', 'television', 'program', 'show']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Oscar', 'awards', 'did', 'win', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Alfred', 'Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Alfred Hitchcock']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Oscar', 'awards', 'did', 'win', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hitchcock', 'Alfred Hitchcock']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Oscar', 'awards', 'did', 'win', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'Oscar', 'awards', 'did', 'win']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'did': 1, 'Oscar': 1, 'awards': 1, 'win': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hitchcock': 1, 'did': 1, 'Oscar': 1, 'Alfred Hitchcock': 1, 'awards': 1, 'win': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23bb4090>]
DEBUG  Here is the answer template: question_id: 153.5; query_terms: set(['did', 'Oscar', 'awards', 'win']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', "'s", 'opponent', 'in', 'his', '1998', 'Presidential', 'race', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', "'s", 'opponent', 'in', 'his', '1998', 'Presidential', 'race', '?', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chavez', 'Hugo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', "'s", 'opponent', 'in', 'his', '1998', 'Presidential', 'race', '?', 'Chavez']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 's', 'opponent', 'in', 'his', '1998', 'Presidential', 'race', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Chavez': 1, '1998': 1, 's': 1, 'race': 1, 'Presidential': 1, 'opponent': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hugo': 1, 'Chavez': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Chavez': 2, '1998': 1, 'Hugo': 1, 's': 1, 'race': 1, 'Presidential': 1, 'opponent': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23b96110>]
DEBUG  Here is the answer template: question_id: 155.7; query_terms: set(['Chavez', '1998', 's', 'race', 'Presidential', 'opponent']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'became', 'Tufts', 'President', 'in', '1992', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Tufts', 'University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'became', 'Tufts', 'President', 'in', '1992', '?', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['University', 'University']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'became', 'Tufts', 'President', 'in', '1992', '?', 'Tufts']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'became', 'Tufts', 'President', 'in', '1992', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'President': 1, '1992': 1, 'Tufts': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'University': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'President': 1, 'University': 2, '1992': 1, 'Tufts': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23b6e1d0>]
DEBUG  Here is the answer template: question_id: 158.1; query_terms: set(['President', '1992', 'Tufts']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'races', 'are', 'part', 'of', 'the', 'Winston', 'Cup', 'series', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'races', 'are', 'part', 'of', 'the', 'series', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Winston', 'Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'races', 'are', 'part', 'of', 'the', 'series', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Winston Cup', 'Winston Cup']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'races', 'are', 'part', 'of', 'the', 'series', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'races', 'are', 'part', 'of', 'the', 'series']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'series': 1, 'part': 1, 'races': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Winston Cup': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Winston Cup': 2, 'series': 1, 'races': 1, 'part': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f125050>]
DEBUG  Here is the answer template: question_id: 151.1; query_terms: set(['series', 'races', 'part']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'terrorist', 'organization', 'claimed', 'responsibility', 'for', 'the', 'massacre', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'terrorist', 'organization', 'claimed', 'responsibility', 'for', 'the', 'massacre', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['tourists', 'massacred', 'at', 'Luxor', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'terrorist', 'organization', 'claimed', 'responsibility', 'for', 'the', 'massacre', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Luxor']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'terrorist', 'organization', 'claimed', 'responsibility', 'for', 'the', 'massacre', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'terrorist', 'organization', 'claimed', 'responsibility', 'for', 'the', 'massacre', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'terrorist': 1, 'massacred': 1, '1997': 1, 'massacre': 1, 'responsibility': 1, 'claimed': 1, 'organization': 1, 'tourists': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Luxor': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'terrorist': 1, 'massacred': 1, '1997': 1, 'massacre': 1, 'Luxor': 1, 'responsibility': 1, 'claimed': 1, 'organization': 1, 'tourists': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 148.5; query_terms: set(['terrorist', 'massacred', '1997', 'massacre', 'responsibility', 'claimed', 'organization', 'tourists']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Over', 'which', 'other', 'university', 'did', 'he', 'preside', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Over', 'which', 'other', 'university', 'did', 'he', 'preside', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Tufts', 'University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Over', 'which', 'other', 'university', 'did', 'he', 'preside', '?', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['University']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Over', 'which', 'other', 'university', 'did', 'he', 'preside', '?', 'Tufts']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Over', 'which', 'other', 'university', 'did', 'he', 'preside', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'preside': 1, 'university': 1, 'Tufts': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'University': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'preside': 1, 'university': 1, 'University': 1, 'Tufts': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 158.2; query_terms: set(['preside', 'university', 'Tufts']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'group', 'accomplished', 'the', 'overthrow', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'group', 'accomplished', 'the', 'overthrow', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pakistani', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pakistani']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'group', 'accomplished', 'the', 'overthrow', '?', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pakistani']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'group', 'accomplished', 'the', 'overthrow', '?', 'government', 'overthrown', 'in', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'group', 'accomplished', 'the', 'overthrow', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'group': 1, 'government': 1, '1999': 1, 'accomplished': 1, 'overthrow': 1, 'overthrown': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pakistani': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'group': 1, 'government': 1, '1999': 1, 'accomplished': 1, 'overthrow': 1, 'Pakistani': 1, 'overthrown': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 146.3; query_terms: set(['group', 'government', '1999', 'accomplished', 'overthrow', 'overthrown']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'founded', 'NASCAR', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'founded', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['NASCAR', 'NASCAR']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'founded', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'founded']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'NASCAR': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'NASCAR': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 156.1; query_terms: set(['founded']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'Moon', 'play', 'in', 'college', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'play', 'in', 'college', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Warren', 'Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Warren Moon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'play', 'in', 'college', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Moon', 'Warren Moon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'play', 'in', 'college', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'play', 'in', 'college']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'play': 1, 'college': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Warren Moon': 1, 'Moon': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'play': 1, 'Moon': 1, 'college': 1, 'Warren Moon': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 141.2; query_terms: set(['play', 'college']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'Hitchcock', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Alfred', 'Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Alfred Hitchcock']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hitchcock', 'Alfred Hitchcock']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 153.6; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show', 'appears', 'on', 'what', 'cable', 'channel', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The', 'appears', 'on', 'what', 'cable', 'channel', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['The', 'appears', 'on', 'what', 'cable', 'channel', '?', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Daily Show', 'Daily Show']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['The', 'appears', 'on', 'what', 'cable', 'channel', '?', 'The']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['The', 'appears', 'on', 'what', 'cable', 'channel', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'appears': 1, 'cable': 1, 'channel': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Daily Show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Daily Show': 2, 'appears': 1, 'cable': 1, 'channel': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 149.1; query_terms: set(['appears', 'cable', 'channel']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'zip', 'code', 'of', 'the', 'American', 'Enterprise', 'Institute', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'zip', 'code', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Enterprise', 'Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'zip', 'code', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['American Enterprise Institute', 'American Enterprise Institute']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'zip', 'code', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'zip', 'code', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'code': 1, 'zip': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Enterprise Institute': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'code': 1, 'zip': 1, 'American Enterprise Institute': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 143.5; query_terms: set(['code', 'zip']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'tobacco', 'company', 'is', 'a', 'sponsor', 'of', 'the', 'Winston', 'Cup', 'series', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'tobacco', 'company', 'is', 'a', 'sponsor', 'of', 'the', 'series', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Winston', 'Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'tobacco', 'company', 'is', 'a', 'sponsor', 'of', 'the', 'series', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Winston Cup', 'Winston Cup']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'tobacco', 'company', 'is', 'a', 'sponsor', 'of', 'the', 'series', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'tobacco', 'company', 'is', 'a', 'sponsor', 'of', 'the', 'series']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'series': 1, 'company': 1, 'sponsor': 1, 'tobacco': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Winston Cup': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'series': 1, 'company': 1, 'Winston Cup': 2, 'sponsor': 1, 'tobacco': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 151.4; query_terms: set(['series', 'company', 'sponsor', 'tobacco']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'Hitchcock', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Alfred', 'Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Alfred Hitchcock']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hitchcock', 'Alfred Hitchcock']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6afd0>]
DEBUG  Here is the answer template: question_id: 153.7; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'Moon', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Tufts', "'", 'endowment', 'in', '1992', 'when', 'he', 'became', 'president', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Warren', 'Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Warren Moon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Moon', 'Warren Moon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Warren Moon': 1, 'Moon': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Moon': 1, 'Warren Moon': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 141.3; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'Tufts', "'", 'endowment', 'in', '1992', 'when', 'he', 'became', 'president', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Tufts', 'University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'Tufts', "'", 'endowment', 'in', '1992', 'when', 'he', 'became', 'president', '?', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['University']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'Tufts', "'", 'endowment', 'in', '1992', 'when', 'he', 'became', 'president', '?', 'Tufts']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'Tufts', 'endowment', 'in', '1992', 'when', 'he', 'became', 'president', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 1, '1992': 1, 'endowment': 1, 'Tufts': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'University': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'president': 1, 'University': 1, '1992': 1, 'endowment': 1, 'Tufts': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 158.3; query_terms: set(['president', '1992', 'endowment', 'Tufts']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'nominal', 'leader', 'after', 'the', 'overthrow', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'nominal', 'leader', 'after', 'the', 'overthrow', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pakistani', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pakistani']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'nominal', 'leader', 'after', 'the', 'overthrow', '?', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pakistani']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'nominal', 'leader', 'after', 'the', 'overthrow', '?', 'government', 'overthrown', 'in', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'nominal', 'leader', 'after', 'the', 'overthrow', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'government': 1, '1999': 1, 'nominal': 1, 'overthrow': 1, 'leader': 1, 'overthrown': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pakistani': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'government': 1, '1999': 1, 'nominal': 1, 'overthrow': 1, 'Pakistani': 1, 'leader': 1, 'overthrown': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ad50>]
DEBUG  Here is the answer template: question_id: 146.4; query_terms: set(['government', '1999', 'nominal', 'overthrow', 'leader', 'overthrown']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show', 'parodies', 'what', 'other', 'type', 'of', 'TV', 'program', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The', 'parodies', 'what', 'other', 'type', 'of', 'TV', 'program', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['The', 'parodies', 'what', 'other', 'type', 'of', 'TV', 'program', '?', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Daily Show', 'Daily Show']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['The', 'parodies', 'what', 'other', 'type', 'of', 'TV', 'program', '?', 'The']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['The', 'parodies', 'what', 'other', 'type', 'of', 'TV', 'program', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'TV': 1, 'parodies': 1, 'program': 1, 'type': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Daily Show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'TV': 1, 'parodies': 1, 'Daily Show': 2, 'program': 1, 'type': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 149.2; query_terms: set(['TV', 'parodies', 'program', 'type']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'NASCAR', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'founded', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['NASCAR', 'NASCAR']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'founded', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'founded']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'NASCAR': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'NASCAR': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4c350>]
DEBUG  Here is the answer template: question_id: 156.2; query_terms: set(['founded']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'day', 'of', 'the', 'week', 'are', 'races', 'for', 'the', 'Winston', 'Cup', 'run', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'day', 'of', 'the', 'week', 'are', 'races', 'for', 'the', 'run', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Winston', 'Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'day', 'of', 'the', 'week', 'are', 'races', 'for', 'the', 'run', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Winston Cup', 'Winston Cup']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'day', 'of', 'the', 'week', 'are', 'races', 'for', 'the', 'run', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'day', 'of', 'the', 'week', 'are', 'races', 'for', 'the', 'run']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'races': 1, 'run': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Winston Cup': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Winston Cup': 2, 'races': 1, 'run': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 151.5; query_terms: set(['races', 'run']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'Christopher', 'Reeve', 'paralyzed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'Christopher', 'Reeve', 'paralyzed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Christopher', 'Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Christopher Reeve']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'Christopher', 'Reeve', 'paralyzed', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Christopher Reeve']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'Christopher', 'Reeve', 'paralyzed', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'Christopher', 'Reeve', 'paralyzed']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Christopher': 1, 'paralyzed': 1, 'Reeve': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Christopher Reeve': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Christopher Reeve': 1, 'Christopher': 1, 'paralyzed': 1, 'Reeve': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 154.1; query_terms: set(['Christopher', 'paralyzed', 'Reeve']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'times', 'was', 'Moon', 'a', 'Pro', 'Bowler', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'times', 'was', 'Moon', 'a', 'Pro', 'Bowler', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Warren', 'Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Warren Moon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'times', 'was', 'Moon', 'a', 'Pro', 'Bowler', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Warren Moon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'times', 'was', 'Moon', 'a', 'Pro', 'Bowler', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'times', 'was', 'Moon', 'a', 'Pro', 'Bowler']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Pro': 1, 'Moon': 1, 'Bowler': 1, 'times': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Warren Moon': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Warren Moon': 1, 'Pro': 1, 'Bowler': 1, 'times': 1, 'Moon': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 141.4; query_terms: set(['Pro', 'Bowler', 'times', 'Moon']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'took', 'control', 'of', 'NASCAR', 'from', 'the', 'founder', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'in', 'the', 'U.S.', 'is', 'the', 'division', 'based', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'in', 'the', 'is', 'the', 'division', 'based', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'in', 'the', 'is', 'the', 'division', 'based', '?', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'in', 'the', 'is', 'the', 'division', 'based', '?', '82nd', 'Airborne', 'Division']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'in', 'the', 'is', 'the', 'division', 'based', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'82nd': 1, 'division': 1, 'based': 1, 'Airborne': 1, 'Division': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.S.': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'82nd': 1, 'division': 1, 'based': 1, 'Division': 1, 'U.S.': 1, 'Airborne': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 144.1; query_terms: set(['82nd', 'division', 'based', 'Airborne', 'Division']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'took', 'control', 'of', 'from', 'the', 'founder', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'took', 'control', 'of', 'from', 'the', 'founder', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['NASCAR', 'NASCAR']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'took', 'control', 'of', 'from', 'the', 'founder', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'took', 'control', 'of', 'from', 'the', 'founder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'control': 1, 'took': 1, 'founder': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'NASCAR': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'control': 1, 'NASCAR': 2, 'took': 1, 'founder': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 156.3; query_terms: set(['control', 'took', 'founder']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['For', 'what', 'crime', 'was', 'the', 'deposed', 'leader', 'found', 'guilty', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'host', 'of', 'The', 'Daily', 'Show', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['For', 'what', 'crime', 'was', 'the', 'deposed', 'leader', 'found', 'guilty', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pakistani', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pakistani']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['For', 'what', 'crime', 'was', 'the', 'deposed', 'leader', 'found', 'guilty', '?', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pakistani']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['For', 'what', 'crime', 'was', 'the', 'deposed', 'leader', 'found', 'guilty', '?', 'government', 'overthrown', 'in', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['For', 'what', 'crime', 'was', 'the', 'deposed', 'leader', 'found', 'guilty', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'government': 1, '1999': 1, 'deposed': 1, 'guilty': 1, 'crime': 1, 'found': 1, 'leader': 1, 'overthrown': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pakistani': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'government': 1, '1999': 1, 'deposed': 1, 'guilty': 1, 'crime': 1, 'found': 1, 'Pakistani': 1, 'leader': 1, 'overthrown': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209cba50>]
DEBUG  Here is the answer template: question_id: 146.5; query_terms: set(['government', '1999', 'deposed', 'guilty', 'crime', 'found', 'leader', 'overthrown']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'host', 'of', 'The', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'host', 'of', 'The', '?', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Daily Show', 'Daily Show']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'host', 'of', 'The', '?', 'The']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'host', 'of', 'The', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'host': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Daily Show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Daily Show': 2, 'host': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 149.3; query_terms: set(['host']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', '``', 'Superman', "''", 'movies', 'did', 'he', 'make', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', '``', 'Superman', "''", 'movies', 'did', 'he', 'make', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Christopher', 'Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Christopher Reeve']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', '``', 'Superman', "''", 'movies', 'did', 'he', 'make', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Christopher Reeve']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', '``', 'Superman', "''", 'movies', 'did', 'he', 'make', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'Superman', 'movies', 'did', 'he', 'make']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movies': 1, 'make': 1, 'Superman': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Christopher Reeve': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'movies': 1, 'make': 1, 'Christopher Reeve': 1, 'Superman': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 154.2; query_terms: set(['movies', 'make', 'Superman']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'Tufts', "'", 'current', 'endowment', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', "'", 'current', 'endowment', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Tufts', 'University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', "'", 'current', 'endowment', '?', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Tufts', 'University']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', "'", 'current', 'endowment', '?', 'Tufts']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'current', 'endowment', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'current': 1, 'endowment': 1, 'Tufts': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'University': 1, 'Tufts': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'current': 1, 'University': 1, 'endowment': 1, 'Tufts': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 158.4; query_terms: set(['current', 'endowment', 'Tufts']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'considered', 'the', 'minor', 'league', 'for', 'the', 'Winston', 'Cup', 'series', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'considered', 'the', 'minor', 'league', 'for', 'the', 'series', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Winston', 'Cup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Winston Cup']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'considered', 'the', 'minor', 'league', 'for', 'the', 'series', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Winston Cup', 'Winston Cup']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'considered', 'the', 'minor', 'league', 'for', 'the', 'series', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'considered', 'the', 'minor', 'league', 'for', 'the', 'series']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'considered': 1, 'league': 1, 'minor': 1, 'series': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Winston Cup': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'considered': 1, 'league': 1, 'Winston Cup': 2, 'minor': 1, 'series': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 151.6; query_terms: set(['considered', 'league', 'minor', 'series']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'division', 'formed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'division', 'formed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'division', 'formed', '?', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'division', 'formed', '?', '82nd', 'Airborne', 'Division']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'division', 'formed', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'82nd': 1, 'division': 1, 'formed': 1, 'Airborne': 1, 'Division': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'82nd': 1, 'division': 1, 'formed': 1, 'Airborne': 1, 'Division': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 144.2; query_terms: set(['82nd', 'division', 'formed', 'Airborne', 'Division']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'much', 'money', 'does', 'NASCAR', 'generate', 'from', 'TV', 'rights', 'annually', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'much', 'money', 'does', 'generate', 'from', 'TV', 'rights', 'annually', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'much', 'money', 'does', 'generate', 'from', 'TV', 'rights', 'annually', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['NASCAR', 'NASCAR']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'much', 'money', 'does', 'generate', 'from', 'TV', 'rights', 'annually', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'much', 'money', 'does', 'generate', 'from', 'TV', 'rights', 'annually']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'TV': 1, 'money': 1, 'generate': 1, 'annually': 1, 'rights': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'NASCAR': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'rights': 1, 'TV': 1, 'money': 1, 'NASCAR': 2, 'annually': 1, 'generate': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4c350>]
DEBUG  Here is the answer template: question_id: 156.5; query_terms: set(['TV', 'money', 'generate', 'annually', 'rights']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'schools', 'make', 'up', 'the', 'university', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'schools', 'make', 'up', 'the', 'university', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Tufts', 'University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'schools', 'make', 'up', 'the', 'university', '?', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['University']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'schools', 'make', 'up', 'the', 'university', '?', 'Tufts']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'schools', 'make', 'up', 'the', 'university', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'schools': 1, 'make': 1, 'university': 1, 'Tufts': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'University': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'schools': 1, 'University': 1, 'make': 1, 'university': 1, 'Tufts': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 158.5; query_terms: set(['schools', 'make', 'university', 'Tufts']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'Warren', 'Moon', "'s", 'agent', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', "'s", 'agent', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Warren Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Warren', 'Moon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Warren Moon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', "'s", 'agent', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Warren Moon', 'Warren Moon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', "'s", 'agent', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 's', 'agent']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 1, 'agent': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Warren Moon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'s': 1, 'agent': 1, 'Warren Moon': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 141.5; query_terms: set(['s', 'agent']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['At', 'what', 'time', 'is', 'The', 'Daily', 'Show', 'initially', 'televised', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['At', 'what', 'time', 'is', 'The', 'initially', 'televised', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['At', 'what', 'time', 'is', 'The', 'initially', 'televised', '?', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Daily Show', 'Daily Show']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['At', 'what', 'time', 'is', 'The', 'initially', 'televised', '?', 'The']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['At', 'what', 'time', 'is', 'The', 'initially', 'televised', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'initially': 1, 'televised': 1, 'time': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Daily Show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'initially': 1, 'Daily Show': 2, 'televised': 1, 'time': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 149.4; query_terms: set(['initially', 'televised', 'time']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'Prince', 'Edward', 'engage', 'to', 'marry', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'engage', 'to', 'marry', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Edward']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Britain', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Britain']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'engage', 'to', 'marry', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince Edward', 'Britain']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'engage', 'to', 'marry', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'engage', 'to', 'marry', 's', 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'engage': 1, 'marry': 1, 's': 1, 'Edward': 1, 'marries': 1, 'Prince': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Prince Edward': 1, 'Britain': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Prince Edward': 1, 'engage': 1, 'marry': 1, 'Britain': 1, 's': 1, 'Edward': 1, 'marries': 1, 'Prince': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 147.1; query_terms: set(['engage', 'marry', 's', 'Edward', 'marries', 'Prince']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'personnel', 'comprise', 'the', 'division', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'personnel', 'comprise', 'the', 'division', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'personnel', 'comprise', 'the', 'division', '?', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'personnel', 'comprise', 'the', 'division', '?', '82nd', 'Airborne', 'Division']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'personnel', 'comprise', 'the', 'division', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'82nd': 1, 'Division': 1, 'division': 1, 'personnel': 1, 'Airborne': 1, 'comprise': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'82nd': 1, 'Division': 1, 'division': 1, 'personnel': 1, 'Airborne': 1, 'comprise': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 144.3; query_terms: set(['82nd', 'Division', 'division', 'personnel', 'Airborne', 'comprise']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Mozart', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wolfgang', 'Amadeus', 'Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wolfgang Amadeus Mozart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mozart', 'Wolfgang Amadeus Mozart']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 152.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['During', 'what', 'years', 'were', 'these', '``', 'Superman', "''", 'movies', 'made', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['During', 'what', 'years', 'were', 'these', '``', 'Superman', "''", 'movies', 'made', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Christopher', 'Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Christopher Reeve']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['During', 'what', 'years', 'were', 'these', '``', 'Superman', "''", 'movies', 'made', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Christopher Reeve']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['During', 'what', 'years', 'were', 'these', '``', 'Superman', "''", 'movies', 'made', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['During', 'what', 'years', 'were', 'these', 'Superman', 'movies', 'made']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movies': 1, 'Superman': 1, 'made': 1, 'years': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Christopher Reeve': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'years': 1, 'movies': 1, 'made': 1, 'Christopher Reeve': 1, 'Superman': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 154.3; query_terms: set(['years', 'movies', 'made', 'Superman']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'holds', 'the', 'record', 'of', 'career', 'victories', 'in', 'NASCAR', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'holds', 'the', 'record', 'of', 'career', 'victories', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'holds', 'the', 'record', 'of', 'career', 'victories', 'in', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['NASCAR', 'NASCAR']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'holds', 'the', 'record', 'of', 'career', 'victories', 'in', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'holds', 'the', 'record', 'of', 'career', 'victories', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'career': 1, 'record': 1, 'holds': 1, 'victories': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'NASCAR': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'career': 1, 'record': 1, 'holds': 1, 'victories': 1, 'NASCAR': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 156.6; query_terms: set(['career', 'record', 'holds', 'victories']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'is', 'Tufts', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'is', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Tufts', 'University']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Tufts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['University']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'is', 'located', '?', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Tufts', 'University']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'is', 'located', '?', 'Tufts']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'is', 'located', 'Tufts']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'located': 1, 'Tufts': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'University': 1, 'Tufts': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'located': 1, 'University': 1, 'Tufts': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 158.7; query_terms: set(['located', 'Tufts']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'does', 'LPGA', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'does', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'does', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['LPGA', 'LPGA']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'does', 'stand', 'for', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'does', 'stand', 'for']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'stand': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'LPGA': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'LPGA': 2, 'stand': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc7d0>]
DEBUG  Here is the answer template: question_id: 142.1; query_terms: set(['stand']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'did', 'the', 'Prince', 'marry', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'did', 'the', 'Prince', 'marry', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Britain', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Britain']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'did', 'the', 'Prince', 'marry', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Britain']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'did', 'the', 'Prince', 'marry', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'did', 'the', 'Prince', 'marry', 's', 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 1, 'marry': 1, 'Edward': 1, 'marries': 1, 'Prince': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Britain': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'marry': 1, 's': 1, 'Britain': 1, 'Edward': 1, 'marries': 1, 'Prince': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 147.2; query_terms: set(['s', 'Edward', 'marries', 'marry', 'Prince']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'creator', 'of', 'The', 'Daily', 'Show', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'creator', 'of', 'The', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'creator', 'of', 'The', '?', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Daily Show', 'Daily Show']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'creator', 'of', 'The', '?', 'The']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'creator', 'of', 'The', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'creator': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Daily Show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Daily Show': 2, 'creator': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 149.5; query_terms: set(['creator']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'division', "'s", 'motto', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'division', "'s", 'motto', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'division', "'s", 'motto', '?', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'division', "'s", 'motto', '?', '82nd', 'Airborne', 'Division']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'division', 's', 'motto', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'82nd': 1, 'division': 1, 'Division': 1, 'Airborne': 1, 's': 1, 'motto': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'82nd': 1, 'division': 1, 'Division': 1, 'Airborne': 1, 's': 1, 'motto': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 144.4; query_terms: set(['82nd', 'division', 'Division', 'Airborne', 's', 'motto']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'Mozart', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wolfgang', 'Amadeus', 'Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wolfgang Amadeus Mozart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mozart', 'Wolfgang Amadeus Mozart']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b350>]
DEBUG  Here is the answer template: question_id: 152.2; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'is', 'the', 'LPGA', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'is', 'the', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'is', 'the', 'headquartered', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['LPGA', 'LPGA']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'is', 'the', 'headquartered', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'is', 'the', 'headquartered']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'headquartered': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'LPGA': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'LPGA': 2, 'headquartered': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 142.2; query_terms: set(['headquartered']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'record', 'career', 'total', 'of', 'victories', 'in', 'NASCAR', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'record', 'career', 'total', 'of', 'victories', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['NASCAR']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['NASCAR']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'record', 'career', 'total', 'of', 'victories', 'in', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['NASCAR', 'NASCAR']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'record', 'career', 'total', 'of', 'victories', 'in', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'record', 'career', 'total', 'of', 'victories', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'career': 1, 'record': 1, 'total': 1, 'victories': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'NASCAR': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'career': 1, 'record': 1, 'total': 1, 'victories': 1, 'NASCAR': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 156.7; query_terms: set(['career', 'record', 'total', 'victories']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'they', 'honeymoon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'they', 'honeymoon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Britain', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Britain']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'they', 'honeymoon', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Britain']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'they', 'honeymoon', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'they', 'honeymoon', 's', 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'marries': 1, 's': 1, 'honeymoon': 1, 'Edward': 1, 'Prince': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Britain': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'honeymoon': 1, 's': 1, 'Britain': 1, 'Edward': 1, 'marries': 1, 'Prince': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b090>]
DEBUG  Here is the answer template: question_id: 147.3; query_terms: set(['Edward', 's', 'honeymoon', 'marries', 'Prince']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'Wal-Mart', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'title', 'for', 'The', 'Daily', 'Show', "'s", '2000', 'election', 'coverage', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'Wal-Mart', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'title', 'for', 'The', "'s", '2000', 'election', 'coverage', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Daily', 'Show']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Daily Show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'title', 'for', 'The', "'s", '2000', 'election', 'coverage', '?', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Daily Show', 'Daily Show']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'title', 'for', 'The', "'s", '2000', 'election', 'coverage', '?', 'The']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'title', 'for', 'The', 's', '2000', 'election', 'coverage', 'The']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'election': 1, 's': 1, '2000': 1, 'coverage': 1, 'title': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Daily Show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'title': 1, 'Daily Show': 2, 's': 1, '2000': 1, 'election': 1, 'coverage': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209c2a50>]
DEBUG  Here is the answer template: question_id: 149.6; query_terms: set(['2000', 's', 'election', 'coverage', 'title']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'Wal-Mart', 'founded', '?', 'Wal-Mart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'Wal-Mart', 'founded', '?', 'Wal-Mart']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'WalMart', 'founded', 'WalMart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1, 'WalMart': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'WalMart': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 159.1; query_terms: set(['founded', 'WalMart']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'Mozart', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wolfgang', 'Amadeus', 'Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wolfgang Amadeus Mozart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mozart', 'Wolfgang Amadeus Mozart']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 152.3; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'events', 'are', 'part', 'of', 'the', 'LPGA', 'tour', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'events', 'are', 'part', 'of', 'the', 'tour', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'events', 'are', 'part', 'of', 'the', 'tour', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['LPGA', 'LPGA']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'events', 'are', 'part', 'of', 'the', 'tour', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'events', 'are', 'part', 'of', 'the', 'tour']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'tour': 1, 'part': 1, 'events': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'LPGA': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'tour': 1, 'part': 1, 'LPGA': 2, 'events': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc7d0>]
DEBUG  Here is the answer template: question_id: 142.3; query_terms: set(['tour', 'part', 'events']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'division', "'s", 'official', 'song', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'division', "'s", 'official', 'song', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'division', "'s", 'official', 'song', '?', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'division', "'s", 'official', 'song', '?', '82nd', 'Airborne', 'Division']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'division', 's', 'official', 'song', '82nd', 'Airborne', 'Division']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'82nd': 1, 'division': 1, 'song': 1, 'official': 1, 'Airborne': 1, 'Division': 1, 's': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'82nd': 1, 'division': 1, 'Division': 1, 'official': 1, 'Airborne': 1, 's': 1, 'song': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 144.5; query_terms: set(['82nd', 'division', 'Division', 'official', 'Airborne', 's', 'song']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'actress', 'co-starred', 'in', 'the', 'most', '``', 'Superman', "''", 'movies', 'with', 'Reeve', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'actress', 'co-starred', 'in', 'the', 'most', '``', 'Superman', "''", 'movies', 'with', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Christopher', 'Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Christopher Reeve']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'actress', 'co-starred', 'in', 'the', 'most', '``', 'Superman', "''", 'movies', 'with', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Reeve', 'Christopher Reeve']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'actress', 'co-starred', 'in', 'the', 'most', '``', 'Superman', "''", 'movies', 'with', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'actress', 'costarred', 'in', 'the', 'most', 'Superman', 'movies', 'with']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movies': 1, 'costarred': 1, 'actress': 1, 'Superman': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Christopher Reeve': 1, 'Reeve': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Christopher Reeve': 1, 'Reeve': 1, 'actress': 1, 'movies': 1, 'costarred': 1, 'Superman': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4d290>]
DEBUG  Here is the answer template: question_id: 154.4; query_terms: set(['movies', 'costarred', 'actress', 'Superman']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'founded', 'Wal-Mart', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'founded', 'Wal-Mart', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'founded', 'Wal-Mart', '?', 'Wal-Mart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'founded', 'Wal-Mart', '?', 'Wal-Mart']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'founded', 'WalMart', 'WalMart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1, 'WalMart': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'WalMart': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f126210>]
DEBUG  Here is the answer template: question_id: 159.2; query_terms: set(['founded', 'WalMart']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Edward', 'in', 'line', 'for', 'the', 'throne', 'at', 'the', 'time', 'of', 'the', 'wedding', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'in', 'line', 'for', 'the', 'throne', 'at', 'the', 'time', 'of', 'the', 'wedding', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Edward']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Britain', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Britain']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'in', 'line', 'for', 'the', 'throne', 'at', 'the', 'time', 'of', 'the', 'wedding', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Edward', 'Britain']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'in', 'line', 'for', 'the', 'throne', 'at', 'the', 'time', 'of', 'the', 'wedding', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'in', 'line', 'for', 'the', 'throne', 'at', 'the', 'time', 'of', 'the', 'wedding', 's', 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'throne': 1, 'time': 1, 's': 1, 'Edward': 1, 'wedding': 1, 'line': 1, 'marries': 1, 'Prince': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Britain': 1, 'Edward': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'throne': 1, 'time': 1, 'Britain': 1, 's': 1, 'Edward': 2, 'wedding': 1, 'line': 1, 'marries': 1, 'Prince': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 147.4; query_terms: set(['throne', 'time', 's', 'Edward', 'wedding', 'line', 'marries', 'Prince']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'number', 'of', 'member', 'nations', 'of', 'the', 'U.N.', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'number', 'of', 'member', 'nations', 'of', 'the', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.N.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['United', 'Nations', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['United Nations']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'number', 'of', 'member', 'nations', 'of', 'the', 'in', '2000', '?', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.N.', 'United Nations']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'number', 'of', 'member', 'nations', 'of', 'the', 'in', '2000', '?', '(', 'U.N', '.', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'number', 'of', 'member', 'nations', 'of', 'the', 'in', '2000', 'UN']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'member': 1, '2000': 1, 'UN': 1, 'number': 1, 'nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.N.': 1, 'United Nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'number': 1, 'nations': 1, 'member': 1, '2000': 1, 'UN': 1, 'U.N.': 1, 'United Nations': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 157.1; query_terms: set(['member', '2000', 'UN', 'number', 'nations']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'the', 'final', 'episode', 'telecast', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'the', 'final', 'episode', 'telecast', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'the', 'final', 'episode', 'telecast', '?', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'the', 'final', 'episode', 'telecast', '?', 'television', 'show', 'Cheers']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'the', 'final', 'episode', 'telecast', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'television': 1, 'episode': 1, 'show': 1, 'telecast': 1, 'Cheers': 1, 'final': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'television': 1, 'episode': 1, 'show': 1, 'telecast': 1, 'Cheers': 1, 'final': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 150.1; query_terms: set(['television', 'episode', 'show', 'telecast', 'Cheers', 'final']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'non-white', 'members', 'of', 'the', 'jury', 'were', 'there', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'non-white', 'members', 'of', 'the', 'jury', 'were', 'there', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'William', 'King', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John William King']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'non-white', 'members', 'of', 'the', 'jury', 'were', 'there', '?', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John William King']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'non-white', 'members', 'of', 'the', 'jury', 'were', 'there', '?', 'convicted', 'of', 'murder']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'nonwhite', 'members', 'of', 'the', 'jury', 'were', 'there', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'convicted': 1, 'jury': 1, 'murder': 1, 'nonwhite': 1, 'members': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John William King': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'murder': 1, 'jury': 1, 'nonwhite': 1, 'convicted': 1, 'members': 1, 'John William King': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 145.1; query_terms: set(['convicted', 'nonwhite', 'murder', 'jury', 'members']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'does', 'the', 'LPGA', 'celebrate', 'its', '50th', 'anniversary', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'does', 'the', 'celebrate', 'its', '50th', 'anniversary', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'does', 'the', 'celebrate', 'its', '50th', 'anniversary', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['LPGA', 'LPGA']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'does', 'the', 'celebrate', 'its', '50th', 'anniversary', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'does', 'the', 'celebrate', 'its', '50th', 'anniversary']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'anniversary': 1, 'celebrate': 1, '50th': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'LPGA': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'LPGA': 2, 'anniversary': 1, 'celebrate': 1, '50th': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 142.4; query_terms: set(['anniversary', 'celebrate', '50th']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Wal-Mart', 'employees', 'are', 'there', 'in', 'the', 'U.S.', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Wal-Mart', 'employees', 'are', 'there', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Wal-Mart', 'employees', 'are', 'there', 'in', 'the', '?', 'Wal-Mart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Wal-Mart', 'employees', 'are', 'there', 'in', 'the', '?', 'Wal-Mart']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'WalMart', 'employees', 'are', 'there', 'in', 'the', 'WalMart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'employees': 1, 'WalMart': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.S.': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'employees': 1, 'WalMart': 2, 'U.S.': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 159.4; query_terms: set(['employees', 'WalMart']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'Mozart', "'s", 'rival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', "'s", 'rival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wolfgang', 'Amadeus', 'Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wolfgang Amadeus Mozart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', "'s", 'rival', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mozart', 'Wolfgang Amadeus Mozart']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', "'s", 'rival', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 's', 'rival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'rival': 1, 's': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'rival': 1, 's': 1, 'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 152.5; query_terms: set(['rival', 's']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'Reeve', 'commence', 'his', 'theatrical', 'career', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'commence', 'his', 'theatrical', 'career', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Christopher', 'Reeve']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Christopher Reeve']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'commence', 'his', 'theatrical', 'career', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Reeve', 'Christopher Reeve']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'commence', 'his', 'theatrical', 'career', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'commence', 'his', 'theatrical', 'career']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'career': 1, 'theatrical': 1, 'commence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Christopher Reeve': 1, 'Reeve': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'career': 1, 'theatrical': 1, 'commence': 1, 'Reeve': 1, 'Christopher Reeve': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4d290>]
DEBUG  Here is the answer template: question_id: 154.5; query_terms: set(['career', 'theatrical', 'commence']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'network', 'aired', 'the', 'show', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'network', 'aired', 'the', 'show', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'network', 'aired', 'the', 'show', '?', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'network', 'aired', 'the', 'show', '?', 'television', 'show', 'Cheers']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'network', 'aired', 'the', 'show', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Cheers': 1, 'aired': 1, 'television': 1, 'network': 1, 'show': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Cheers': 1, 'aired': 1, 'show': 2, 'television': 1, 'network': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23453f10>]
DEBUG  Here is the answer template: question_id: 150.2; query_terms: set(['Cheers', 'aired', 'show', 'television', 'network']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'stores', 'does', 'Wal-Mart', 'operate', 'world-wide', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'stores', 'does', 'Wal-Mart', 'operate', 'world-wide', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'stores', 'does', 'Wal-Mart', 'operate', 'world-wide', '?', 'Wal-Mart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'stores', 'does', 'Wal-Mart', 'operate', 'world-wide', '?', 'Wal-Mart']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'stores', 'does', 'WalMart', 'operate', 'worldwide', 'WalMart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'worldwide': 1, 'WalMart': 2, 'stores': 1, 'operate': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'worldwide': 1, 'WalMart': 2, 'stores': 1, 'operate': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2096ddd0>]
DEBUG  Here is the answer template: question_id: 159.5; query_terms: set(['worldwide', 'WalMart', 'stores', 'operate']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'people', 'were', 'founders', 'of', 'LPGA', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'people', 'were', 'founders', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['LPGA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['LPGA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'people', 'were', 'founders', 'of', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['LPGA', 'LPGA']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'people', 'were', 'founders', 'of', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'people', 'were', 'founders', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founders': 1, 'people': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'LPGA': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founders': 1, 'LPGA': 2, 'people': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 142.5; query_terms: set(['founders', 'people']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'Prince', "'s", 'occupation', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', "'s", 'occupation', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Britain', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Britain']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', "'s", 'occupation', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince', 'Britain']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', "'s", 'occupation', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 's', 'occupation', 's', 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 2, 'Edward': 1, 'marries': 1, 'Prince': 1, 'occupation': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Britain': 1, 'Prince': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'s': 2, 'Britain': 1, 'Edward': 1, 'marries': 1, 'Prince': 2, 'occupation': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b090>]
DEBUG  Here is the answer template: question_id: 147.5; query_terms: set(['s', 'Edward', 'marries', 'Prince', 'occupation']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'children', 'did', 'Mozart', 'have', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'children', 'did', 'have', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wolfgang', 'Amadeus', 'Mozart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wolfgang Amadeus Mozart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'children', 'did', 'have', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mozart', 'Wolfgang Amadeus Mozart']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'children', 'did', 'have', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'children', 'did', 'have']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'children': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wolfgang Amadeus Mozart': 1, 'Mozart': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Wolfgang Amadeus Mozart': 1, 'children': 1, 'Mozart': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b350>]
DEBUG  Here is the answer template: question_id: 152.6; query_terms: set(['children']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'non-permanent', 'members', 'are', 'in', 'the', 'Security', 'Council', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'non-permanent', 'members', 'are', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Security Council']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['United', 'Nations', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['United Nations']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'non-permanent', 'members', 'are', 'in', 'the', '?', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Security Council', 'United Nations']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'non-permanent', 'members', 'are', 'in', 'the', '?', '(', 'U.N', '.', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'nonpermanent', 'members', 'are', 'in', 'the', 'UN']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'UN': 1, 'nonpermanent': 1, 'members': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Security Council': 1, 'United Nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Security Council': 1, 'UN': 1, 'nonpermanent': 1, 'members': 1, 'United Nations': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 157.2; query_terms: set(['UN', 'nonpermanent', 'members']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'played', 'Diane', 'Chambers', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'played', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Diane Chambers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'played', '?', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Diane Chambers']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'played', '?', 'television', 'show', 'Cheers']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'played', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Cheers': 1, 'television': 1, 'show': 1, 'played': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Diane Chambers': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Cheers': 1, 'Diane Chambers': 1, 'television': 1, 'played': 1, 'show': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 150.3; query_terms: set(['Cheers', 'television', 'played', 'show']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'foreman', 'for', 'the', 'jury', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'foreman', 'for', 'the', 'jury', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'William', 'King', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John William King']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'foreman', 'for', 'the', 'jury', '?', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John William King']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'foreman', 'for', 'the', 'jury', '?', 'convicted', 'of', 'murder']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'foreman', 'for', 'the', 'jury', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'convicted': 1, 'foreman': 1, 'murder': 1, 'jury': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John William King': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'convicted': 1, 'foreman': 1, 'John William King': 1, 'murder': 1, 'jury': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 145.2; query_terms: set(['convicted', 'foreman', 'murder', 'jury']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', 'India', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['India']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', '?', 'Wal-Mart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['India']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', '?', 'Wal-Mart']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'WalMart', 'outlets', 'are', 'there', 'in', 'WalMart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'WalMart': 2, 'outlets': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'India': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'WalMart': 2, 'India': 1, 'outlets': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 159.6; query_terms: set(['WalMart', 'outlets']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'is', 'the', 'Institute', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Enterprise', 'Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Institute', 'American Enterprise Institute']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'is', 'the', 'located', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'is', 'the', 'located']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'located': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Institute': 1, 'American Enterprise Institute': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Institute': 1, 'located': 1, 'American Enterprise Institute': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 143.1; query_terms: set(['located']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez', 'is', 'president', 'of', 'which', 'country', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['is', 'president', 'of', 'which', 'country', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'long', 'does', 'a', 'non-permanent', 'member', 'serve', 'on', 'the', 'Security', 'Council', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['is', 'president', 'of', 'which', 'country', '?', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hugo Chavez', 'Hugo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['is', 'president', 'of', 'which', 'country', '?', 'Chavez']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['is', 'president', 'of', 'which', 'country', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 1, 'Chavez': 1, 'country': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hugo': 1, 'Hugo Chavez': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hugo': 1, 'president': 1, 'Hugo Chavez': 1, 'Chavez': 1, 'country': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 155.1; query_terms: set(['president', 'Chavez', 'country']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'long', 'does', 'a', 'non-permanent', 'member', 'serve', 'on', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Security Council']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['United', 'Nations', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['United Nations']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'long', 'does', 'a', 'non-permanent', 'member', 'serve', 'on', 'the', '?', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Security Council', 'United Nations']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'long', 'does', 'a', 'non-permanent', 'member', 'serve', 'on', 'the', '?', '(', 'U.N', '.', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'long', 'does', 'a', 'nonpermanent', 'member', 'serve', 'on', 'the', 'UN']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'member': 1, 'UN': 1, 'serve': 1, 'nonpermanent': 1, 'long': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Security Council': 1, 'United Nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Security Council': 1, 'serve': 1, 'long': 1, 'member': 1, 'UN': 1, 'nonpermanent': 1, 'United Nations': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 157.3; query_terms: set(['member', 'UN', 'serve', 'nonpermanent', 'long']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'people', 'viewed', 'the', 'wedding', 'on', 'television', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'people', 'viewed', 'the', 'wedding', 'on', 'television', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Britain', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Britain']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'people', 'viewed', 'the', 'wedding', 'on', 'television', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Britain']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'people', 'viewed', 'the', 'wedding', 'on', 'television', '?', "'s", 'Prince', 'Edward', 'marries']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'people', 'viewed', 'the', 'wedding', 'on', 'television', 's', 'Prince', 'Edward', 'marries']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'television': 1, 'people': 1, 's': 1, 'Edward': 1, 'wedding': 1, 'marries': 1, 'Prince': 1, 'viewed': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Britain': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'television': 1, 'people': 1, 'Britain': 1, 's': 1, 'Edward': 1, 'wedding': 1, 'marries': 1, 'Prince': 1, 'viewed': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 147.6; query_terms: set(['television', 'people', 's', 'Edward', 'wedding', 'marries', 'Prince', 'viewed']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'the', 'trial', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'the', 'trial', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'William', 'King', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John William King']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'the', 'trial', 'held', '?', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John William King']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'the', 'trial', 'held', '?', 'convicted', 'of', 'murder']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'the', 'trial', 'held', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'convicted': 1, 'trial': 1, 'murder': 1, 'held': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John William King': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'convicted': 1, 'trial': 1, 'murder': 1, 'John William King': 1, 'held': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 145.3; query_terms: set(['convicted', 'trial', 'murder', 'held']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', 'China', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Wal-Mart']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', '?', 'Wal-Mart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['China']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Wal-Mart', 'outlets', 'are', 'there', 'in', '?', 'Wal-Mart']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'WalMart', 'outlets', 'are', 'there', 'in', 'WalMart']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'WalMart': 2, 'outlets': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'China': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'WalMart': 2, 'China': 1, 'outlets': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 159.7; query_terms: set(['WalMart', 'outlets']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'full', 'title', 'of', 'the', 'organization', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'full', 'title', 'of', 'the', 'organization', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Enterprise', 'Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'played', 'Sam', 'Malone', 'the', 'bartender', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'full', 'title', 'of', 'the', 'organization', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['American Enterprise Institute']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'full', 'title', 'of', 'the', 'organization', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'full', 'title', 'of', 'the', 'organization']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'organization': 1, 'full': 1, 'title': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Enterprise Institute': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'organization': 1, 'full': 1, 'American Enterprise Institute': 1, 'title': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 143.2; query_terms: set(['organization', 'full', 'title']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'played', 'the', 'bartender', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Sam Malone']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'played', 'the', 'bartender', '?', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Sam Malone']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'played', 'the', 'bartender', '?', 'television', 'show', 'Cheers']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'played', 'the', 'bartender', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Cheers': 1, 'television': 1, 'show': 1, 'bartender': 1, 'played': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Sam Malone': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'television': 1, 'bartender': 1, 'played': 1, 'show': 1, 'Cheers': 1, 'Sam Malone': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 150.4; query_terms: set(['Cheers', 'television', 'played', 'bartender', 'show']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'Hugo', 'Chavez', 'when', 'first', 'elected', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'Chavez', 'when', 'first', 'elected', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'Chavez', 'when', 'first', 'elected', '?', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hugo', 'Hugo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'Chavez', 'when', 'first', 'elected', '?', 'Chavez']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'Chavez', 'when', 'first', 'elected', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'elected': 1, 'Chavez': 2, 'old': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hugo': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hugo': 2, 'elected': 1, 'Chavez': 2, 'old': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4d290>]
DEBUG  Here is the answer template: question_id: 155.2; query_terms: set(['elected', 'Chavez', 'old']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'often', 'does', 'the', 'presidency', 'of', 'the', 'Security', 'Council', 'rotate', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'often', 'does', 'the', 'presidency', 'of', 'the', 'rotate', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Security Council']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['United', 'Nations', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['United Nations']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'often', 'does', 'the', 'presidency', 'of', 'the', 'rotate', '?', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Security Council', 'United Nations']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'often', 'does', 'the', 'presidency', 'of', 'the', 'rotate', '?', '(', 'U.N', '.', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'often', 'does', 'the', 'presidency', 'of', 'the', 'rotate', 'UN']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'rotate': 1, 'presidency': 1, 'UN': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Security Council': 1, 'United Nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Security Council': 1, 'rotate': 1, 'United Nations': 1, 'presidency': 1, 'UN': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 157.4; query_terms: set(['rotate', 'presidency', 'UN']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'member', 'nations', 'are', 'in', 'the', 'IMF', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'member', 'nations', 'are', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'member', 'nations', 'are', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['IMF', 'IMF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'member', 'nations', 'are', 'in', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'member', 'nations', 'are', 'in', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'member': 1, 'nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'IMF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'member': 1, 'IMF': 2, 'nations': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 160.1; query_terms: set(['member', 'nations']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'Hitchcock', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'country', 'is', 'Luxor', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Alfred', 'Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Alfred Hitchcock']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hitchcock', 'Alfred Hitchcock']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 153.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'country', 'is', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['tourists', 'massacred', 'at', 'Luxor', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'country', 'is', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Luxor', 'Luxor']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'country', 'is', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'country', 'is', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'massacred': 1, 'tourists': 1, '1997': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Luxor': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'country': 1, 'massacred': 1, 'tourists': 1, '1997': 1, 'Luxor': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b090>]
DEBUG  Here is the answer template: question_id: 148.1; query_terms: set(['country', 'massacred', 'tourists', '1997']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'King', 'convicted', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'King', 'convicted', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'William', 'King', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John William King']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'King', 'convicted', '?', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John William King']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'King', 'convicted', '?', 'convicted', 'of', 'murder']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'King', 'convicted', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'convicted': 2, 'King': 1, 'murder': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John William King': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'convicted': 2, 'King': 1, 'murder': 1, 'John William King': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 145.4; query_terms: set(['convicted', 'King', 'murder']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'Chavez', 'graduate', 'from', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'graduate', 'from', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'graduate', 'from', '?', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chavez', 'Hugo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'graduate', 'from', '?', 'Chavez']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'graduate', 'from', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Chavez': 1, 'graduate': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hugo': 1, 'Chavez': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hugo': 1, 'Chavez': 2, 'graduate': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 155.3; query_terms: set(['Chavez', 'graduate']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'it', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'it', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Enterprise', 'Institute']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Enterprise Institute']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'it', 'founded', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['American Enterprise Institute']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'it', 'founded', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'it', 'founded']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Enterprise Institute': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'American Enterprise Institute': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 143.3; query_terms: set(['founded']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'country', 'received', 'the', 'largest', 'loan', 'ever', 'granted', 'by', 'the', 'IMF', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'country', 'received', 'the', 'largest', 'loan', 'ever', 'granted', 'by', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'country', 'received', 'the', 'largest', 'loan', 'ever', 'granted', 'by', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['IMF', 'IMF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'country', 'received', 'the', 'largest', 'loan', 'ever', 'granted', 'by', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'country', 'received', 'the', 'largest', 'loan', 'ever', 'granted', 'by', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'loan': 1, 'largest': 1, 'granted': 1, 'received': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'IMF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'received': 1, 'IMF': 2, 'country': 1, 'loan': 1, 'largest': 1, 'granted': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ad50>]
DEBUG  Here is the answer template: question_id: 160.3; query_terms: set(['country', 'loan', 'received', 'granted', 'largest']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'Boston', 'bar', 'was', 'the', 'inspiration', 'for', 'Cheers', "'", 'bar', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'bar', 'was', 'the', 'inspiration', 'for', "'", 'bar', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Boston', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'bar', 'was', 'the', 'inspiration', 'for', "'", 'bar', '?', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Boston', 'Cheers']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'bar', 'was', 'the', 'inspiration', 'for', "'", 'bar', '?', 'television', 'show', 'Cheers']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'bar', 'was', 'the', 'inspiration', 'for', 'bar', 'television', 'show', 'Cheers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Cheers': 1, 'television': 1, 'show': 1, 'bar': 2, 'inspiration': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cheers': 1, 'Boston': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'television': 1, 'bar': 2, 'show': 1, 'Boston': 1, 'Cheers': 2, 'inspiration': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 150.5; query_terms: set(['Cheers', 'television', 'inspiration', 'bar', 'show']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'Chavez', 'graduate', 'from', 'this', 'school', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'graduate', 'from', 'this', 'school', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'graduate', 'from', 'this', 'school', '?', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chavez', 'Hugo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'graduate', 'from', 'this', 'school', '?', 'Chavez']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'graduate', 'from', 'this', 'school', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'school': 1, 'Chavez': 1, 'graduate': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hugo': 1, 'Chavez': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hugo': 1, 'school': 1, 'Chavez': 2, 'graduate': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4d290>]
DEBUG  Here is the answer template: question_id: 155.4; query_terms: set(['school', 'Chavez', 'graduate']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'President', 'of', 'the', 'U.N.', 'Security', 'Council', 'for', 'August', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Hitchcock', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Alfred', 'Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Alfred Hitchcock']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hitchcock', 'Alfred Hitchcock']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 153.2; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'the', 'massacre', 'happen', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'the', 'massacre', 'happen', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['tourists', 'massacred', 'at', 'Luxor', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'the', 'massacre', 'happen', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Luxor']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'the', 'massacre', 'happen', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'the', 'massacre', 'happen', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'massacred': 1, '1997': 1, 'massacre': 1, 'date': 1, 'happen': 1, 'tourists': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Luxor': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'massacred': 1, '1997': 1, 'massacre': 1, 'Luxor': 1, 'date': 1, 'happen': 1, 'tourists': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 148.2; query_terms: set(['massacred', '1997', 'massacre', 'date', 'happen', 'tourists']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'President', 'of', 'the', 'Security', 'Council', 'for', 'August', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.N.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['United', 'Nations', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['United Nations']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'President', 'of', 'the', 'Security', 'Council', 'for', 'August', '1999', '?', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.N.', 'United Nations']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'President', 'of', 'the', 'Security', 'Council', 'for', 'August', '1999', '?', '(', 'U.N', '.', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'President', 'of', 'the', 'Security', 'Council', 'for', 'August', '1999', 'UN']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'August': 1, '1999': 1, 'UN': 1, 'Council': 1, 'President': 1, 'Security': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.N.': 1, 'United Nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'August': 1, '1999': 1, 'UN': 1, 'Council': 1, 'President': 1, 'Security': 1, 'U.N.': 1, 'United Nations': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 157.5; query_terms: set(['August', '1999', 'UN', 'Council', 'President', 'Security']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'other', 'form', 'of', 'treatment', 'has', 'been', 'used', 'for', 'multiple', 'myeloma', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'other', 'form', 'of', 'treatment', 'has', 'been', 'used', 'for', 'multiple', 'myeloma', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Multiple', 'Myeloma']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Multiple Myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'other', 'form', 'of', 'treatment', 'has', 'been', 'used', 'for', 'multiple', 'myeloma', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Multiple Myeloma']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'other', 'form', 'of', 'treatment', 'has', 'been', 'used', 'for', 'multiple', 'myeloma', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'other', 'form', 'of', 'treatment', 'has', 'been', 'used', 'for', 'multiple', 'myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'multiple': 1, 'treatment': 1, 'form': 1, 'myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Multiple Myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Multiple Myeloma': 1, 'multiple': 1, 'treatment': 1, 'form': 1, 'myeloma': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6a810>]
DEBUG  Here is the answer template: question_id: 162.3; query_terms: set(['multiple', 'treatment', 'form', 'myeloma']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'victim', 'of', 'the', 'murder', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'victim', 'of', 'the', 'murder', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'William', 'King', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John William King']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'victim', 'of', 'the', 'murder', '?', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John William King']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'victim', 'of', 'the', 'murder', '?', 'convicted', 'of', 'murder']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'victim', 'of', 'the', 'murder', 'convicted', 'of', 'murder']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'convicted': 1, 'murder': 2, 'victim': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John William King': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'convicted': 1, 'murder': 2, 'John William King': 1, 'victim': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 145.5; query_terms: set(['convicted', 'murder', 'victim']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'record', 'loan', 'amount', 'granted', 'by', 'the', 'IMF', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'record', 'loan', 'amount', 'granted', 'by', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'record', 'loan', 'amount', 'granted', 'by', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['IMF', 'IMF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'record', 'loan', 'amount', 'granted', 'by', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'record', 'loan', 'amount', 'granted', 'by', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'record': 1, 'loan': 1, 'amount': 1, 'granted': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'IMF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'record': 1, 'loan': 1, 'IMF': 2, 'amount': 1, 'granted': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f1260d0>]
DEBUG  Here is the answer template: question_id: 160.4; query_terms: set(['record', 'loan', 'amount', 'granted']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'people', 'died', 'from', 'the', 'massacre', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'people', 'died', 'from', 'the', 'massacre', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['tourists', 'massacred', 'at', 'Luxor', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Luxor']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'people', 'died', 'from', 'the', 'massacre', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Luxor']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'people', 'died', 'from', 'the', 'massacre', '?', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'people', 'died', 'from', 'the', 'massacre', 'tourists', 'massacred', 'at', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'massacred': 1, '1997': 1, 'people': 1, 'massacre': 1, 'tourists': 1, 'died': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Luxor': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'massacred': 1, '1997': 1, 'people': 1, 'massacre': 1, 'Luxor': 1, 'tourists': 1, 'died': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b090>]
DEBUG  Here is the answer template: question_id: 148.3; query_terms: set(['massacred', '1997', 'people', 'massacre', 'tourists', 'died']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Hitchcock', "'s", 'first', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', "'s", 'first', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Alfred', 'Hitchcock']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Alfred Hitchcock']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', "'s", 'first', 'movie', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hitchcock', 'Alfred Hitchcock']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', "'s", 'first', 'movie', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 's', 'first', 'movie']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movie': 1, 's': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Alfred Hitchcock': 1, 'Hitchcock': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'movie': 1, 's': 1, 'Hitchcock': 1, 'Alfred Hitchcock': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 153.3; query_terms: set(['movie', 's']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'leader', 'deposed', 'by', 'the', 'overthrow', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'leader', 'deposed', 'by', 'the', 'overthrow', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pakistani', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pakistani']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'leader', 'deposed', 'by', 'the', 'overthrow', '?', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pakistani']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'leader', 'deposed', 'by', 'the', 'overthrow', '?', 'government', 'overthrown', 'in', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'leader', 'deposed', 'by', 'the', 'overthrow', 'government', 'overthrown', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'government': 1, '1999': 1, 'deposed': 1, 'overthrow': 1, 'leader': 1, 'overthrown': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pakistani': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'government': 1, '1999': 1, 'deposed': 1, 'overthrow': 1, 'Pakistani': 1, 'leader': 1, 'overthrown': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 146.1; query_terms: set(['government', '1999', 'deposed', 'overthrow', 'leader', 'overthrown']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'percentage', 'of', 'the', '2000', 'Presidential', 'vote', 'did', 'Chavez', 'receive', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'percentage', 'of', 'the', '2000', 'Presidential', 'vote', 'did', 'receive', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hugo', 'Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Chavez']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hugo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'percentage', 'of', 'the', '2000', 'Presidential', 'vote', 'did', 'receive', '?', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chavez', 'Hugo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'percentage', 'of', 'the', '2000', 'Presidential', 'vote', 'did', 'receive', '?', 'Chavez']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'percentage', 'of', 'the', '2000', 'Presidential', 'vote', 'did', 'receive', 'Chavez']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Chavez': 1, 'receive': 1, '2000': 1, 'vote': 1, 'percentage': 1, 'Presidential': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hugo': 1, 'Chavez': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Chavez': 2, 'receive': 1, 'Hugo': 1, '2000': 1, 'vote': 1, 'percentage': 1, 'Presidential': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 155.6; query_terms: set(['Chavez', 'receive', '2000', 'vote', 'percentage', 'Presidential']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Tony', 'Awards', 'has', 'she', 'won', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'has', 'she', 'won', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Tony Awards']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Judi', 'Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'has', 'she', 'won', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Tony Awards', 'Judi Dench']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'has', 'she', 'won', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'has', 'she', 'won']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'won': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Judi Dench': 1, 'Tony Awards': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Judi Dench': 1, 'won': 1, 'Tony Awards': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6aa90>]
DEBUG  Here is the answer template: question_id: 164.6; query_terms: set(['won']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Americans', 'develop', 'multiple', 'myeloma', 'every', 'year', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Americans', 'develop', 'multiple', 'myeloma', 'every', 'year', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Multiple', 'Myeloma']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Multiple Myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Americans', 'develop', 'multiple', 'myeloma', 'every', 'year', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Multiple Myeloma']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Americans', 'develop', 'multiple', 'myeloma', 'every', 'year', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'Americans', 'develop', 'multiple', 'myeloma', 'every', 'year']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'develop': 1, 'Americans': 1, 'myeloma': 1, 'multiple': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Multiple Myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Americans': 1, 'develop': 1, 'myeloma': 1, 'Multiple Myeloma': 1, 'multiple': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc7d0>]
DEBUG  Here is the answer template: question_id: 162.4; query_terms: set(['Americans', 'develop', 'myeloma', 'multiple']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'does', 'IMF', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'does', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'does', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['IMF', 'IMF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'does', 'stand', 'for', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'does', 'stand', 'for']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'stand': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'IMF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'stand': 1, 'IMF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x298dadd0>]
DEBUG  Here is the answer template: question_id: 160.5; query_terms: set(['stand']); type_weights: defaultdict(<function <lambda> at 0x2609bed8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'Secretary-General', 'for', 'political', 'affairs', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'is', 'the', 'Millennium', 'Wheel', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'Secretary-General', 'for', 'political', 'affairs', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['United', 'Nations', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Millennium', 'Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'is', 'the', 'located', '?', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Millennium Wheel', 'Millennium Wheel']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'located', '?', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'located', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'located': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Millennium Wheel': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Millennium Wheel': 2, 'located': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6a990>]
DEBUG  Here is the answer template: question_id: 167.1; query_terms: set(['city', 'located']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['United Nations']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'Secretary-General', 'for', 'political', 'affairs', '?', '(', 'U.N', '.', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['United Nations']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'Secretary-General', 'for', 'political', 'affairs', '?', '(', 'U.N', '.', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'SecretaryGeneral', 'for', 'political', 'affairs', 'UN']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'affairs': 1, 'UN': 1, 'political': 1, 'SecretaryGeneral': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'United Nations': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'affairs': 1, 'UN': 1, 'political': 1, 'SecretaryGeneral': 1, 'United Nations': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 157.7; query_terms: set(['affairs', 'UN', 'political', 'SecretaryGeneral']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'county', 'was', 'Stonehenge', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'county', 'was', 'Stonehenge', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'county', 'was', 'Stonehenge', 'built', '?', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'county', 'was', 'Stonehenge', 'built', '?', 'stone', 'circles']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'county', 'was', 'Stonehenge', 'built', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'county': 1, 'stone': 1, 'Stonehenge': 1, 'circles': 1, 'built': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'county': 1, 'circles': 1, 'stone': 1, 'Stonehenge': 1, 'built': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6abd0>]
DEBUG  Here is the answer template: question_id: 169.4; query_terms: set(['county', 'circles', 'stone', 'Stonehenge', 'built']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'Ben', "'s", 'last', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'she', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', "'s", 'last', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Ben', '&', 'Jerry', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['&', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', "'s", 'last', 'name', '?', '&', "'s"]
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Ben', 'Ben', 'Jerry']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', "'s", 'last', 'name', '?', '&', "'s"]
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 's', 'last', 'name', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 2, 'name': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Ben': 2, 'Jerry': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'s': 2, 'Ben': 2, 'name': 1, 'Jerry': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6a8d0>]
DEBUG  Here is the answer template: question_id: 172.3; query_terms: set(['s', 'name']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'she', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Judi', 'Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'she', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Judi Dench']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'she', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'she', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Judi Dench': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Judi Dench': 1, 'born': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 164.7; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'high', 'is', 'the', 'Millennium', 'Wheel', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'high', 'is', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Millennium', 'Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'high', 'is', 'the', '?', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Millennium Wheel', 'Millennium Wheel']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'high', 'is', 'the', '?', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'high', 'is', 'the', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'high': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Millennium Wheel': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'high': 1, 'Millennium Wheel': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 167.2; query_terms: set(['high']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'deaths', 'are', 'caused', 'by', 'multiple', 'myeloma', 'in', 'the', 'U.S.', 'annually', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'deaths', 'are', 'caused', 'by', 'multiple', 'myeloma', 'in', 'the', 'annually', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Multiple', 'Myeloma']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Multiple Myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'deaths', 'are', 'caused', 'by', 'multiple', 'myeloma', 'in', 'the', 'annually', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.', 'Multiple Myeloma']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'deaths', 'are', 'caused', 'by', 'multiple', 'myeloma', 'in', 'the', 'annually', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'deaths', 'are', 'caused', 'by', 'multiple', 'myeloma', 'in', 'the', 'annually']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'annually': 1, 'caused': 1, 'multiple': 1, 'myeloma': 1, 'deaths': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.S.': 1, 'Multiple Myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'multiple': 1, 'deaths': 1, 'caused': 1, 'U.S.': 1, 'myeloma': 1, 'Multiple Myeloma': 1, 'annually': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x271105d0>]
DEBUG  Here is the answer template: question_id: 162.5; query_terms: set(['annually', 'caused', 'multiple', 'myeloma', 'deaths']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'IMF', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'founded', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['IMF', 'IMF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'founded', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'founded']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'IMF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'IMF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f126190>]
DEBUG  Here is the answer template: question_id: 160.6; query_terms: set(['founded']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['According', 'to', 'the', 'AFBF', ',', 'what', 'is', 'the', 'average', 'cost', 'of', 'a', 'turkey', 'dinner', 'with', 'all', 'the', 'trimmings', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['According', 'to', 'the', ',', 'what', 'is', 'the', 'average', 'cost', 'of', 'a', 'turkey', 'dinner', 'with', 'all', 'the', 'trimmings', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['AFBF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Farm', 'Bureau', 'Federation', '(', 'AFBF', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Farm Bureau Federation', 'AFBF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['According', 'to', 'the', ',', 'what', 'is', 'the', 'average', 'cost', 'of', 'a', 'turkey', 'dinner', 'with', 'all', 'the', 'trimmings', '?', '(', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['AFBF', 'American Farm Bureau Federation', 'AFBF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['According', 'to', 'the', ',', 'what', 'is', 'the', 'average', 'cost', 'of', 'a', 'turkey', 'dinner', 'with', 'all', 'the', 'trimmings', '?', '(', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['According', 'to', 'the', 'what', 'is', 'the', 'average', 'cost', 'of', 'a', 'turkey', 'dinner', 'with', 'all', 'the', 'trimmings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'turkey': 1, 'average': 1, 'cost': 1, 'dinner': 1, 'trimmings': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'turkey': 1, 'AFBF': 2, 'average': 1, 'dinner': 1, 'cost': 1, 'American Farm Bureau Federation': 1, 'trimmings': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ab10>]
DEBUG  Here is the answer template: question_id: 174.5; query_terms: set(['turkey', 'average', 'cost', 'dinner', 'trimmings']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'oldest', 'stone', 'circle', 'in', 'the', 'UK', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'oldest', 'stone', 'circle', 'in', 'the', 'UK', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'oldest', 'stone', 'circle', 'in', 'the', 'UK', '?', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'oldest', 'stone', 'circle', 'in', 'the', 'UK', '?', 'stone', 'circles']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'oldest', 'stone', 'circle', 'in', 'the', 'UK', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'circles': 1, 'stone': 2, 'oldest': 1, 'circle': 1, 'UK': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'circles': 1, 'stone': 2, 'oldest': 1, 'circle': 1, 'UK': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2098cc10>]
DEBUG  Here is the answer template: question_id: 169.6; query_terms: set(['circles', 'stone', 'oldest', 'circle', 'UK']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'Jerry', "'s", 'last', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', "'s", 'last', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Jerry']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Ben', '&', 'Jerry', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['&', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', "'s", 'last', 'name', '?', '&', "'s"]
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Jerry', 'Ben', 'Jerry']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', "'s", 'last', 'name', '?', '&', "'s"]
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 's', 'last', 'name', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 2, 'name': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Ben': 1, 'Jerry': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'s': 2, 'Ben': 1, 'name': 1, 'Jerry': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 172.4; query_terms: set(['s', 'name']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'the', 'Queen', 'Mum', "'s", '100th', 'Birthday', 'celebrated', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'much', 'money', 'was', 'wagered', 'in', 'the', '1996', 'match', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'the', "'s", '100th', 'Birthday', 'celebrated', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Queen', 'Mum', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'its', 'popular', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'much', 'money', 'was', 'wagered', 'in', 'the', '1996', 'match', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'the', "'s", '100th', 'Birthday', 'celebrated', '?', 'the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Queen Mum', 'Queen Mum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'the', "'s", '100th', 'Birthday', 'celebrated', '?', 'the', "'s", '100th', 'Birthday']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'the', 's', '100th', 'Birthday', 'celebrated', 'the', 's', '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'100th': 2, 's': 2, 'Birthday': 2, 'celebrated': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Queen Mum': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'100th': 2, 'Queen Mum': 2, 's': 2, 'Birthday': 2, 'celebrated': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 165.1; query_terms: set(['100th', 's', 'Birthday', 'celebrated']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'its', 'popular', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Deep', 'Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Millennium', 'Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'its', 'popular', 'name', '?', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Millennium Wheel']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'its', 'popular', 'name', '?', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'its', 'popular', 'name', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'popular': 1, 'name': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Millennium Wheel': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'popular': 1, 'name': 1, 'Millennium Wheel': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de90>]
DEBUG  Here is the answer template: question_id: 167.3; query_terms: set(['popular', 'name']); type_weights: defaultdict(<function <lambda> at 0x27259c80>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'much', 'money', 'was', 'wagered', 'in', 'the', '1996', 'match', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Deep Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'much', 'money', 'was', 'wagered', 'in', 'the', '1996', 'match', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'much', 'money', 'was', 'wagered', 'in', 'the', '1996', 'match']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'money': 1, 'match': 1, 'wagered': 1, '1996': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Deep Blue': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'money': 1, 'Deep Blue': 1, 'wagered': 1, 'match': 1, '1996': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ac90>]
DEBUG  Here is the answer template: question_id: 177.3; query_terms: set(['money', 'wagered', 'match', '1996']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'is', 'the', 'Hermitage', 'Museum', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hermitage', 'Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hermitage Museum', 'Hermitage Museum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'is', 'the', 'located', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'is', 'the', 'located']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'located': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hermitage Museum': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'located': 1, 'Hermitage Museum': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2382ef10>]
DEBUG  Here is the answer template: question_id: 163.1; query_terms: set(['located']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'is', 'the', 'IMF', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'is', 'the', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['IMF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['IMF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'is', 'the', 'headquartered', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['IMF', 'IMF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'is', 'the', 'headquartered', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'is', 'the', 'headquartered']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'headquartered': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'IMF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'headquartered': 1, 'IMF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x242b8210>]
DEBUG  Here is the answer template: question_id: 160.7; query_terms: set(['headquartered']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'Elian', 'at', 'the', 'time', 'of', 'the', 'shipwreck', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'at', 'the', 'time', 'of', 'the', 'shipwreck', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['repatriation', 'of', 'Elian', 'Gonzales']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['repatriation', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian Gonzales']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'at', 'the', 'time', 'of', 'the', 'shipwreck', '?', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Elian', 'Elian Gonzales']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'at', 'the', 'time', 'of', 'the', 'shipwreck', '?', 'repatriation', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'at', 'the', 'time', 'of', 'the', 'shipwreck', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'repatriation': 1, 'old': 1, 'shipwreck': 1, 'time': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Elian': 1, 'Elian Gonzales': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'old': 1, 'shipwreck': 1, 'repatriation': 1, 'Elian Gonzales': 1, 'Elian': 1, 'time': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 175.1; query_terms: set(['repatriation', 'old', 'shipwreck', 'time']); type_weights: defaultdict(<function <lambda> at 0x26344f50>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'songs', 'are', 'on', 'the', 'album', '``', 'In', 'Spite', 'of', 'Ourselves', "''", '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'songs', 'are', 'on', 'the', 'album', '``', 'In', 'Spite', 'of', "''", '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ourselves']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'Prine']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'songs', 'are', 'on', 'the', 'album', '``', 'In', 'Spite', 'of', "''", '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Ourselves', 'John Prine']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'songs', 'are', 'on', 'the', 'album', '``', 'In', 'Spite', 'of', "''", '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'songs', 'are', 'on', 'the', 'album', 'In', 'Spite', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'album': 1, 'Spite': 1, 'songs': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John Prine': 1, 'Ourselves': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'album': 1, 'John Prine': 1, 'Ourselves': 1, 'Spite': 1, 'songs': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2098cc50>]
DEBUG  Here is the answer template: question_id: 170.1; query_terms: set(['album', 'Spite', 'songs']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'rock', 'band', 'had', 'a', 'Ben', '&', 'Jerry', "'s", 'flavor', 'named', 'after', 'them', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'rock', 'band', 'had', 'a', 'Ben', '&', "'s", 'flavor', 'named', 'after', 'them', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Jerry']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Ben', '&', 'Jerry', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['&', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'rock', 'band', 'had', 'a', 'Ben', '&', "'s", 'flavor', 'named', 'after', 'them', '?', '&', "'s"]
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Jerry', 'Ben', 'Jerry']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'rock', 'band', 'had', 'a', 'Ben', '&', "'s", 'flavor', 'named', 'after', 'them', '?', '&', "'s"]
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'rock', 'band', 'had', 'a', 'Ben', 's', 'flavor', 'named', 'after', 'them', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'named': 1, 'Ben': 1, 'band': 1, 's': 2, 'rock': 1, 'flavor': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Ben': 1, 'Jerry': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'named': 1, 'Ben': 2, 'Jerry': 2, 'band': 1, 's': 2, 'rock': 1, 'flavor': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6aad0>]
DEBUG  Here is the answer template: question_id: 172.5; query_terms: set(['named', 'Ben', 'band', 's', 'rock', 'flavor']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Along', 'the', 'banks', 'of', 'what', 'river', 'is', 'the', 'Hermitage', 'Museum', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Along', 'the', 'banks', 'of', 'what', 'river', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hermitage', 'Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Along', 'the', 'banks', 'of', 'what', 'river', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hermitage Museum', 'Hermitage Museum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Along', 'the', 'banks', 'of', 'what', 'river', 'is', 'the', 'located', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Along', 'the', 'banks', 'of', 'what', 'river', 'is', 'the', 'located']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'banks': 1, 'located': 1, 'river': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hermitage Museum': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'banks': 1, 'located': 1, 'Hermitage Museum': 2, 'river': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc890>]
DEBUG  Here is the answer template: question_id: 163.2; query_terms: set(['banks', 'located', 'river']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'was', 'the', '1999', 'All-Star', 'Game', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'was', 'the', '1999', 'All-Star', 'Game', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'was', 'the', '1999', 'All-Star', 'Game', 'held', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'was', 'the', '1999', 'All-Star', 'Game', 'held', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'was', 'the', '1999', 'AllStar', 'Game', 'held', '1999', 'Baseball', 'AllStar', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, '1999': 2, 'Game': 2, 'held': 1, 'AllStar': 2, 'Baseball': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, '1999': 2, 'AllStar': 2, 'held': 1, 'Game': 2, 'Baseball': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f126210>]
DEBUG  Here is the answer template: question_id: 161.1; query_terms: set(['city', '1999', 'AllStar', 'held', 'Game', 'Baseball']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'built', 'it', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'built', 'it', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Millennium', 'Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'built', 'it', '?', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Millennium Wheel']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'built', 'it', '?', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'built', 'it', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'built': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Millennium Wheel': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'built': 1, 'Millennium Wheel': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 167.4; query_terms: set(['built']); type_weights: defaultdict(<function <lambda> at 0x20a4c5f0>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', '1996', 'match', 'consisted', 'of', 'how', 'many', 'games', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The', '1996', 'match', 'consisted', 'of', 'how', 'many', 'games', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Deep', 'Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['The', '1996', 'match', 'consisted', 'of', 'how', 'many', 'games', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Deep Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['The', '1996', 'match', 'consisted', 'of', 'how', 'many', 'games', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['The', '1996', 'match', 'consisted', 'of', 'how', 'many', 'games']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'consisted': 1, 'games': 1, 'match': 1, '1996': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Deep Blue': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1996': 1, 'games': 1, 'Deep Blue': 1, 'match': 1, 'consisted': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ed4a690>]
DEBUG  Here is the answer template: question_id: 177.4; query_terms: set(['1996', 'games', 'match', 'consisted']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'color', 'was', 'the', 'dress', 'that', 'she', 'wore', 'at', 'her', 'birthday', 'lunch', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'color', 'was', 'the', 'dress', 'that', 'she', 'wore', 'at', 'her', 'birthday', 'lunch', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Queen', 'Mum', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'color', 'was', 'the', 'dress', 'that', 'she', 'wore', 'at', 'her', 'birthday', 'lunch', '?', 'the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Queen Mum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'color', 'was', 'the', 'dress', 'that', 'she', 'wore', 'at', 'her', 'birthday', 'lunch', '?', 'the', "'s", '100th', 'Birthday']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'color', 'was', 'the', 'dress', 'that', 'she', 'wore', 'at', 'her', 'birthday', 'lunch', 'the', 's', '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'wore': 1, 'color': 1, '100th': 1, 'lunch': 1, 's': 1, 'birthday': 1, 'Birthday': 1, 'dress': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Queen Mum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Queen Mum': 1, 'wore': 1, 'color': 1, '100th': 1, 'lunch': 1, 's': 1, 'birthday': 1, 'Birthday': 1, 'dress': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2476d5d0>]
DEBUG  Here is the answer template: question_id: 165.2; query_terms: set(['wore', 'color', '100th', 'lunch', 's', 'birthday', 'Birthday', 'dress']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Unilever', 'purchased', 'Ben', '&', 'Jerry', "'s", 'in', '2000', 'for', 'what', 'price', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Unilever', 'purchased', 'Ben', '&', "'s", 'in', '2000', 'for', 'what', 'price', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Jerry']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Ben', '&', 'Jerry', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['&', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Unilever', 'purchased', 'Ben', '&', "'s", 'in', '2000', 'for', 'what', 'price', '?', '&', "'s"]
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Jerry', 'Ben', 'Jerry']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Unilever', 'purchased', 'Ben', '&', "'s", 'in', '2000', 'for', 'what', 'price', '?', '&', "'s"]
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Unilever', 'purchased', 'Ben', 's', 'in', '2000', 'for', 'what', 'price', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Ben': 1, 's': 2, 'price': 1, 'Unilever': 1, '2000': 1, 'purchased': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Ben': 1, 'Jerry': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Ben': 2, 'price': 1, 's': 2, 'Jerry': 2, '2000': 1, 'purchased': 1, 'Unilever': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x26f08390>]
DEBUG  Here is the answer template: question_id: 172.6; query_terms: set(['Ben', 'price', 's', '2000', 'purchased', 'Unilever']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'Elian', 'staying', 'with', 'in', 'Florida', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'staying', 'with', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian', 'Florida']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['repatriation', 'of', 'Elian', 'Gonzales']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['repatriation', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian Gonzales']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'staying', 'with', 'in', '?', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Elian', 'Florida', 'Elian Gonzales']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'staying', 'with', 'in', '?', 'repatriation', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'staying', 'with', 'in', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'repatriation': 1, 'staying': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Elian': 1, 'Elian Gonzales': 1, 'Florida': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'repatriation': 1, 'Elian': 1, 'staying': 1, 'Florida': 1, 'Elian Gonzales': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 175.2; query_terms: set(['repatriation', 'staying']); type_weights: defaultdict(<function <lambda> at 0x2711d668>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'did', 'Catherine', 'the', 'Great', 'begin', 'buying', 'for', 'the', 'museum', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'did', 'Catherine', 'the', 'begin', 'buying', 'for', 'the', 'museum', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hermitage', 'Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'did', 'Catherine', 'the', 'begin', 'buying', 'for', 'the', 'museum', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great', 'Hermitage Museum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'did', 'Catherine', 'the', 'begin', 'buying', 'for', 'the', 'museum', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'did', 'Catherine', 'the', 'begin', 'buying', 'for', 'the', 'museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'begin': 1, 'Catherine': 1, 'museum': 1, 'buying': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Great': 1, 'Hermitage Museum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Great': 1, 'Hermitage Museum': 1, 'museum': 1, 'Catherine': 1, 'begin': 1, 'buying': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7a8d50>]
DEBUG  Here is the answer template: question_id: 163.3; query_terms: set(['begin', 'Catherine', 'museum', 'buying']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'Queen', 'Mother', "'s", 'birth', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', "'s", 'birth', 'name', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mother']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Queen', 'Mum', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', "'s", 'birth', 'name', '?', 'the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Queen Mother', 'Queen Mum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', "'s", 'birth', 'name', '?', 'the', "'s", '100th', 'Birthday']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 's', 'birth', 'name', 'the', 's', '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'100th': 1, 's': 2, 'Birthday': 1, 'name': 1, 'birth': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Queen Mum': 1, 'Queen Mother': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Queen Mum': 1, 'name': 1, 'Queen Mother': 1, '100th': 1, 's': 2, 'Birthday': 1, 'birth': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 165.4; query_terms: set(['100th', 's', 'Birthday', 'name', 'birth']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'passenger', 'capsules', 'does', 'it', 'contain', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'passenger', 'capsules', 'does', 'it', 'contain', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Millennium', 'Wheel']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Millennium Wheel']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'passenger', 'capsules', 'does', 'it', 'contain', '?', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Millennium Wheel']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'passenger', 'capsules', 'does', 'it', 'contain', '?', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'passenger', 'capsules', 'does', 'it', 'contain', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'passenger': 1, 'capsules': 1, 'contain': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Millennium Wheel': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'passenger': 1, 'Millennium Wheel': 1, 'capsules': 1, 'contain': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de90>]
DEBUG  Here is the answer template: question_id: 167.5; query_terms: set(['passenger', 'capsules', 'contain']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'won', 'the', 'match', 'between', 'Gary', 'Kasparov', 'and', 'Deep', 'Blue', 'in', 'May', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'was', 'the', '1999', 'Game', 'originally', 'scheduled', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'was', 'the', '1999', 'Game', 'originally', 'scheduled', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'May', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Gary Kasparov', 'Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'was', 'the', '1999', 'Game', 'originally', 'scheduled', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Deep', 'Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'was', 'the', '1999', 'Game', 'originally', 'scheduled', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'was', 'the', '1999', 'Game', 'originally', 'scheduled', '1999', 'Baseball', 'AllStar', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'scheduled': 1, 'city': 1, '1999': 2, 'originally': 1, 'AllStar': 1, 'Game': 2, 'Baseball': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'scheduled': 1, 'city': 1, '1999': 2, 'originally': 1, 'Game': 2, 'AllStar': 1, 'Baseball': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ebf83d0>]
DEBUG  Here is the answer template: question_id: 161.2; query_terms: set(['scheduled', 'city', '1999', 'originally', 'Game', 'AllStar', 'Baseball']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'May', '1997', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Gary Kasparov', 'Deep Blue', 'Deep Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'May', '1997', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'May', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'won': 1, '1997': 1, 'match': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Deep Blue': 2, 'Gary Kasparov': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'won': 1, 'Gary Kasparov': 1, 'match': 1, '1997': 1, 'Deep Blue': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x295caf10>]
DEBUG  Here is the answer template: question_id: 177.5; query_terms: set(['won', 'match', '1997']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'John', 'Prine', 'song', 'was', 'a', '#', '1', 'hit', 'for', 'George', 'Strait', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'song', 'was', 'a', '#', '1', 'hit', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine', 'George Strait']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'Prine']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'song', 'was', 'a', '#', '1', 'hit', 'for', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John Prine', 'George Strait', 'John Prine']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'song', 'was', 'a', '#', '1', 'hit', 'for', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'song', 'was', 'a', '1', 'hit', 'for']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1': 1, 'hit': 1, 'song': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John Prine': 2, 'George Strait': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1': 1, 'John Prine': 2, 'George Strait': 1, 'hit': 1, 'song': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2098cc10>]
DEBUG  Here is the answer template: question_id: 170.2; query_terms: set(['1', 'hit', 'song']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'country', 'is', 'the', 'WTO', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'country', 'is', 'the', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WTO']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'country', 'is', 'the', 'headquartered', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WTO']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'headquartered', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'headquartered', 'World', 'Tourism', 'Organization', 'WTO']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'headquartered': 1, 'World': 1, 'Organization': 1, 'Tourism': 1, 'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'country': 1, 'headquartered': 1, 'World': 1, 'Organization': 1, 'Tourism': 1, 'WTO': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 173.1; query_terms: set(['country', 'headquartered', 'World', 'Organization', 'Tourism', 'WTO']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Elian', "'s", 'father', 'at', 'the', 'time', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', "'s", 'father', 'at', 'the', 'time', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['repatriation', 'of', 'Elian', 'Gonzales']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['repatriation', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian Gonzales']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', "'s", 'father', 'at', 'the', 'time', '?', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Elian', 'Elian Gonzales']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', "'s", 'father', 'at', 'the', 'time', '?', 'repatriation', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 's', 'father', 'at', 'the', 'time', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'repatriation': 1, 's': 1, 'father': 1, 'time': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Elian': 1, 'Elian Gonzales': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'repatriation': 1, 'Elian Gonzales': 1, 'father': 1, 'Elian': 1, 's': 1, 'time': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 175.3; query_terms: set(['repatriation', 's', 'father', 'time']); type_weights: defaultdict(<function <lambda> at 0x26009488>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'interviews', 'has', 'she', 'granted', 'the', 'Press', 'in', 'her', '100', 'years', 'on', 'earth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'interviews', 'has', 'she', 'granted', 'the', 'Press', 'in', 'her', '100', 'years', 'on', 'earth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Queen', 'Mum', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'interviews', 'has', 'she', 'granted', 'the', 'Press', 'in', 'her', '100', 'years', 'on', 'earth', '?', 'the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Queen Mum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'interviews', 'has', 'she', 'granted', 'the', 'Press', 'in', 'her', '100', 'years', 'on', 'earth', '?', 'the', "'s", '100th', 'Birthday']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'interviews', 'has', 'she', 'granted', 'the', 'Press', 'in', 'her', '100', 'years', 'on', 'earth', 'the', 's', '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'interviews': 1, 'years': 1, '100th': 1, 's': 1, 'Birthday': 1, 'Press': 1, 'earth': 1, '100': 1, 'granted': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Queen Mum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Queen Mum': 1, 'interviews': 1, 'years': 1, '100th': 1, 's': 1, 'Birthday': 1, 'Press': 1, 'earth': 1, '100': 1, 'granted': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 165.5; query_terms: set(['interviews', 'years', '100th', 's', 'Birthday', 'Press', 'earth', '100', 'granted']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Approximately', 'how', 'many', 'paintings', 'has', 'Prince', 'Charles', 'completed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Approximately', 'how', 'many', 'paintings', 'has', 'Prince', 'Charles', 'completed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Prince', 'Charles', "'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Charles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Approximately', 'how', 'many', 'paintings', 'has', 'Prince', 'Charles', 'completed', '?', "'", 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince Charles']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Approximately', 'how', 'many', 'paintings', 'has', 'Prince', 'Charles', 'completed', '?', "'", 'paintings']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Approximately', 'how', 'many', 'paintings', 'has', 'Prince', 'Charles', 'completed', 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'completed': 1, 'Charles': 1, 'paintings': 2, 'Approximately': 1, 'Prince': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Prince Charles': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'paintings': 2, 'completed': 1, 'Charles': 1, 'Approximately': 1, 'Prince': 1, 'Prince Charles': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 168.1; query_terms: set(['completed', 'Charles', 'Approximately', 'paintings', 'Prince']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'size', 'of', 'the', 'Hermitage', 'Museum', 'collection', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'size', 'of', 'the', 'collection', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hermitage', 'Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'size', 'of', 'the', 'collection', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hermitage Museum', 'Hermitage Museum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'size', 'of', 'the', 'collection', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'size', 'of', 'the', 'collection']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'collection': 1, 'size': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hermitage Museum': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hermitage Museum': 2, 'collection': 1, 'size': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc910>]
DEBUG  Here is the answer template: question_id: 163.4; query_terms: set(['collection', 'size']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', '``', 'moves', 'per', 'second', "''", 'could', 'Deep', 'Blue', 'scan', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', '``', 'moves', 'per', 'second', "''", 'could', 'Deep', 'scan', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Deep', 'Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', '``', 'moves', 'per', 'second', "''", 'could', 'Deep', 'scan', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Blue', 'Deep Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', '``', 'moves', 'per', 'second', "''", 'could', 'Deep', 'scan', 'in', '1997', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'moves', 'per', 'second', 'could', 'Deep', 'scan', 'in', '1997']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'second': 1, 'moves': 1, '1997': 1, 'Deep': 1, 'scan': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Blue': 1, 'Deep Blue': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Blue': 1, '1997': 1, 'scan': 1, 'Deep Blue': 1, 'Deep': 1, 'second': 1, 'moves': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f125110>]
DEBUG  Here is the answer template: question_id: 177.6; query_terms: set(['second', 'moves', 'Deep', '1997', 'scan']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'the', 'ballpark', 'where', 'the', 'game', 'was', 'played', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', 'the', 'ballpark', 'where', 'the', 'game', 'was', 'played', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', 'the', 'ballpark', 'where', 'the', 'game', 'was', 'played', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'ballpark', 'where', 'the', 'game', 'was', 'played', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'ballpark', 'where', 'the', 'game', 'was', 'played', '1999', 'Baseball', 'AllStar', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'name': 1, 'played': 1, '1999': 1, 'ballpark': 1, 'Game': 1, 'AllStar': 1, 'game': 1, 'Baseball': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'name': 1, 'played': 1, '1999': 1, 'ballpark': 1, 'AllStar': 1, 'Game': 1, 'game': 1, 'Baseball': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ae10>]
DEBUG  Here is the answer template: question_id: 161.4; query_terms: set(['name', 'played', '1999', 'ballpark', 'AllStar', 'Game', 'game', 'Baseball']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'location': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'did', 'John', 'Prine', 'have', 'a', 'cancerous', 'tumor', 'removed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'did', 'have', 'a', 'cancerous', 'tumor', 'removed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'Prine']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'did', 'have', 'a', 'cancerous', 'tumor', 'removed', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John Prine', 'John Prine']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'did', 'have', 'a', 'cancerous', 'tumor', 'removed', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'did', 'have', 'a', 'cancerous', 'tumor', 'removed']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'tumor': 1, 'cancerous': 1, 'removed': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John Prine': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'tumor': 1, 'John Prine': 2, 'cancerous': 1, 'removed': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2098cc50>]
DEBUG  Here is the answer template: question_id: 170.3; query_terms: set(['tumor', 'cancerous', 'removed']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'country', 'was', 'the', 'most', 'popular', 'tourist', 'destination', 'in', '1995', 'according', 'to', 'WTO', 'reports', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'country', 'was', 'the', 'most', 'popular', 'tourist', 'destination', 'in', '1995', 'according', 'to', 'reports', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WTO']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'country', 'was', 'the', 'most', 'popular', 'tourist', 'destination', 'in', '1995', 'according', 'to', 'reports', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WTO']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'country', 'was', 'the', 'most', 'popular', 'tourist', 'destination', 'in', '1995', 'according', 'to', 'reports', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'country', 'was', 'the', 'most', 'popular', 'tourist', 'destination', 'in', '1995', 'according', 'to', 'reports', 'World', 'Tourism', 'Organization', 'WTO']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1995': 1, 'tourist': 1, 'country': 1, 'destination': 1, 'reports': 1, 'Organization': 1, 'popular': 1, 'World': 1, 'Tourism': 1, 'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1995': 1, 'tourist': 1, 'country': 1, 'destination': 1, 'reports': 1, 'World': 1, 'popular': 1, 'Organization': 1, 'Tourism': 1, 'WTO': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6aa90>]
DEBUG  Here is the answer template: question_id: 173.2; query_terms: set(['1995', 'tourist', 'country', 'destination', 'reports', 'World', 'popular', 'Organization', 'Tourism', 'WTO']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'U.S.', 'Attorney', 'General', 'at', 'the', 'time', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'Attorney', 'General', 'at', 'the', 'time', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['repatriation', 'of', 'Elian', 'Gonzales']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['repatriation', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian Gonzales']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'Attorney', 'General', 'at', 'the', 'time', '?', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.', 'Elian Gonzales']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'Attorney', 'General', 'at', 'the', 'time', '?', 'repatriation', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'Attorney', 'General', 'at', 'the', 'time', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'repatriation': 1, 'Attorney': 1, 'time': 1, 'General': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Elian Gonzales': 1, 'U.S.': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Attorney': 1, 'repatriation': 1, 'U.S.': 1, 'General': 1, 'Elian Gonzales': 1, 'time': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 175.4; query_terms: set(['repatriation', 'Attorney', 'General', 'time']); type_weights: defaultdict(<function <lambda> at 0x2651c320>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'record', 'amount', 'ever', 'paid', 'for', 'one', 'of', 'his', 'paintings', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'record', 'amount', 'ever', 'paid', 'for', 'one', 'of', 'his', 'paintings', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Prince', 'Charles', "'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Charles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'record', 'amount', 'ever', 'paid', 'for', 'one', 'of', 'his', 'paintings', '?', "'", 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince Charles']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'record', 'amount', 'ever', 'paid', 'for', 'one', 'of', 'his', 'paintings', '?', "'", 'paintings']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'record', 'amount', 'ever', 'paid', 'for', 'one', 'of', 'his', 'paintings', 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'record': 1, 'amount': 1, 'paintings': 2, 'paid': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Prince Charles': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'record': 1, 'amount': 1, 'paid': 1, 'paintings': 2, 'Prince Charles': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 168.3; query_terms: set(['record', 'amount', 'paid', 'paintings']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'will', 'there', 'be', 'a', 'satellite', 'museum', 'for', 'the', 'Hermitage', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'will', 'there', 'be', 'a', 'satellite', 'museum', 'for', 'the', 'Hermitage', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hermitage', 'Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'will', 'there', 'be', 'a', 'satellite', 'museum', 'for', 'the', 'Hermitage', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hermitage Museum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'will', 'there', 'be', 'a', 'satellite', 'museum', 'for', 'the', 'Hermitage', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'will', 'there', 'be', 'a', 'satellite', 'museum', 'for', 'the', 'Hermitage']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'satellite': 1, 'museum': 1, 'Hermitage': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hermitage Museum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'satellite': 1, 'Hermitage Museum': 1, 'museum': 1, 'Hermitage': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x272d2790>]
DEBUG  Here is the answer template: question_id: 163.6; query_terms: set(['city', 'satellite', 'museum', 'Hermitage']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['For', 'how', 'many', 'years', 'did', 'John', 'Prine', 'smoke', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['For', 'how', 'many', 'years', 'did', 'smoke', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['John', 'Prine']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['John Prine']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['For', 'how', 'many', 'years', 'did', 'smoke', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['John Prine', 'John Prine']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['For', 'how', 'many', 'years', 'did', 'smoke', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['For', 'how', 'many', 'years', 'did', 'smoke']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'smoke': 1, 'years': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'John Prine': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'John Prine': 2, 'smoke': 1, 'years': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2098cc10>]
DEBUG  Here is the answer template: question_id: 170.4; query_terms: set(['smoke', 'years']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'her', 'husband', "'s", 'title', 'when', 'she', 'married', 'him', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'her', 'husband', "'s", 'title', 'when', 'she', 'married', 'him', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Queen', 'Mum', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'her', 'husband', "'s", 'title', 'when', 'she', 'married', 'him', '?', 'the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Queen Mum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'her', 'husband', "'s", 'title', 'when', 'she', 'married', 'him', '?', 'the', "'s", '100th', 'Birthday']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'her', 'husband', 's', 'title', 'when', 'she', 'married', 'him', 'the', 's', '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'title': 1, 'married': 1, '100th': 1, 's': 2, 'Birthday': 1, 'husband': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Queen Mum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Queen Mum': 1, 'title': 1, 'married': 1, '100th': 1, 's': 2, 'Birthday': 1, 'husband': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 165.6; query_terms: set(['title', 'married', '100th', 's', 'Birthday', 'husband']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'seating', 'capacity', 'of', 'the', 'ballpark', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'seating', 'capacity', 'of', 'the', 'ballpark', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'seating', 'capacity', 'of', 'the', 'ballpark', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'seating', 'capacity', 'of', 'the', 'ballpark', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'seating', 'capacity', 'of', 'the', 'ballpark', '1999', 'Baseball', 'AllStar', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'seating': 1, 'capacity': 1, '1999': 1, 'ballpark': 1, 'Game': 1, 'AllStar': 1, 'Baseball': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'seating': 1, 'capacity': 1, '1999': 1, 'ballpark': 1, 'Game': 1, 'AllStar': 1, 'Baseball': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x26bfc550>]
DEBUG  Here is the answer template: question_id: 161.5; query_terms: set(['seating', 'capacity', '1999', 'ballpark', 'Game', 'AllStar', 'Baseball']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'director', 'of', 'the', 'Hermitage', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'director', 'of', 'the', 'Hermitage', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hermitage', 'Museum']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hermitage Museum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'director', 'of', 'the', 'Hermitage', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hermitage Museum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'director', 'of', 'the', 'Hermitage', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'director', 'of', 'the', 'Hermitage']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'director': 1, 'Hermitage': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hermitage Museum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'director': 1, 'Hermitage Museum': 1, 'Hermitage': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc910>]
DEBUG  Here is the answer template: question_id: 163.7; query_terms: set(['director', 'Hermitage']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'in', 'Arizona', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'in', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Arizona']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'in', 'in', '1998', '?', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Arizona']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'in', 'in', '1998', '?', 'methamphetamine', 'labs']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'in', 'in', '1998', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'labs': 2, 'dismantled': 1, 'methamphetamine': 2, '1998': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Arizona': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'labs': 2, 'dismantled': 1, 'methamphetamine': 2, 'Arizona': 1, '1998': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x29cc9050>]
DEBUG  Here is the answer template: question_id: 178.1; query_terms: set(['labs', 'dismantled', 'methamphetamine', '1998']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'director', 'of', 'the', 'WTO', 'in', '1996', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1996', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WTO']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1996', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WTO']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1996', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1996', 'World', 'Tourism', 'Organization', 'WTO']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1996': 1, 'director': 1, 'Organization': 1, 'World': 1, 'Tourism': 1, 'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1996': 1, 'director': 1, 'World': 1, 'Organization': 1, 'Tourism': 1, 'WTO': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 173.3; query_terms: set(['1996', 'director', 'World', 'Organization', 'Tourism', 'WTO']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'his', 'usual', 'painting', 'medium', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'his', 'usual', 'painting', 'medium', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Prince', 'Charles', "'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Charles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'his', 'usual', 'painting', 'medium', '?', "'", 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince Charles']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'his', 'usual', 'painting', 'medium', '?', "'", 'paintings']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'his', 'usual', 'painting', 'medium', 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'medium': 1, 'painting': 1, 'paintings': 1, 'usual': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Prince Charles': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'medium': 1, 'painting': 1, 'Prince Charles': 1, 'paintings': 1, 'usual': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee28310>]
DEBUG  Here is the answer template: question_id: 168.4; query_terms: set(['medium', 'painting', 'paintings', 'usual']); type_weights: defaultdict(<function <lambda> at 0x26d091b8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'Elian', 'return', 'to', 'Cuba', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'return', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian', 'Cuba']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['repatriation', 'of', 'Elian', 'Gonzales']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['repatriation', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Elian Gonzales']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'return', 'to', '?', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Elian', 'Cuba', 'Elian Gonzales']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'return', 'to', '?', 'repatriation', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'return', 'to', 'repatriation', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'repatriation': 1, 'return': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Elian': 1, 'Elian Gonzales': 1, 'Cuba': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'return': 1, 'Cuba': 1, 'repatriation': 1, 'Elian Gonzales': 1, 'Elian': 1, 'date': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 175.5; query_terms: set(['date', 'repatriation', 'return']); type_weights: defaultdict(<function <lambda> at 0x27b74848>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'Stephen', 'Wynn', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Stephen Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Stephen', 'Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Stephen Wynn']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Stephen Wynn', 'Stephen Wynn']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Stephen Wynn': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Stephen Wynn': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2098cc50>]
DEBUG  Here is the answer template: question_id: 171.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'his', 'title', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'his', 'title', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['the', 'Queen', 'Mum', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Queen Mum']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'his', 'title', 'when', 'he', 'died', '?', 'the', "'s", '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Queen Mum']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'his', 'title', 'when', 'he', 'died', '?', 'the', "'s", '100th', 'Birthday']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'his', 'title', 'when', 'he', 'died', 'the', 's', '100th', 'Birthday']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'100th': 1, 's': 1, 'Birthday': 1, 'died': 1, 'title': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Queen Mum': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Queen Mum': 1, 'title': 1, '100th': 1, 's': 1, 'Birthday': 1, 'died': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 165.7; query_terms: set(['100th', 's', 'Birthday', 'died', 'title']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'nationwide', 'in', 'the', 'U.S.', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'nationwide', 'in', 'the', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'nationwide', 'in', 'the', 'in', '1998', '?', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'nationwide', 'in', 'the', 'in', '1998', '?', 'methamphetamine', 'labs']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'methamphetamine', 'labs', 'were', 'dismantled', 'nationwide', 'in', 'the', 'in', '1998', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'labs': 2, 'dismantled': 1, 'methamphetamine': 2, 'nationwide': 1, '1998': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.S.': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'dismantled': 1, 'methamphetamine': 2, 'nationwide': 1, '1998': 1, 'U.S.': 1, 'labs': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f125150>]
DEBUG  Here is the answer template: question_id: 178.2; query_terms: set(['labs', 'dismantled', 'methamphetamine', 'nationwide', '1998']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'tourists', 'visited', 'China', 'in', '1995', 'according', 'to', 'WTO', 'reports', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'tourists', 'visited', 'in', '1995', 'according', 'to', 'reports', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['China', 'WTO']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'tourists', 'visited', 'in', '1995', 'according', 'to', 'reports', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['China', 'WTO']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'tourists', 'visited', 'in', '1995', 'according', 'to', 'reports', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'tourists', 'visited', 'in', '1995', 'according', 'to', 'reports', 'World', 'Tourism', 'Organization', 'WTO']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1995': 1, 'reports': 1, 'Organization': 1, 'World': 1, 'visited': 1, 'Tourism': 1, 'tourists': 1, 'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'China': 1, 'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1995': 1, 'World': 1, 'reports': 1, 'China': 1, 'visited': 1, 'Organization': 1, 'Tourism': 1, 'tourists': 1, 'WTO': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 173.4; query_terms: set(['1995', 'World', 'reports', 'visited', 'Organization', 'Tourism', 'tourists', 'WTO']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'company', 'acquired', 'Wynn', "'s", 'Mirage', 'Resorts', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'company', 'acquired', "'s", 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wynn', 'Mirage Resorts']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Stephen', 'Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Stephen Wynn']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'company', 'acquired', "'s", 'in', '2000', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Wynn', 'Mirage Resorts', 'Stephen Wynn']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'company', 'acquired', "'s", 'in', '2000', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'company', 'acquired', 's', 'in', '2000']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'acquired': 1, '2000': 1, 'company': 1, 's': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wynn': 1, 'Mirage Resorts': 1, 'Stephen Wynn': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Wynn': 1, 'acquired': 1, 'company': 1, '2000': 1, 'Stephen Wynn': 1, 's': 1, 'Mirage Resorts': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f128090>]
DEBUG  Here is the answer template: question_id: 171.2; query_terms: set(['acquired', 's', '2000', 'company']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'are', 'his', 'usual', 'subjects', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'are', 'his', 'usual', 'subjects', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Prince', 'Charles', "'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Charles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'are', 'his', 'usual', 'subjects', '?', "'", 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince Charles']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'are', 'his', 'usual', 'subjects', '?', "'", 'paintings']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'are', 'his', 'usual', 'subjects', 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'subjects': 1, 'paintings': 1, 'usual': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Prince Charles': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'subjects': 1, 'Prince Charles': 1, 'paintings': 1, 'usual': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 168.5; query_terms: set(['subjects', 'paintings', 'usual']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'date', 'of', 'the', '1999', 'All-Star', 'Game', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'date', 'of', 'the', '1999', 'All-Star', 'Game', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'date', 'of', 'the', '1999', 'All-Star', 'Game', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', '1999', 'All-Star', 'Game', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', '1999', 'AllStar', 'Game', '1999', 'Baseball', 'AllStar', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, '1999': 2, 'AllStar': 2, 'Baseball': 1, 'Game': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, '1999': 2, 'AllStar': 2, 'Baseball': 1, 'Game': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 161.6; query_terms: set(['date', '1999', 'AllStar', 'Baseball', 'Game']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'directed', 'the', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'directed', 'the', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'directed', 'the', 'movie', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'directed', 'the', 'movie', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'directed', 'the', 'movie', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'directed': 1, 'movie': 1, 'Gentleman': 1, 'Officer': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'directed': 1, 'movie': 1, 'Gentleman': 1, 'Officer': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 176.2; query_terms: set(['directed', 'movie', 'Gentleman', 'Officer']); type_weights: defaultdict(<function <lambda> at 0x264f4758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'humans', 'were', 'infected', 'with', 'avian', 'flu', 'in', 'Hong', 'Kong', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'humans', 'were', 'infected', 'with', 'avian', 'flu', 'in', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avian', 'flu', 'outbreak', 'in', 'Hong', 'Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'humans', 'were', 'infected', 'with', 'avian', 'flu', 'in', 'in', '1997', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hong Kong', 'Hong Kong']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'humans', 'were', 'infected', 'with', 'avian', 'flu', 'in', 'in', '1997', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'humans', 'were', 'infected', 'with', 'avian', 'flu', 'in', 'in', '1997', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'avian': 2, '1997': 1, 'humans': 1, 'flu': 2, 'infected': 1, 'outbreak': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hong Kong': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'avian': 2, '1997': 1, 'humans': 1, 'flu': 2, 'infected': 1, 'outbreak': 1, 'Hong Kong': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 166.1; query_terms: set(['avian', '1997', 'humans', 'flu', 'infected', 'outbreak']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'much', 'money', 'did', 'the', 'Clinton', 'Administration', 'budget', 'in', '2000', 'for', 'shutting', 'down', 'methamphetamine', 'labs', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'much', 'money', 'did', 'the', 'budget', 'in', '2000', 'for', 'shutting', 'down', 'methamphetamine', 'labs', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Clinton Administration']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'much', 'money', 'did', 'the', 'budget', 'in', '2000', 'for', 'shutting', 'down', 'methamphetamine', 'labs', '?', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Clinton Administration']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'much', 'money', 'did', 'the', 'budget', 'in', '2000', 'for', 'shutting', 'down', 'methamphetamine', 'labs', '?', 'methamphetamine', 'labs']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'much', 'money', 'did', 'the', 'budget', 'in', '2000', 'for', 'shutting', 'down', 'methamphetamine', 'labs', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'methamphetamine': 2, 'money': 1, 'shutting': 1, 'budget': 1, 'labs': 2, '2000': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Clinton Administration': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'methamphetamine': 2, 'money': 1, 'Clinton Administration': 1, 'shutting': 1, 'budget': 1, 'labs': 2, '2000': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 178.3; query_terms: set(['methamphetamine', 'money', 'shutting', 'budget', 'labs', '2000']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'other', 'prince', 'showed', 'his', 'paintings', 'in', 'a', 'two-prince', 'exhibition', 'with', 'Prince', 'Charles', 'in', 'London', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'other', 'prince', 'showed', 'his', 'paintings', 'in', 'a', 'two-prince', 'exhibition', 'with', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Charles', 'London']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Prince', 'Charles', "'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ["'", 'paintings']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Prince Charles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'other', 'prince', 'showed', 'his', 'paintings', 'in', 'a', 'two-prince', 'exhibition', 'with', 'in', '?', "'", 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Prince Charles', 'London', 'Prince Charles']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'other', 'prince', 'showed', 'his', 'paintings', 'in', 'a', 'two-prince', 'exhibition', 'with', 'in', '?', "'", 'paintings']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'other', 'prince', 'showed', 'his', 'paintings', 'in', 'a', 'twoprince', 'exhibition', 'with', 'in', 'paintings']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'exhibition': 1, 'twoprince': 1, 'prince': 1, 'showed': 1, 'paintings': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'London': 1, 'Prince Charles': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'showed': 1, 'paintings': 2, 'Prince Charles': 2, 'London': 1, 'exhibition': 1, 'twoprince': 1, 'prince': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x29ece150>]
DEBUG  Here is the answer template: question_id: 168.6; query_terms: set(['paintings', 'twoprince', 'exhibition', 'showed', 'prince']); type_weights: defaultdict(<function <lambda> at 0x27235e60>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'did', 'the', 'movie', 'win', 'academy', 'awards', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'did', 'the', 'movie', 'win', 'academy', 'awards', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'did', 'the', 'movie', 'win', 'academy', 'awards', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'did', 'the', 'movie', 'win', 'academy', 'awards', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'did', 'the', 'movie', 'win', 'academy', 'awards', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movie': 1, 'Gentleman': 1, 'awards': 1, 'Officer': 1, 'academy': 1, 'win': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'movie': 1, 'Gentleman': 1, 'academy': 1, 'awards': 1, 'Officer': 1, 'win': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 176.3; query_terms: set(['movie', 'Gentleman', 'academy', 'awards', 'Officer', 'win']); type_weights: defaultdict(<function <lambda> at 0x1ec6c8c0>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'the', 'new', 'Wynn', 'casino', 'opened', 'in', 'Las', 'Vegas', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'continent', 'had', 'the', 'highest', 'tourism', 'growth', 'rate', 'in', '1997', 'according', 'to', 'WTO', 'reports', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', 'the', 'new', 'Wynn', 'casino', 'opened', 'in', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Las Vegas']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Stephen', 'Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Stephen Wynn']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', 'the', 'new', 'Wynn', 'casino', 'opened', 'in', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Las Vegas', 'Stephen Wynn']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'new', 'Wynn', 'casino', 'opened', 'in', 'in', '1998', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'new', 'Wynn', 'casino', 'opened', 'in', 'in', '1998']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Wynn': 1, 'name': 1, '1998': 1, 'casino': 1, 'new': 1, 'opened': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Las Vegas': 1, 'Stephen Wynn': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Wynn': 1, 'opened': 1, '1998': 1, 'casino': 1, 'Stephen Wynn': 1, 'Las Vegas': 1, 'new': 1, 'name': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f1280d0>]
DEBUG  Here is the answer template: question_id: 171.3; query_terms: set(['Wynn', 'opened', '1998', 'casino', 'new', 'name']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'continent', 'had', 'the', 'highest', 'tourism', 'growth', 'rate', 'in', '1997', 'according', 'to', 'reports', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WTO']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'continent', 'had', 'the', 'highest', 'tourism', 'growth', 'rate', 'in', '1997', 'according', 'to', 'reports', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WTO']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'continent', 'had', 'the', 'highest', 'tourism', 'growth', 'rate', 'in', '1997', 'according', 'to', 'reports', '?', 'World', 'Tourism', 'Organization', '(', 'WTO', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'continent', 'had', 'the', 'highest', 'tourism', 'growth', 'rate', 'in', '1997', 'according', 'to', 'reports', 'World', 'Tourism', 'Organization', 'WTO']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1997': 1, 'Tourism': 1, 'reports': 1, 'rate': 1, 'growth': 1, 'Organization': 1, 'World': 1, 'highest': 1, 'tourism': 1, 'continent': 1, 'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WTO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1997': 1, 'tourism': 1, 'reports': 1, 'rate': 1, 'growth': 1, 'World': 1, 'Organization': 1, 'highest': 1, 'Tourism': 1, 'continent': 1, 'WTO': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 173.5; query_terms: set(['1997', 'tourism', 'reports', 'rate', 'growth', 'World', 'Organization', 'highest', 'Tourism', 'continent', 'WTO']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'Most', 'Valuable', 'Player', '(', 'MVP', ')', 'of', 'the', 'game', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', '(', 'MVP', ')', 'of', 'the', 'game', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Most Valuable Player']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', '(', 'MVP', ')', 'of', 'the', 'game', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Most Valuable Player']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', '(', 'MVP', ')', 'of', 'the', 'game', '?', '1999', 'Baseball', 'All-Star', 'Game']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'MVP', 'of', 'the', 'game', '1999', 'Baseball', 'AllStar', 'Game']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'MVP': 1, 'Game': 1, '1999': 1, 'AllStar': 1, 'game': 1, 'Baseball': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Most Valuable Player': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'MVP': 1, '1999': 1, 'Most Valuable Player': 1, 'game': 1, 'Game': 1, 'Baseball': 1, 'AllStar': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 161.7; query_terms: set(['MVP', '1999', 'game', 'Game', 'Baseball', 'AllStar']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'humans', 'died', 'of', 'avian', 'flu', 'in', 'Hong', 'Kong', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'humans', 'died', 'of', 'avian', 'flu', 'in', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avian', 'flu', 'outbreak', 'in', 'Hong', 'Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'humans', 'died', 'of', 'avian', 'flu', 'in', 'in', '1997', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hong Kong', 'Hong Kong']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'humans', 'died', 'of', 'avian', 'flu', 'in', 'in', '1997', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'humans', 'died', 'of', 'avian', 'flu', 'in', 'in', '1997', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'avian': 2, '1997': 1, 'humans': 1, 'flu': 2, 'outbreak': 1, 'died': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hong Kong': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'avian': 2, '1997': 1, 'humans': 1, 'flu': 2, 'outbreak': 1, 'Hong Kong': 2, 'died': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 166.2; query_terms: set(['avian', '1997', 'humans', 'flu', 'outbreak', 'died']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Judi', 'Dench', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Judi', 'Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Judi Dench', 'Judi Dench']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Judi Dench': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Judi Dench': 2, 'born': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6a910>]
DEBUG  Here is the answer template: question_id: 164.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'Texas', 'town', 'did', 'the', 'FBI', 'and', 'ATF', 'destroy', 'a', 'compound', 'killing', 'dozens', ',', 'but', 'found', 'no', 'methamphetamine', 'lab', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'town', 'did', 'the', 'and', 'destroy', 'a', 'compound', 'killing', 'dozens', ',', 'but', 'found', 'no', 'methamphetamine', 'lab', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Texas', 'FBI', 'ATF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'town', 'did', 'the', 'and', 'destroy', 'a', 'compound', 'killing', 'dozens', ',', 'but', 'found', 'no', 'methamphetamine', 'lab', '?', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Texas', 'FBI', 'ATF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'town', 'did', 'the', 'and', 'destroy', 'a', 'compound', 'killing', 'dozens', ',', 'but', 'found', 'no', 'methamphetamine', 'lab', '?', 'methamphetamine', 'labs']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'town', 'did', 'the', 'and', 'destroy', 'a', 'compound', 'killing', 'dozens', 'but', 'found', 'no', 'methamphetamine', 'lab', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'town': 1, 'methamphetamine': 2, 'compound': 1, 'lab': 1, 'killing': 1, 'labs': 1, 'found': 1, 'destroy': 1, 'dozens': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'ATF': 1, 'FBI': 1, 'Texas': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'town': 1, 'ATF': 1, 'methamphetamine': 2, 'lab': 1, 'killing': 1, 'labs': 1, 'destroy': 1, 'compound': 1, 'found': 1, 'FBI': 1, 'dozens': 1, 'Texas': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 178.4; query_terms: set(['town', 'methamphetamine', 'lab', 'killing', 'labs', 'destroy', 'compound', 'found', 'dozens']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'the', 'construction', 'of', 'stone', 'circles', 'begin', 'in', 'the', 'UK', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'the', 'construction', 'of', 'stone', 'circles', 'begin', 'in', 'the', 'UK', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'the', 'construction', 'of', 'stone', 'circles', 'begin', 'in', 'the', 'UK', '?', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'the', 'construction', 'of', 'stone', 'circles', 'begin', 'in', 'the', 'UK', '?', 'stone', 'circles']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'the', 'construction', 'of', 'stone', 'circles', 'begin', 'in', 'the', 'UK', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'circles': 2, 'stone': 2, 'construction': 1, 'begin': 1, 'UK': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'circles': 2, 'stone': 2, 'construction': 1, 'begin': 1, 'UK': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ebdf610>]
DEBUG  Here is the answer template: question_id: 169.1; query_terms: set(['circles', 'stone', 'construction', 'begin', 'UK']); type_weights: defaultdict(<function <lambda> at 0x261f07d0>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Judi', 'Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Judi Dench']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'she', 'married', 'to', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'she', 'married', 'to']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'married': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Judi Dench': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Judi Dench': 1, 'married': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x26017e10>]
DEBUG  Here is the answer template: question_id: 164.3; query_terms: set(['married']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'may', 'chickens', 'were', 'slaughtered', 'to', 'stop', 'further', 'spread', 'of', 'the', 'disease', 'to', 'humans', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'may', 'chickens', 'were', 'slaughtered', 'to', 'stop', 'further', 'spread', 'of', 'the', 'disease', 'to', 'humans', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avian', 'flu', 'outbreak', 'in', 'Hong', 'Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'song', 'from', 'the', 'movie', 'won', 'an', 'academy', 'award', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'may', 'chickens', 'were', 'slaughtered', 'to', 'stop', 'further', 'spread', 'of', 'the', 'disease', 'to', 'humans', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hong Kong']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'may', 'chickens', 'were', 'slaughtered', 'to', 'stop', 'further', 'spread', 'of', 'the', 'disease', 'to', 'humans', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'may', 'chickens', 'were', 'slaughtered', 'to', 'stop', 'further', 'spread', 'of', 'the', 'disease', 'to', 'humans', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'avian': 1, 'humans': 1, 'stop': 1, 'disease': 1, 'spread': 1, 'outbreak': 1, 'flu': 1, 'chickens': 1, 'slaughtered': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hong Kong': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'avian': 1, 'humans': 1, 'stop': 1, 'disease': 1, 'flu': 1, 'spread': 1, 'outbreak': 1, 'Hong Kong': 1, 'chickens': 1, 'slaughtered': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 166.3; query_terms: set(['avian', 'humans', 'stop', 'disease', 'flu', 'spread', 'outbreak', 'chickens', 'slaughtered']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'song', 'from', 'the', 'movie', 'won', 'an', 'academy', 'award', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'song', 'from', 'the', 'movie', 'won', 'an', 'academy', 'award', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'song', 'from', 'the', 'movie', 'won', 'an', 'academy', 'award', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'song', 'from', 'the', 'movie', 'won', 'an', 'academy', 'award', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'song': 1, 'movie': 1, 'Gentleman': 1, 'award': 1, 'won': 1, 'Officer': 1, 'academy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'song': 1, 'movie': 1, 'Gentleman': 1, 'award': 1, 'won': 1, 'Officer': 1, 'academy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 176.4; query_terms: set(['song', 'movie', 'Gentleman', 'award', 'won', 'Officer', 'academy']); type_weights: defaultdict(<function <lambda> at 0x27abbb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'AFBF', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['AFBF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Farm', 'Bureau', 'Federation', '(', 'AFBF', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Farm Bureau Federation', 'AFBF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'founded', '?', '(', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['AFBF', 'American Farm Bureau Federation', 'AFBF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'founded', '?', '(', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'founded']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'founded': 1, 'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 174.1; query_terms: set(['founded']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Approximately', 'how', 'many', 'stone', 'circles', 'have', 'been', 'found', 'in', 'the', 'UK', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Approximately', 'how', 'many', 'stone', 'circles', 'have', 'been', 'found', 'in', 'the', 'UK', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Approximately', 'how', 'many', 'stone', 'circles', 'have', 'been', 'found', 'in', 'the', 'UK', '?', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Approximately', 'how', 'many', 'stone', 'circles', 'have', 'been', 'found', 'in', 'the', 'UK', '?', 'stone', 'circles']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Approximately', 'how', 'many', 'stone', 'circles', 'have', 'been', 'found', 'in', 'the', 'UK', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'circles': 2, 'found': 1, 'stone': 2, 'UK': 1, 'Approximately': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'circles': 2, 'found': 1, 'stone': 2, 'Approximately': 1, 'UK': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de90>]
DEBUG  Here is the answer template: question_id: 169.2; query_terms: set(['circles', 'found', 'stone', 'Approximately', 'UK']); type_weights: defaultdict(<function <lambda> at 0x1ecf4aa0>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Myeloma', 'is', 'cancer', 'in', 'what', 'part', 'of', 'the', 'body', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'chemical', 'company', "'s", 'labels', 'were', 'found', 'on', 'bottles', 'in', 'a', 'methamphetamine', 'lab', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['is', 'cancer', 'in', 'what', 'part', 'of', 'the', 'body', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Myeloma']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Multiple', 'Myeloma']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Multiple Myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['is', 'cancer', 'in', 'what', 'part', 'of', 'the', 'body', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Myeloma', 'Multiple Myeloma']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['is', 'cancer', 'in', 'what', 'part', 'of', 'the', 'body', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['is', 'cancer', 'in', 'what', 'part', 'of', 'the', 'body']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'body': 1, 'part': 1, 'cancer': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Myeloma': 1, 'Multiple Myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'body': 1, 'part': 1, 'Multiple Myeloma': 1, 'Myeloma': 1, 'cancer': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 162.1; query_terms: set(['body', 'part', 'cancer']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'chemical', 'company', "'s", 'labels', 'were', 'found', 'on', 'bottles', 'in', 'a', 'methamphetamine', 'lab', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'chemical', 'company', "'s", 'labels', 'were', 'found', 'on', 'bottles', 'in', 'a', 'methamphetamine', 'lab', '?', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'chemical', 'company', "'s", 'labels', 'were', 'found', 'on', 'bottles', 'in', 'a', 'methamphetamine', 'lab', '?', 'methamphetamine', 'labs']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'chemical', 'company', 's', 'labels', 'were', 'found', 'on', 'bottles', 'in', 'a', 'methamphetamine', 'lab', 'methamphetamine', 'labs']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'labs': 1, 'methamphetamine': 2, 'bottles': 1, 'company': 1, 'labels': 1, 'lab': 1, 'chemical': 1, 's': 1, 'found': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'chemical': 1, 'methamphetamine': 2, 'bottles': 1, 'company': 1, 'labels': 1, 'lab': 1, 'labs': 1, 's': 1, 'found': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 178.5; query_terms: set(['chemical', 'methamphetamine', 'bottles', 'company', 'labels', 'lab', 'labs', 's', 'found']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'talent', 'manager', 'hired', 'by', 'Wynn', 'to', 'start', 'new', 'theaters', ',', 'arenas', 'and', 'cabarets', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'talent', 'manager', 'hired', 'by', 'to', 'start', 'new', 'theaters', ',', 'arenas', 'and', 'cabarets', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Stephen', 'Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Stephen Wynn']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'talent', 'manager', 'hired', 'by', 'to', 'start', 'new', 'theaters', ',', 'arenas', 'and', 'cabarets', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Wynn', 'Stephen Wynn']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'talent', 'manager', 'hired', 'by', 'to', 'start', 'new', 'theaters', ',', 'arenas', 'and', 'cabarets', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'talent', 'manager', 'hired', 'by', 'to', 'start', 'new', 'theaters', 'arenas', 'and', 'cabarets']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'talent': 1, 'theaters': 1, 'cabarets': 1, 'start': 1, 'manager': 1, 'hired': 1, 'new': 1, 'arenas': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Wynn': 1, 'Stephen Wynn': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'talent': 1, 'Stephen Wynn': 1, 'manager': 1, 'cabarets': 1, 'start': 1, 'theaters': 1, 'hired': 1, 'Wynn': 1, 'new': 1, 'arenas': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f128090>]
DEBUG  Here is the answer template: question_id: 171.4; query_terms: set(['talent', 'manager', 'cabarets', 'start', 'theaters', 'hired', 'new', 'arenas']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'strain', 'of', 'avian', 'flu', 'broke', 'out', 'in', 'Hong', 'Kong', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'strain', 'of', 'avian', 'flu', 'broke', 'out', 'in', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avian', 'flu', 'outbreak', 'in', 'Hong', 'Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'strain', 'of', 'avian', 'flu', 'broke', 'out', 'in', 'in', '1997', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hong Kong', 'Hong Kong']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'strain', 'of', 'avian', 'flu', 'broke', 'out', 'in', 'in', '1997', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'strain', 'of', 'avian', 'flu', 'broke', 'out', 'in', 'in', '1997', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'avian': 2, '1997': 1, 'flu': 2, 'strain': 1, 'broke': 1, 'outbreak': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hong Kong': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'avian': 2, '1997': 1, 'flu': 2, 'strain': 1, 'broke': 1, 'outbreak': 1, 'Hong Kong': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 166.4; query_terms: set(['avian', '1997', 'flu', 'strain', 'broke', 'outbreak']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Oscars', 'has', 'she', 'been', 'nominated', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Oscars', 'has', 'she', 'been', 'nominated', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Judi', 'Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Oscars', 'has', 'she', 'been', 'nominated', 'for', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Judi Dench']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Oscars', 'has', 'she', 'been', 'nominated', 'for', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'Oscars', 'has', 'she', 'been', 'nominated', 'for']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Oscars': 1, 'nominated': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Judi Dench': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Judi Dench': 1, 'Oscars': 1, 'nominated': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2382ed10>]
DEBUG  Here is the answer template: question_id: 164.4; query_terms: set(['Oscars', 'nominated']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'president', 'of', 'the', 'AFBF', 'in', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'sings', 'the', 'song', 'during', 'the', 'final', 'credits', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'president', 'of', 'the', 'in', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['AFBF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Farm', 'Bureau', 'Federation', '(', 'AFBF', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Farm Bureau Federation', 'AFBF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'president', 'of', 'the', 'in', '1999', '?', '(', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['AFBF', 'American Farm Bureau Federation', 'AFBF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'president', 'of', 'the', 'in', '1999', '?', '(', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'president', 'of', 'the', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 1, 'president': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1999': 1, 'president': 1, 'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 174.2; query_terms: set(['1999', 'president']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'sings', 'the', 'song', 'during', 'the', 'final', 'credits', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'sings', 'the', 'song', 'during', 'the', 'final', 'credits', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'sings', 'the', 'song', 'during', 'the', 'final', 'credits', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'sings', 'the', 'song', 'during', 'the', 'final', 'credits', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'sings': 1, 'song': 1, 'Gentleman': 1, 'credits': 1, 'Officer': 1, 'final': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'sings': 1, 'song': 1, 'Gentleman': 1, 'credits': 1, 'Officer': 1, 'final': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ed53d50>]
DEBUG  Here is the answer template: question_id: 176.5; query_terms: set(['sings', 'song', 'Gentleman', 'credits', 'Officer', 'final']); type_weights: defaultdict(<function <lambda> at 0x262b91b8>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'Stonehenge', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'Stonehenge', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['stone', 'circles']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'Stonehenge', 'built', '?', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'Stonehenge', 'built', '?', 'stone', 'circles']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'Stonehenge', 'built', 'stone', 'circles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'circles': 1, 'stone': 1, 'Stonehenge': 1, 'built': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'circles': 1, 'stone': 1, 'Stonehenge': 1, 'built': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 169.3; query_terms: set(['circles', 'stone', 'Stonehenge', 'built']); type_weights: defaultdict(<function <lambda> at 0x1ec6c5f0>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'drug', 'is', 'used', 'to', 'treat', 'myeloma', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'drug', 'is', 'used', 'to', 'treat', 'myeloma', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Multiple', 'Myeloma']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Multiple Myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'drug', 'is', 'used', 'to', 'treat', 'myeloma', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Multiple Myeloma']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'drug', 'is', 'used', 'to', 'treat', 'myeloma', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'drug', 'is', 'used', 'to', 'treat', 'myeloma']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'treat': 1, 'drug': 1, 'myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Multiple Myeloma': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Multiple Myeloma': 1, 'treat': 1, 'drug': 1, 'myeloma': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 162.2; query_terms: set(['treat', 'drug', 'myeloma']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'Oscars', 'has', 'she', 'won', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'Oscars', 'has', 'she', 'won', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Judi', 'Dench']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Judi Dench']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'Oscars', 'has', 'she', 'won', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Judi Dench']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'Oscars', 'has', 'she', 'won', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'Oscars', 'has', 'she', 'won']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Oscars': 1, 'won': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Judi Dench': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Judi Dench': 1, 'Oscars': 1, 'won': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x260efb90>]
DEBUG  Here is the answer template: question_id: 164.5; query_terms: set(['Oscars', 'won']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'new', 'strain', 'of', 'avian', 'flu', 'appeared', 'in', 'Hong', 'Kong', 'within', 'the', 'next', 'two', 'years', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'new', 'strain', 'of', 'avian', 'flu', 'appeared', 'in', 'within', 'the', 'next', 'two', 'years', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avian', 'flu', 'outbreak', 'in', 'Hong', 'Kong']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hong Kong']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'new', 'strain', 'of', 'avian', 'flu', 'appeared', 'in', 'within', 'the', 'next', 'two', 'years', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hong Kong', 'Hong Kong']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'new', 'strain', 'of', 'avian', 'flu', 'appeared', 'in', 'within', 'the', 'next', 'two', 'years', '?', 'avian', 'flu', 'outbreak', 'in']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'new', 'strain', 'of', 'avian', 'flu', 'appeared', 'in', 'within', 'the', 'next', 'two', 'years', 'avian', 'flu', 'outbreak', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'avian': 2, 'appeared': 1, 'flu': 2, 'two': 1, 'years': 1, 'strain': 1, 'outbreak': 1, 'new': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hong Kong': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'avian': 2, 'appeared': 1, 'flu': 2, 'two': 1, 'years': 1, 'strain': 1, 'new': 1, 'outbreak': 1, 'Hong Kong': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 166.5; query_terms: set(['avian', 'appeared', 'flu', 'two', 'years', 'strain', 'new', 'outbreak']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'date', 'of', 'Hedy', 'Lamarr', "'s", 'birth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'date', 'of', "'s", 'birth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hedy', 'Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'date', 'of', "'s", 'birth', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hedy Lamarr', 'Hedy Lamarr']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'date', 'of', "'s", 'birth', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'date', 'of', 's', 'birth']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 's': 1, 'birth': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hedy Lamarr': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 's': 1, 'Hedy Lamarr': 2, 'birth': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 179.1; query_terms: set(['date', 's', 'birth']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'Florida', 'bar', 'was', 'featured', 'in', 'the', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'bar', 'was', 'featured', 'in', 'the', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Florida']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'bar', 'was', 'featured', 'in', 'the', 'movie', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Florida']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'bar', 'was', 'featured', 'in', 'the', 'movie', '?', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'bar', 'was', 'featured', 'in', 'the', 'movie', 'An', 'Officer', 'and', 'a', 'Gentleman']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movie': 1, 'featured': 1, 'bar': 1, 'Officer': 1, 'Gentleman': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Florida': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Gentleman': 1, 'bar': 1, 'movie': 1, 'Florida': 1, 'featured': 1, 'Officer': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x266dc2d0>]
DEBUG  Here is the answer template: question_id: 176.6; query_terms: set(['movie', 'featured', 'bar', 'Officer', 'Gentleman']); type_weights: defaultdict(<function <lambda> at 0x1ec6c6e0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'did', 'Hedy', 'Lamarr', 'invent', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'did', 'invent', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hedy', 'Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'did', 'invent', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hedy Lamarr', 'Hedy Lamarr']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'did', 'invent', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'did', 'invent']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'did': 1, 'invent': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hedy Lamarr': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'did': 1, 'Hedy Lamarr': 2, 'invent': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 179.6; query_terms: set(['did', 'invent']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'total', 'number', 'of', 'performances', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'total', 'number', 'of', 'performances', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'total', 'number', 'of', 'performances', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'total', 'number', 'of', 'performances', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'total', 'number', 'of', 'performances', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Edinburgh': 2, 'performances': 1, 'Fringe': 2, 'number': 1, '1998': 2, 'total': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Edinburgh': 2, '1998': 2, 'Fringe': 2, 'number': 1, 'performances': 1, 'total': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 182.2; query_terms: set(['Edinburgh', '1998', 'Fringe', 'number', 'performances', 'total']); type_weights: defaultdict(<function <lambda> at 0x1e7a9f50>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'AFBF', 'represents', 'how', 'many', 'families', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The', 'represents', 'how', 'many', 'families', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['AFBF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Farm', 'Bureau', 'Federation', '(', 'AFBF', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Farm Bureau Federation', 'AFBF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['The', 'represents', 'how', 'many', 'families', '?', '(', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['AFBF', 'American Farm Bureau Federation', 'AFBF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['The', 'represents', 'how', 'many', 'families', '?', '(', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['The', 'represents', 'how', 'many', 'families']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'represents': 1, 'families': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'American Farm Bureau Federation': 1, 'represents': 1, 'families': 1, 'AFBF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 174.3; query_terms: set(['represents', 'families']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'women', "'s", 'winner', 'of', 'the', '1999', 'Chicago', 'Marathon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'women', "'s", 'winner', 'of', 'the', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Chicago', 'Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'women', "'s", 'winner', 'of', 'the', '1999', '?', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chicago Marathon', 'Chicago Marathon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'women', "'s", 'winner', 'of', 'the', '1999', '?', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'women', 's', 'winner', 'of', 'the', '1999', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 2, 's': 1, 'winner': 1, 'women': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Chicago Marathon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1999': 2, 's': 1, 'winner': 1, 'Chicago Marathon': 2, 'women': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 184.4; query_terms: set(['1999', 's', 'winner', 'women']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'Wynn', "'s", 'newest', 'casino', 'in', 'Mississippi', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', "'s", 'newest', 'casino', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Wynn', 'Mississippi']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Stephen', 'Wynn']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Stephen Wynn']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', "'s", 'newest', 'casino', 'in', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Wynn', 'Mississippi', 'Stephen Wynn']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', "'s", 'newest', 'casino', 'in', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 's', 'newest', 'casino', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 1, 'casino': 1, 'newest': 1, 'name': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mississippi': 1, 'Wynn': 1, 'Stephen Wynn': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Mississippi': 1, 'Wynn': 1, 'name': 1, 'casino': 1, 'Stephen Wynn': 1, 's': 1, 'newest': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f1280d0>]
DEBUG  Here is the answer template: question_id: 171.5; query_terms: set(['s', 'casino', 'newest', 'name']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'is', 'the', 'Lebanese', 'Parliament', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Lebanese', 'Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'is', 'the', 'located', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Lebanese Parliament', 'Lebanese Parliament']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'located', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'located']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'located': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Lebanese Parliament': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Lebanese Parliament': 2, 'located': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 180.1; query_terms: set(['city', 'located']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'her', 'name', 'at', 'birth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'her', 'name', 'at', 'birth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hedy', 'Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'her', 'name', 'at', 'birth', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hedy Lamarr']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'her', 'name', 'at', 'birth', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'her', 'name', 'at', 'birth']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'name': 1, 'birth': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hedy Lamarr': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hedy Lamarr': 1, 'name': 1, 'birth': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 179.2; query_terms: set(['name', 'birth']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'game', 'can', '``', 'Deep', 'Blue', "''", 'play', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'game', 'can', '``', 'Deep', "''", 'play', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Deep', 'Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'game', 'can', '``', 'Deep', "''", 'play', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Blue', 'Deep Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'game', 'can', '``', 'Deep', "''", 'play', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'game', 'can', 'Deep', 'play']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'game': 1, 'play': 1, 'Deep': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Blue': 1, 'Deep Blue': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Blue': 1, 'game': 1, 'play': 1, 'Deep': 1, 'Deep Blue': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 177.1; query_terms: set(['game', 'play', 'Deep']); type_weights: defaultdict(<function <lambda> at 0x26334848>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'month', 'is', 'the', 'Edinburgh', 'Fringe', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'month', 'is', 'the', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Edinburgh Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'month', 'is', 'the', 'held', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Edinburgh Fringe']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'month', 'is', 'the', 'held', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'month', 'is', 'the', 'held', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'held': 1, 'Fringe': 1, '1998': 1, 'Edinburgh': 1, 'month': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Edinburgh Fringe': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Edinburgh': 1, '1998': 1, 'Fringe': 1, 'month': 1, 'held': 1, 'Edinburgh Fringe': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 182.4; query_terms: set(['month', 'held', 'Fringe', 'Edinburgh', '1998']); type_weights: defaultdict(<function <lambda> at 0x26137848>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'seats', 'are', 'in', 'the', 'Lebanese', 'Parliament', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'seats', 'are', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Lebanese', 'Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'seats', 'are', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Lebanese Parliament', 'Lebanese Parliament']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'seats', 'are', 'in', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'seats', 'are', 'in', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'seats': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Lebanese Parliament': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Lebanese Parliament': 2, 'seats': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 180.2; query_terms: set(['seats']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'total', 'amount', 'in', 'disaster', 'aid', 'the', 'AFBF', 'asked', 'congress', 'for', 'in', 'July', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'total', 'amount', 'in', 'disaster', 'aid', 'the', 'asked', 'congress', 'for', 'in', 'July', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['AFBF']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['American', 'Farm', 'Bureau', 'Federation', '(', 'AFBF', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['(', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['American Farm Bureau Federation', 'AFBF']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'total', 'amount', 'in', 'disaster', 'aid', 'the', 'asked', 'congress', 'for', 'in', 'July', '1999', '?', '(', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['AFBF', 'American Farm Bureau Federation', 'AFBF']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'total', 'amount', 'in', 'disaster', 'aid', 'the', 'asked', 'congress', 'for', 'in', 'July', '1999', '?', '(', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'total', 'amount', 'in', 'disaster', 'aid', 'the', 'asked', 'congress', 'for', 'in', 'July', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'disaster': 1, 'congress': 1, '1999': 1, 'amount': 1, 'aid': 1, 'July': 1, 'total': 1, 'asked': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'American Farm Bureau Federation': 1, 'AFBF': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'disaster': 1, 'congress': 1, '1999': 1, 'amount': 1, 'American Farm Bureau Federation': 1, 'aid': 1, 'July': 1, 'total': 1, 'asked': 1, 'AFBF': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 174.4; query_terms: set(['disaster', 'congress', '1999', 'amount', 'aid', 'July', 'total', 'asked']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'are', 'the', 'three', 'Great', 'Pyramids', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'are', 'the', 'three', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Pyramids']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pyramids', 'of', 'Egypt']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Pyramids', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Egypt']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'are', 'the', 'three', '?', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great Pyramids', 'Egypt']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'are', 'the', 'three', '?', 'Pyramids', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'are', 'the', 'three', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'old': 1, 'three': 1, 'Pyramids': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Egypt': 1, 'Great Pyramids': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Egypt': 1, 'Great Pyramids': 1, 'old': 1, 'three': 1, 'Pyramids': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209c2a50>]
DEBUG  Here is the answer template: question_id: 186.6; query_terms: set(['old', 'three', 'Pyramids']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'and', 'state', 'did', 'the', 'business', 'begin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'and', 'state', 'did', 'the', 'business', 'begin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Ben', '&', 'Jerry', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['&', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'and', 'state', 'did', 'the', 'business', 'begin', '?', '&', "'s"]
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Ben', 'Jerry']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'and', 'state', 'did', 'the', 'business', 'begin', '?', '&', "'s"]
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'and', 'state', 'did', 'the', 'business', 'begin', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'state': 1, 's': 1, 'begin': 1, 'business': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Ben': 1, 'Jerry': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'begin': 1, 'Ben': 1, 'business': 1, 's': 1, 'Jerry': 1, 'state': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 172.1; query_terms: set(['begin', 'city', 'state', 's', 'business']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'won', 'the', 'match', 'between', 'Gary', 'Kasparov', 'and', 'Deep', 'Blue', 'in', 'February', '1996', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'February', '1996', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Gary Kasparov', 'Deep Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Deep', 'Blue']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Deep Blue']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'February', '1996', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Gary Kasparov', 'Deep Blue', 'Deep Blue']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'February', '1996', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'won', 'the', 'match', 'between', 'and', 'in', 'February', '1996']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'February': 1, 'won': 1, 'match': 1, '1996': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Deep Blue': 2, 'Gary Kasparov': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'February': 1, 'Deep Blue': 2, '1996': 1, 'Gary Kasparov': 1, 'won': 1, 'match': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x25213d50>]
DEBUG  Here is the answer template: question_id: 177.2; query_terms: set(['February', 'won', 'match', '1996']); type_weights: defaultdict(<function <lambda> at 0x26009500>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'was', 'she', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'was', 'she', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hedy', 'Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'was', 'she', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hedy Lamarr']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'was', 'she', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'was', 'she', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hedy Lamarr': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Hedy Lamarr': 1, 'born': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 179.3; query_terms: set(['city', 'born']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'men', "'s", 'winning', 'time', 'in', 'the', '1999', 'Chicago', 'Marathon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'men', "'s", 'winning', 'time', 'in', 'the', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Chicago', 'Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'men', "'s", 'winning', 'time', 'in', 'the', '1999', '?', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chicago Marathon', 'Chicago Marathon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'men', "'s", 'winning', 'time', 'in', 'the', '1999', '?', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'men', 's', 'winning', 'time', 'in', 'the', '1999', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 2, 's': 1, 'men': 1, 'time': 1, 'winning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Chicago Marathon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Chicago Marathon': 2, '1999': 2, 'men': 1, 'winning': 1, 's': 1, 'time': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 184.5; query_terms: set(['1999', 'winning', 's', 'men', 'time']); type_weights: defaultdict(<function <lambda> at 0x286549b0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'Speaker', 'of', 'the', 'Lebanese', 'Parliament', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'Speaker', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Lebanese', 'Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'Speaker', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Lebanese Parliament', 'Lebanese Parliament']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'Speaker', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'Speaker', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Speaker': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Lebanese Parliament': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Lebanese Parliament': 2, 'Speaker': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 180.3; query_terms: set(['Speaker']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'country', 'is', 'the', 'Edinburgh', 'Fringe', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'country', 'is', 'the', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Edinburgh Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'country', 'is', 'the', 'held', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Edinburgh Fringe']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'held', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'held', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'Fringe': 1, '1998': 1, 'Edinburgh': 1, 'held': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Edinburgh Fringe': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Edinburgh': 1, 'country': 1, 'Fringe': 1, 'held': 1, 'Edinburgh Fringe': 1, '1998': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 182.5; query_terms: set(['held', 'country', 'Fringe', 'Edinburgh', '1998']); type_weights: defaultdict(<function <lambda> at 0x272817d0>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['For', 'which', 'novel', 'did', 'she', 'receive', 'the', 'Whitbread', "'s", 'Children', "'s", 'Book', 'of', 'the', 'Year', 'award', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['For', 'which', 'novel', 'did', 'she', 'receive', 'the', "'s", "'s", 'Book', 'of', 'the', 'award', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Whitbread', 'Children', 'Year']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Joanne', 'Kathleen', 'Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Joanne Kathleen']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['For', 'which', 'novel', 'did', 'she', 'receive', 'the', "'s", "'s", 'Book', 'of', 'the', 'award', 'in', '2000', '?', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Whitbread', 'Children', 'Year', 'Joanne Kathleen']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['For', 'which', 'novel', 'did', 'she', 'receive', 'the', "'s", "'s", 'Book', 'of', 'the', 'award', 'in', '2000', '?', 'Rowling']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['For', 'which', 'novel', 'did', 'she', 'receive', 'the', 's', 's', 'Book', 'of', 'the', 'award', 'in', '2000', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'novel': 1, 'Rowling': 1, 'did': 1, '2000': 1, 'award': 1, 'receive': 1, 's': 2, 'Book': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Year': 1, 'Whitbread': 1, 'Joanne Kathleen': 1, 'Children': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'novel': 1, 'Joanne Kathleen': 1, 'Rowling': 1, 'did': 1, 's': 2, 'award': 1, 'Whitbread': 1, 'receive': 1, '2000': 1, 'Book': 1, 'Year': 1, 'Children': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 189.5; query_terms: set(['novel', 'Rowling', 'did', 's', 'award', 'receive', '2000', 'Book']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'country', 'is', 'the', 'origin', 'of', 'the', 'Amazon', 'River', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'country', 'is', 'the', 'origin', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Amazon', 'River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'country', 'is', 'the', 'origin', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Amazon River', 'Amazon River']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'origin', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'origin', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'origin': 1, 'country': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Amazon River': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'origin': 1, 'country': 1, 'Amazon River': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x25e9f610>]
DEBUG  Here is the answer template: question_id: 187.1; query_terms: set(['origin', 'country']); type_weights: defaultdict(<function <lambda> at 0x2461af50>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'Hedy', 'Lamarr', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Hedy', 'Lamarr']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hedy Lamarr']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hedy Lamarr', 'Hedy Lamarr']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hedy Lamarr': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 'die': 1, 'Hedy Lamarr': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 179.4; query_terms: set(['date', 'die']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'Deputy', 'Speaker', 'of', 'the', 'Lebanese', 'Parliament', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'Deputy', 'Speaker', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Lebanese', 'Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'Deputy', 'Speaker', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Lebanese Parliament', 'Lebanese Parliament']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'Deputy', 'Speaker', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'Deputy', 'Speaker', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Speaker': 1, 'Deputy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Lebanese Parliament': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Lebanese Parliament': 2, 'Speaker': 1, 'Deputy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 180.4; query_terms: set(['Speaker', 'Deputy']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'does', 'the', 'acronym', 'ETA', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'does', 'the', 'acronym', 'ETA', 'stand', 'for', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Basque', 'ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Basque']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'does', 'the', 'acronym', 'ETA', 'stand', 'for', '?', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Basque']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'does', 'the', 'acronym', 'ETA', 'stand', 'for', '?', 'ETA']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'does', 'the', 'acronym', 'ETA', 'stand', 'for', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'acronym': 1, 'ETA': 2, 'stand': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Basque': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'acronym': 1, 'ETA': 2, 'stand': 1, 'Basque': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x237bdd50>]
DEBUG  Here is the answer template: question_id: 192.1; query_terms: set(['acronym', 'ETA', 'stand']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'do', 'Ben', 'and', 'Jerry', 'produce', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'do', 'and', 'produce', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Ben', '&', 'Jerry', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['&', "'s"]
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Ben', 'Jerry']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'do', 'and', 'produce', '?', '&', "'s"]
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Ben', 'Jerry', 'Ben', 'Jerry']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'do', 'and', 'produce', '?', '&', "'s"]
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'do', 'and', 'produce', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 1, 'produce': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Ben': 2, 'Jerry': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'s': 1, 'produce': 1, 'Ben': 2, 'Jerry': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 172.2; query_terms: set(['s', 'produce']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Approximately', 'how', 'many', 'people', 'has', 'ETA', 'killed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Approximately', 'how', 'many', 'people', 'has', 'killed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Basque', 'ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Basque']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Approximately', 'how', 'many', 'people', 'has', 'killed', '?', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['ETA', 'Basque']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Approximately', 'how', 'many', 'people', 'has', 'killed', '?', 'ETA']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Approximately', 'how', 'many', 'people', 'has', 'killed', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'ETA': 1, 'killed': 1, 'Approximately': 1, 'people': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'ETA': 1, 'Basque': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'ETA': 2, 'Basque': 1, 'killed': 1, 'Approximately': 1, 'people': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ac50>]
DEBUG  Here is the answer template: question_id: 192.2; query_terms: set(['ETA', 'killed', 'Approximately', 'people']); type_weights: defaultdict(<function <lambda> at 0x1ec6c938>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'the', 'Edinburgh', 'Fringe', 'begun', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'years', 'are', 'in', 'a', 'term', 'of', 'the', 'Lebanese', 'Parliament', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'the', 'begun', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Edinburgh Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'the', 'begun', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Edinburgh Fringe']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'the', 'begun', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'the', 'begun', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1998': 1, 'Fringe': 1, 'begun': 1, 'Edinburgh': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Edinburgh Fringe': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1998': 1, 'Fringe': 1, 'Edinburgh Fringe': 1, 'begun': 1, 'Edinburgh': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 182.6; query_terms: set(['1998', 'Fringe', 'begun', 'Edinburgh']); type_weights: defaultdict(<function <lambda> at 0x26f93de8>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'years', 'are', 'in', 'a', 'term', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Lebanese', 'Parliament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Lebanese Parliament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'years', 'are', 'in', 'a', 'term', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Lebanese Parliament', 'Lebanese Parliament']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'years', 'are', 'in', 'a', 'term', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'years', 'are', 'in', 'a', 'term', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'term': 1, 'years': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Lebanese Parliament': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Lebanese Parliament': 2, 'term': 1, 'years': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378ded0>]
DEBUG  Here is the answer template: question_id: 180.6; query_terms: set(['term', 'years']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'players', 'participated', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'players', 'participated', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'players', 'participated', '?', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'players', 'participated', '?', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'players', 'participated', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1996': 1, 'participated': 1, 'Tournament': 1, 'players': 1, 'Chess': 1, 'World': 1, 'Super': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1996': 1, 'Super': 1, 'Tournament': 1, 'players': 1, 'Chess': 1, 'World': 1, 'participated': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20984c90>]
DEBUG  Here is the answer template: question_id: 194.3; query_terms: set(['1996', 'Super', 'Tournament', 'players', 'Chess', 'World', 'participated']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'this', 'animal', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'this', 'animal', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'this', 'animal', 'born', '?', 'cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'this', 'animal', 'born', '?', 'cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'this', 'animal', 'born', 'cloning', 'of', 'mammals', 'from', 'adult', 'cells']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'mammals': 1, 'cells': 1, 'born': 1, 'adult': 1, 'animal': 1, 'cloning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'mammals': 1, 'cells': 1, 'born': 1, 'cloning': 1, 'animal': 1, 'adult': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 197.2; query_terms: set(['mammals', 'cells', 'born', 'cloning', 'animal', 'adult']); type_weights: defaultdict(<function <lambda> at 0x247db410>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'country', 'is', 'the', 'mouth', 'of', 'the', 'Amazon', 'River', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'country', 'is', 'the', 'mouth', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Amazon', 'River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'country', 'is', 'the', 'mouth', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Amazon River', 'Amazon River']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'mouth', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'country', 'is', 'the', 'mouth', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'mouth': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Amazon River': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'country': 1, 'mouth': 1, 'Amazon River': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23453ed0>]
DEBUG  Here is the answer template: question_id: 187.2; query_terms: set(['country', 'mouth']); type_weights: defaultdict(<function <lambda> at 0x1ee78410>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'ETA', 'announce', 'a', 'cease-fire', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'announce', 'a', 'cease-fire', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Basque', 'ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Basque']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'announce', 'a', 'cease-fire', 'in', '1998', '?', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['ETA', 'Basque']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'announce', 'a', 'cease-fire', 'in', '1998', '?', 'ETA']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'announce', 'a', 'ceasefire', 'in', '1998', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'announce': 1, 'ETA': 1, 'ceasefire': 1, '1998': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'ETA': 1, 'Basque': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1998': 1, 'ETA': 2, 'Basque': 1, 'date': 1, 'announce': 1, 'ceasefire': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 192.4; query_terms: set(['date', 'announce', 'ETA', 'ceasefire', '1998']); type_weights: defaultdict(<function <lambda> at 0x263c4d70>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'women', "'s", 'winning', 'time', 'in', 'the', '1999', 'Chicago', 'Marathon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'women', "'s", 'winning', 'time', 'in', 'the', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Chicago', 'Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'women', "'s", 'winning', 'time', 'in', 'the', '1999', '?', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chicago Marathon', 'Chicago Marathon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'women', "'s", 'winning', 'time', 'in', 'the', '1999', '?', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'women', 's', 'winning', 'time', 'in', 'the', '1999', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 2, 's': 1, 'winning': 1, 'time': 1, 'women': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Chicago Marathon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Chicago Marathon': 2, '1999': 2, 'winning': 1, 's': 1, 'time': 1, 'women': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 184.6; query_terms: set(['1999', 'women', 's', 'time', 'winning']); type_weights: defaultdict(<function <lambda> at 0x28103488>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'was', 'Rowling', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'was', 'Rowling', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Joanne', 'Kathleen', 'Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Joanne Kathleen']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'was', 'Rowling', 'born', '?', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Joanne Kathleen']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'was', 'Rowling', 'born', '?', 'Rowling']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'was', 'Rowling', 'born', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1, 'city': 1, 'Rowling': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Joanne Kathleen': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Rowling': 2, 'Joanne Kathleen': 1, 'city': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 189.6; query_terms: set(['born', 'Rowling', 'city']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'date', 'of', 'the', 'East', 'Timor', 'election', 'on', 'independence', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'date', 'of', 'the', 'election', 'on', 'independence', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['East', 'Timor', 'Independence']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor Independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'date', 'of', 'the', 'election', 'on', 'independence', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['East Timor', 'East Timor Independence']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', 'election', 'on', 'independence', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', 'election', 'on', 'independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'election': 1, 'independence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'East Timor': 1, 'East Timor Independence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 'East Timor': 1, 'election': 1, 'independence': 1, 'East Timor Independence': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 195.1; query_terms: set(['date', 'election', 'independence']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['At', 'what', 'institute', 'was', 'this', 'procedure', 'done', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['At', 'what', 'institute', 'was', 'this', 'procedure', 'done', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['At', 'what', 'institute', 'was', 'this', 'procedure', 'done', '?', 'cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['At', 'what', 'institute', 'was', 'this', 'procedure', 'done', '?', 'cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['At', 'what', 'institute', 'was', 'this', 'procedure', 'done', 'cloning', 'of', 'mammals', 'from', 'adult', 'cells']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'institute': 1, 'mammals': 1, 'cells': 1, 'done': 1, 'cloning': 1, 'procedure': 1, 'adult': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'institute': 1, 'mammals': 1, 'cells': 1, 'done': 1, 'cloning': 1, 'procedure': 1, 'adult': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4d290>]
DEBUG  Here is the answer template: question_id: 197.3; query_terms: set(['institute', 'mammals', 'cells', 'done', 'cloning', 'procedure', 'adult']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'was', 'Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'was', 'elected', 'president', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['elected', 'president', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'was', 'elected', 'president', 'of', '?', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Thabo Mbeki', 'South Africa', 'Thabo Mbeki', 'South Africa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'was', 'elected', 'president', 'of', '?', 'elected', 'president', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'was', 'elected', 'president', 'of', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'elected': 2, 'president': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Thabo Mbeki': 2, 'South Africa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 'elected': 2, 'South Africa': 2, 'Thabo Mbeki': 2, 'president': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 183.1; query_terms: set(['date', 'elected', 'president']); type_weights: defaultdict(<function <lambda> at 0x1ec74230>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'British', 'league', 'does', 'Manchester', 'United', 'play', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'league', 'does', 'Manchester', 'United', 'play', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['British']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Manchester', 'United', 'Football', 'Club']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United Football Club']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'league', 'does', 'Manchester', 'United', 'play', 'in', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['British', 'Manchester United Football Club']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'league', 'does', 'Manchester', 'United', 'play', 'in', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'league', 'does', 'Manchester', 'United', 'play', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'league': 1, 'play': 1, 'United': 1, 'Manchester': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Manchester United Football Club': 1, 'British': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'league': 1, 'play': 1, 'United': 1, 'Manchester United Football Club': 1, 'British': 1, 'Manchester': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de50>]
DEBUG  Here is the answer template: question_id: 181.1; query_terms: set(['league', 'play', 'United', 'Manchester']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'date', 'will', 'this', 'cease-fire', 'begin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'date', 'will', 'this', 'cease-fire', 'begin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Basque', 'ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Basque']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'date', 'will', 'this', 'cease-fire', 'begin', '?', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Basque']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'date', 'will', 'this', 'cease-fire', 'begin', '?', 'ETA']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'date', 'will', 'this', 'ceasefire', 'begin', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'begin': 1, 'ETA': 1, 'ceasefire': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Basque': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 'begin': 1, 'ETA': 1, 'ceasefire': 1, 'Basque': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 192.5; query_terms: set(['date', 'begin', 'ETA', 'ceasefire']); type_weights: defaultdict(<function <lambda> at 0x1e7a9b18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'long', 'is', 'the', 'Amazon', 'River', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'long', 'is', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Amazon', 'River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'long', 'is', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Amazon River', 'Amazon River']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'long', 'is', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'long', 'is', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'long': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Amazon River': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Amazon River': 2, 'long': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6ae90>]
DEBUG  Here is the answer template: question_id: 187.3; query_terms: set(['long']); type_weights: defaultdict(<function <lambda> at 0x1ee53d70>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'country', 'is', 'this', 'facility', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'country', 'is', 'this', 'facility', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Bushehr', 'Nuclear', 'Facility']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Bushehr Nuclear Facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'country', 'is', 'this', 'facility', 'located', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Bushehr Nuclear Facility']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'country', 'is', 'this', 'facility', 'located', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'country', 'is', 'this', 'facility', 'located']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'located': 1, 'facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Bushehr Nuclear Facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'country': 1, 'Bushehr Nuclear Facility': 1, 'facility': 1, 'located': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 198.1; query_terms: set(['country', 'facility', 'located']); type_weights: defaultdict(<function <lambda> at 0x2a4387d0>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'date', 'did', 'ETA', 'announce', 'that', 'this', 'cease-fire', 'would', 'end', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'date', 'did', 'announce', 'that', 'this', 'cease-fire', 'would', 'end', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Basque', 'ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['ETA']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Basque']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'date', 'did', 'announce', 'that', 'this', 'cease-fire', 'would', 'end', '?', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['ETA', 'Basque']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'date', 'did', 'announce', 'that', 'this', 'cease-fire', 'would', 'end', '?', 'ETA']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'date', 'did', 'announce', 'that', 'this', 'ceasefire', 'would', 'end', 'ETA']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'announce': 1, 'ETA': 1, 'end': 1, 'ceasefire': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'ETA': 1, 'Basque': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'end': 1, 'ETA': 2, 'Basque': 1, 'date': 1, 'announce': 1, 'ceasefire': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x260d3910>]
DEBUG  Here is the answer template: question_id: 192.6; query_terms: set(['date', 'announce', 'ETA', 'end', 'ceasefire']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'the', 'stadium', 'in', 'Manchester', 'where', 'Manchester', 'United', 'plays', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Whom', 'did', 'Thabo', 'Mbeki', 'succeed', 'as', 'president', 'of', 'South', 'Africa', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['did', 'succeed', 'as', 'president', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Whom', 'Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['elected', 'president', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['did', 'succeed', 'as', 'president', 'of', '?', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Whom', 'Thabo Mbeki', 'South Africa', 'Thabo Mbeki', 'South Africa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['did', 'succeed', 'as', 'president', 'of', '?', 'elected', 'president', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['did', 'succeed', 'as', 'president', 'of', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 2, 'succeed': 1, 'elected': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Whom': 1, 'Thabo Mbeki': 2, 'South Africa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'South Africa': 2, 'elected': 1, 'Thabo Mbeki': 2, 'Whom': 1, 'succeed': 1, 'president': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 183.2; query_terms: set(['president', 'succeed', 'elected']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', 'the', 'stadium', 'in', 'Manchester', 'where', 'Manchester', 'United', 'plays', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Manchester', 'United', 'Football', 'Club']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United Football Club']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', 'the', 'stadium', 'in', 'Manchester', 'where', 'Manchester', 'United', 'plays', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Manchester United Football Club']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'stadium', 'in', 'Manchester', 'where', 'Manchester', 'United', 'plays', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'stadium', 'in', 'Manchester', 'where', 'Manchester', 'United', 'plays']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'plays': 1, 'United': 1, 'Manchester': 2, 'name': 1, 'stadium': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Manchester United Football Club': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'United': 1, 'plays': 1, 'name': 1, 'Manchester': 2, 'stadium': 1, 'Manchester United Football Club': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378ded0>]
DEBUG  Here is the answer template: question_id: 181.2; query_terms: set(['Manchester', 'United', 'plays', 'name', 'stadium']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'location': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'percentage', 'of', 'the', 'vote', 'was', 'for', 'independence', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'did', 'Rowling', 'live', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'percentage', 'of', 'the', 'vote', 'was', 'for', 'independence', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['East', 'Timor', 'Independence']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'did', 'Rowling', 'live', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Joanne', 'Kathleen', 'Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor Independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'percentage', 'of', 'the', 'vote', 'was', 'for', 'independence', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['East Timor Independence']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'percentage', 'of', 'the', 'vote', 'was', 'for', 'independence', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'percentage', 'of', 'the', 'vote', 'was', 'for', 'independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'vote': 1, 'percentage': 1, 'independence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'East Timor Independence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'vote': 1, 'percentage': 1, 'independence': 1, 'East Timor Independence': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20984cd0>]
DEBUG  Here is the answer template: question_id: 195.2; query_terms: set(['vote', 'percentage', 'independence']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Joanne Kathleen']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'did', 'Rowling', 'live', 'in', '2000', '?', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Joanne Kathleen']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'did', 'Rowling', 'live', 'in', '2000', '?', 'Rowling']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'did', 'Rowling', 'live', 'in', '2000', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'live': 1, '2000': 1, 'Rowling': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Joanne Kathleen': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'live': 1, '2000': 1, 'Joanne Kathleen': 1, 'Rowling': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 189.7; query_terms: set(['city', 'live', '2000', 'Rowling']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'does', 'the', 'Iditarod', 'start', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'does', 'the', 'start', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Iditarod', 'Race']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod Race']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'does', 'the', 'start', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Iditarod', 'Iditarod Race']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'does', 'the', 'start', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'does', 'the', 'start']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'start': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Iditarod': 1, 'city': 1, 'Iditarod Race': 1, 'start': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 185.1; query_terms: set(['city', 'start']); type_weights: defaultdict(<function <lambda> at 0x26a60578>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'mountain', 'range', 'does', 'the', 'Amazon', 'River', 'rise', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'mountain', 'range', 'does', 'the', 'rise', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Amazon', 'River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'mountain', 'range', 'does', 'the', 'rise', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Amazon River', 'Amazon River']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'mountain', 'range', 'does', 'the', 'rise', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'mountain', 'range', 'does', 'the', 'rise']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'mountain': 1, 'range': 1, 'rise': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Amazon River': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'mountain': 1, 'range': 1, 'rise': 1, 'Amazon River': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x23453e90>]
DEBUG  Here is the answer template: question_id: 187.5; query_terms: set(['mountain', 'range', 'rise']); type_weights: defaultdict(<function <lambda> at 0x1e7a9a28>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'is', 'the', 'WFP', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'is', 'the', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WFP']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'is', 'the', 'headquartered', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WFP']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'headquartered', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'headquartered', 'World', 'Food', 'Program', 'WFP']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'Food': 1, 'headquartered': 1, 'Program': 1, 'World': 1, 'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Food': 1, 'headquartered': 1, 'Program': 1, 'World': 1, 'WFP': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 193.1; query_terms: set(['city', 'Food', 'headquartered', 'Program', 'World', 'WFP']); type_weights: defaultdict(<function <lambda> at 0x26fd36e0>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'country', 'is', 'assisting', 'with', 'the', 'development', 'of', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'country', 'is', 'assisting', 'with', 'the', 'development', 'of', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Bushehr', 'Nuclear', 'Facility']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Bushehr Nuclear Facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'country', 'is', 'assisting', 'with', 'the', 'development', 'of', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Bushehr Nuclear Facility']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'country', 'is', 'assisting', 'with', 'the', 'development', 'of', 'this', 'facility', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'country', 'is', 'assisting', 'with', 'the', 'development', 'of', 'this', 'facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'development': 1, 'country': 1, 'assisting': 1, 'facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Bushehr Nuclear Facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'development': 1, 'country': 1, 'assisting': 1, 'Bushehr Nuclear Facility': 1, 'facility': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4d290>]
DEBUG  Here is the answer template: question_id: 198.2; query_terms: set(['development', 'country', 'assisting', 'facility']); type_weights: defaultdict(<function <lambda> at 0x1ee6ca28>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['From', 'what', 'country', 'did', 'East', 'Timor', 'separate', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['From', 'what', 'country', 'did', 'separate', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['East', 'Timor', 'Independence']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor Independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['From', 'what', 'country', 'did', 'separate', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['East Timor', 'East Timor Independence']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['From', 'what', 'country', 'did', 'separate', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['From', 'what', 'country', 'did', 'separate']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'separate': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'East Timor': 1, 'East Timor Independence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'East Timor': 1, 'country': 1, 'East Timor Independence': 1, 'separate': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 195.3; query_terms: set(['country', 'separate']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'political', 'party', 'does', 'Thabo', 'Mbeki', 'belong', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'political', 'party', 'does', 'belong', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['elected', 'president', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'political', 'party', 'does', 'belong', 'to', '?', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Thabo Mbeki', 'Thabo Mbeki', 'South Africa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'political', 'party', 'does', 'belong', 'to', '?', 'elected', 'president', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'political', 'party', 'does', 'belong', 'to', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'party': 1, 'president': 1, 'belong': 1, 'political': 1, 'elected': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Thabo Mbeki': 2, 'South Africa': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'South Africa': 1, 'belong': 1, 'political': 1, 'Thabo Mbeki': 2, 'elected': 1, 'president': 1, 'party': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 183.3; query_terms: set(['elected', 'party', 'belong', 'political', 'president']); type_weights: defaultdict(<function <lambda> at 0x2609b6e0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'does', 'the', 'Iditarod', 'end', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'does', 'the', 'end', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Iditarod', 'Race']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod Race']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'does', 'the', 'end', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Iditarod', 'Iditarod Race']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'does', 'the', 'end', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'does', 'the', 'end']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'end': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Iditarod': 1, 'city': 1, 'Iditarod Race': 1, 'end': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 185.2; query_terms: set(['city', 'end']); type_weights: defaultdict(<function <lambda> at 0x1ec6c938>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'the', 'Amazon', 'River', 'at', 'its', 'origin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', 'the', 'at', 'its', 'origin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Amazon', 'River']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Amazon River']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', 'the', 'at', 'its', 'origin', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Amazon River', 'Amazon River']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'at', 'its', 'origin', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'at', 'its', 'origin']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'origin': 1, 'name': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Amazon River': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'origin': 1, 'name': 1, 'Amazon River': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ed4a6d0>]
DEBUG  Here is the answer template: question_id: 187.6; query_terms: set(['origin', 'name']); type_weights: defaultdict(<function <lambda> at 0x265a9cf8>, {'person': 0.9, 'object': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'WFP', 'created', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'created', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WFP']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'created', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WFP']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'created', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'created', 'World', 'Food', 'Program', 'WFP']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Food': 1, 'World': 1, 'WFP': 1, 'Program': 1, 'created': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Food': 1, 'World': 1, 'WFP': 2, 'Program': 1, 'created': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209d6f90>]
DEBUG  Here is the answer template: question_id: 193.2; query_terms: set(['Food', 'World', 'WFP', 'Program', 'created']); type_weights: defaultdict(<function <lambda> at 0x1ed44938>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'manager', 'of', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'manager', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Manchester', 'United', 'Football', 'Club']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United Football Club']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'manager', 'of', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Manchester United', 'Manchester United Football Club']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'manager', 'of', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'manager', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'manager': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Manchester United': 1, 'Manchester United Football Club': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'manager': 1, 'Manchester United': 1, 'Manchester United Football Club': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378ded0>]
DEBUG  Here is the answer template: question_id: 181.3; query_terms: set(['manager']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'claimed', 'primary', 'purpose', 'of', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'claimed', 'primary', 'purpose', 'of', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Bushehr', 'Nuclear', 'Facility']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Bushehr Nuclear Facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'claimed', 'primary', 'purpose', 'of', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Bushehr Nuclear Facility']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'claimed', 'primary', 'purpose', 'of', 'this', 'facility', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'claimed', 'primary', 'purpose', 'of', 'this', 'facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'claimed': 1, 'facility': 1, 'primary': 1, 'purpose': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Bushehr Nuclear Facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'claimed': 1, 'purpose': 1, 'primary': 1, 'Bushehr Nuclear Facility': 1, 'facility': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 198.4; query_terms: set(['claimed', 'purpose', 'primary', 'facility']); type_weights: defaultdict(<function <lambda> at 0x1ec6ca28>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'is', 'the', 'company', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'is', 'the', 'company', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'is', 'the', 'company', 'headquartered', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'company', 'headquartered', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'is', 'the', 'company', 'headquartered', 'H', 'J', 'Heinz', 'Co']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'Heinz': 1, 'Co': 1, 'H': 1, 'company': 1, 'J': 1, 'headquartered': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Heinz': 1, 'Co': 1, 'H': 1, 'company': 1, 'J': 1, 'headquartered': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 190.1; query_terms: set(['city', 'Heinz', 'Co', 'H', 'company', 'J', 'headquartered']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'month', 'is', 'it', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'did', 'this', 'country', 'invade', 'East', 'Timor', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'month', 'is', 'it', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Iditarod', 'Race']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod Race']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'month', 'is', 'it', 'held', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Iditarod Race']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'month', 'is', 'it', 'held', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'month', 'is', 'it', 'held']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'held': 1, 'month': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Iditarod Race': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'held': 1, 'Iditarod Race': 1, 'month': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 185.3; query_terms: set(['held', 'month']); type_weights: defaultdict(<function <lambda> at 0x26c999b0>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'did', 'this', 'country', 'invade', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['East', 'Timor', 'Independence']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor Independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'did', 'this', 'country', 'invade', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['East Timor', 'East Timor Independence']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'did', 'this', 'country', 'invade', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'did', 'this', 'country', 'invade']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'country': 1, 'invade': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'East Timor': 1, 'East Timor Independence': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'East Timor': 1, 'country': 1, 'invade': 1, 'East Timor Independence': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ed4ab50>]
DEBUG  Here is the answer template: question_id: 195.4; query_terms: set(['country', 'invade']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'first', 'director', 'of', 'the', 'WFP', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'first', 'director', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WFP']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'first', 'director', 'of', 'the', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WFP']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'first', 'director', 'of', 'the', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'first', 'director', 'of', 'the', 'World', 'Food', 'Program', 'WFP']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'director': 1, 'World': 1, 'WFP': 1, 'Food': 1, 'Program': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'director': 1, 'World': 1, 'WFP': 2, 'Food': 1, 'Program': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 193.3; query_terms: set(['director', 'World', 'WFP', 'Food', 'Program']); type_weights: defaultdict(<function <lambda> at 0x1ec6c9b0>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'U.S.', 'state', 'is', 'the', 'highest', 'avocado', 'producer', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'state', 'is', 'the', 'highest', 'avocado', 'producer', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'state', 'is', 'the', 'highest', 'avocado', 'producer', '?', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'state', 'is', 'the', 'highest', 'avocado', 'producer', '?', 'avocados']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'state', 'is', 'the', 'highest', 'avocado', 'producer', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'state': 1, 'highest': 1, 'avocado': 1, 'avocados': 1, 'producer': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.S.': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'producer': 1, 'U.S.': 1, 'avocado': 1, 'state': 1, 'avocados': 1, 'highest': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 188.1; query_terms: set(['state', 'highest', 'avocado', 'avocados', 'producer']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'biggest', 'black', 'opposition', 'party', 'at', 'the', 'time', 'of', 'Mbeki', "'s", 'election', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'biggest', 'black', 'opposition', 'party', 'at', 'the', 'time', 'of', "'s", 'election', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mbeki']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['elected', 'president', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'biggest', 'black', 'opposition', 'party', 'at', 'the', 'time', 'of', "'s", 'election', '?', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mbeki', 'Thabo Mbeki', 'South Africa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'biggest', 'black', 'opposition', 'party', 'at', 'the', 'time', 'of', "'s", 'election', '?', 'elected', 'president', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'biggest', 'black', 'opposition', 'party', 'at', 'the', 'time', 'of', 's', 'election', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 1, 'elected': 1, 's': 1, 'black': 1, 'election': 1, 'opposition': 1, 'time': 1, 'biggest': 1, 'party': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mbeki': 1, 'Thabo Mbeki': 1, 'South Africa': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'party': 1, 'South Africa': 1, 'Thabo Mbeki': 1, 'elected': 1, 's': 1, 'Mbeki': 1, 'black': 1, 'election': 1, 'opposition': 1, 'time': 1, 'biggest': 1, 'president': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 183.5; query_terms: set(['party', 'elected', 's', 'black', 'election', 'opposition', 'time', 'biggest', 'president']); type_weights: defaultdict(<function <lambda> at 0x261137d0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'director', 'of', 'the', 'WFP', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1997', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WFP']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1997', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WFP']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1997', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'director', 'of', 'the', 'in', '1997', 'World', 'Food', 'Program', 'WFP']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1997': 1, 'Food': 1, 'director': 1, 'Program': 1, 'World': 1, 'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1997': 1, 'Food': 1, 'director': 1, 'Program': 1, 'World': 1, 'WFP': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x237bdfd0>]
DEBUG  Here is the answer template: question_id: 193.4; query_terms: set(['1997', 'Food', 'director', 'Program', 'World', 'WFP']); type_weights: defaultdict(<function <lambda> at 0x25c31de8>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'model', 'reactor', 'is', 'being', 'planned', 'for', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'captain', 'of', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'captain', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Manchester', 'United', 'Football', 'Club']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'model', 'reactor', 'is', 'being', 'planned', 'for', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Bushehr', 'Nuclear', 'Facility']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United Football Club']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'captain', 'of', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Manchester United', 'Manchester United Football Club']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'captain', 'of', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'captain', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'captain': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Manchester United': 1, 'Manchester United Football Club': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Manchester United': 1, 'captain': 1, 'Manchester United Football Club': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 181.4; query_terms: set(['captain']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Bushehr Nuclear Facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'model', 'reactor', 'is', 'being', 'planned', 'for', 'this', 'facility', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Bushehr Nuclear Facility']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'model', 'reactor', 'is', 'being', 'planned', 'for', 'this', 'facility', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'model', 'reactor', 'is', 'being', 'planned', 'for', 'this', 'facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'model': 1, 'facility': 1, 'reactor': 1, 'planned': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Bushehr Nuclear Facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'model': 1, 'planned': 1, 'reactor': 1, 'Bushehr Nuclear Facility': 1, 'facility': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 198.5; query_terms: set(['model', 'planned', 'reactor', 'facility']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'became', 'CEO', 'of', 'the', 'company', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'founder', 'of', 'the', 'Iditarod', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'founder', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Iditarod', 'Race']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod Race']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'founder', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Iditarod', 'Iditarod Race']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'founder', 'of', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'founder', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founder': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1, 'founder': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 185.4; query_terms: set(['founder']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'became', 'of', 'the', 'company', 'in', '1998', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['CEO']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'became', 'of', 'the', 'company', 'in', '1998', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['CEO']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'became', 'of', 'the', 'company', 'in', '1998', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'became', 'of', 'the', 'company', 'in', '1998', 'H', 'J', 'Heinz', 'Co']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Heinz': 1, 'Co': 1, '1998': 1, 'company': 1, 'J': 1, 'H': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'CEO': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Heinz': 1, 'Co': 1, 'CEO': 1, '1998': 1, 'company': 1, 'J': 1, 'H': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 190.2; query_terms: set(['Heinz', 'Co', '1998', 'company', 'J', 'H']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'the', 'International', 'Force', 'in', 'East', 'Timor', '(', 'INTERFET', ')', 'enter', 'East', 'Timor', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'the', 'in', '(', ')', 'enter', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Force', 'East Timor', 'INTERFET', 'East Timor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['East', 'Timor', 'Independence']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor Independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'the', 'in', '(', ')', 'enter', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['International Force', 'East Timor', 'INTERFET', 'East Timor', 'East Timor Independence']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'the', 'in', '(', ')', 'enter', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'the', 'in', 'enter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'enter': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'East Timor': 2, 'East Timor Independence': 1, 'International Force': 1, 'INTERFET': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'East Timor': 2, 'East Timor Independence': 1, 'International Force': 1, 'INTERFET': 1, 'enter': 1, 'date': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 195.5; query_terms: set(['date', 'enter']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'fat', 'content', 'of', 'an', 'avocado', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'fat', 'content', 'of', 'an', 'avocado', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'fat', 'content', 'of', 'an', 'avocado', '?', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'fat', 'content', 'of', 'an', 'avocado', '?', 'avocados']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'fat', 'content', 'of', 'an', 'avocado', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'content': 1, 'avocados': 1, 'avocado': 1, 'fat': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'content': 1, 'avocados': 1, 'avocado': 1, 'fat': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4c110>]
DEBUG  Here is the answer template: question_id: 188.2; query_terms: set(['content', 'avocados', 'avocado', 'fat']); type_weights: defaultdict(<function <lambda> at 0x265b2410>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'miles', 'long', 'is', 'the', 'Iditarod', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'miles', 'long', 'is', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Iditarod', 'Race']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod Race']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'miles', 'long', 'is', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Iditarod', 'Iditarod Race']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'miles', 'long', 'is', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'miles', 'long', 'is', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'miles': 1, 'long': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1, 'miles': 1, 'long': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ebdfb90>]
DEBUG  Here is the answer template: question_id: 185.6; query_terms: set(['miles', 'long']); type_weights: defaultdict(<function <lambda> at 0x266d0ed8>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'WFP', 'is', 'an', 'agency', 'of', 'what', 'organization', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The', 'is', 'an', 'agency', 'of', 'what', 'organization', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WFP']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['The', 'is', 'an', 'agency', 'of', 'what', 'organization', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WFP']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['The', 'is', 'an', 'agency', 'of', 'what', 'organization', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['The', 'is', 'an', 'agency', 'of', 'what', 'organization', 'World', 'Food', 'Program', 'WFP']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Food': 1, 'agency': 1, 'Program': 1, 'World': 1, 'organization': 1, 'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Food': 1, 'agency': 1, 'Program': 1, 'organization': 1, 'World': 1, 'WFP': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 193.5; query_terms: set(['Food', 'agency', 'Program', 'organization', 'World', 'WFP']); type_weights: defaultdict(<function <lambda> at 0x26794c08>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'the', 'keeper', 'for', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'the', 'keeper', 'for', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Manchester', 'United', 'Football', 'Club']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United Football Club']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'the', 'keeper', 'for', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Manchester United Football Club']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'the', 'keeper', 'for', 'Manchester', 'United', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'the', 'keeper', 'for', 'Manchester', 'United']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'keeper': 1, 'United': 1, 'Manchester': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Manchester United Football Club': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'keeper': 1, 'United': 1, 'Manchester': 1, 'Manchester United Football Club': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 181.5; query_terms: set(['keeper', 'United', 'Manchester']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'INTERFET', 'turn', 'over', 'control', 'to', 'UNTAET', '(', 'U.N.', 'Transitional', 'Authority', 'in', 'East', 'Timor', ')', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'turn', 'over', 'control', 'to', '(', 'in', ')', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['INTERFET', 'UNTAET', 'U.N. Transitional Authority', 'East Timor']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['East', 'Timor', 'Independence']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['East Timor Independence']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'turn', 'over', 'control', 'to', '(', 'in', ')', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['INTERFET', 'UNTAET', 'U.N. Transitional Authority', 'East Timor', 'East Timor Independence']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'turn', 'over', 'control', 'to', '(', 'in', ')', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'turn', 'over', 'control', 'to', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'turn': 1, 'control': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'East Timor': 1, 'UNTAET': 1, 'East Timor Independence': 1, 'U.N. Transitional Authority': 1, 'INTERFET': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'control': 1, 'East Timor': 1, 'U.N. Transitional Authority': 1, 'East Timor Independence': 1, 'INTERFET': 1, 'turn': 1, 'date': 1, 'UNTAET': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 195.7; query_terms: set(['date', 'turn', 'control']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'work', 'on', 'this', 'facility', 'originally', 'start', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'work', 'on', 'this', 'facility', 'originally', 'start', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Bushehr', 'Nuclear', 'Facility']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Bushehr Nuclear Facility']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'work', 'on', 'this', 'facility', 'originally', 'start', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Bushehr Nuclear Facility']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'work', 'on', 'this', 'facility', 'originally', 'start', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'work', 'on', 'this', 'facility', 'originally', 'start']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'start': 1, 'originally': 1, 'work': 1, 'facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Bushehr Nuclear Facility': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'start': 1, 'originally': 1, 'work': 1, 'Bushehr Nuclear Facility': 1, 'facility': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 198.6; query_terms: set(['start', 'originally', 'work', 'facility']); type_weights: defaultdict(<function <lambda> at 0x27177a28>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'heir', 'to', 'the', 'company', 'fortune', 'was', 'killed', 'in', 'an', 'aviation', 'accident', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'heir', 'to', 'the', 'company', 'fortune', 'was', 'killed', 'in', 'an', 'aviation', 'accident', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'heir', 'to', 'the', 'company', 'fortune', 'was', 'killed', 'in', 'an', 'aviation', 'accident', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'heir', 'to', 'the', 'company', 'fortune', 'was', 'killed', 'in', 'an', 'aviation', 'accident', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'heir', 'to', 'the', 'company', 'fortune', 'was', 'killed', 'in', 'an', 'aviation', 'accident', 'H', 'J', 'Heinz', 'Co']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'accident': 1, 'fortune': 1, 'H': 1, 'company': 1, 'J': 1, 'heir': 1, 'Heinz': 1, 'aviation': 1, 'killed': 1, 'Co': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'accident': 1, 'fortune': 1, 'H': 1, 'company': 1, 'J': 1, 'heir': 1, 'Heinz': 1, 'aviation': 1, 'killed': 1, 'Co': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 190.3; query_terms: set(['accident', 'fortune', 'H', 'company', 'J', 'heir', 'Heinz', 'aviation', 'killed', 'Co']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'first', 'avocado', 'plant', 'cultivated', 'in', 'the', 'U.S.', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'first', 'avocado', 'plant', 'cultivated', 'in', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['U.S.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'first', 'avocado', 'plant', 'cultivated', 'in', 'the', '?', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['U.S.']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'first', 'avocado', 'plant', 'cultivated', 'in', 'the', '?', 'avocados']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'first', 'avocado', 'plant', 'cultivated', 'in', 'the', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'plant': 1, 'avocado': 1, 'avocados': 1, 'cultivated': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'U.S.': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'U.S.': 1, 'plant': 1, 'avocado': 1, 'avocados': 1, 'cultivated': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 188.5; query_terms: set(['plant', 'avocado', 'avocados', 'cultivated']); type_weights: defaultdict(<function <lambda> at 0x27d09c80>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'record', 'time', 'in', 'which', 'the', 'Iditarod', 'was', 'won', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'record', 'time', 'in', 'which', 'the', 'was', 'won', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Iditarod', 'Race']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'feeder', 'club', 'for', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Iditarod Race']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'record', 'time', 'in', 'which', 'the', 'was', 'won', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Iditarod', 'Iditarod Race']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'record', 'time', 'in', 'which', 'the', 'was', 'won', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'record', 'time', 'in', 'which', 'the', 'was', 'won']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'record': 1, 'won': 1, 'time': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Iditarod': 1, 'Iditarod Race': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Iditarod': 1, 'record': 1, 'Iditarod Race': 1, 'won': 1, 'time': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 185.7; query_terms: set(['record', 'won', 'time']); type_weights: defaultdict(<function <lambda> at 0x1ec6c938>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'feeder', 'club', 'for', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Manchester', 'United', 'Football', 'Club']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Manchester United Football Club']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'feeder', 'club', 'for', 'Manchester', 'United', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Manchester United Football Club']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'feeder', 'club', 'for', 'Manchester', 'United', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'feeder', 'club', 'for', 'Manchester', 'United']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'club': 1, 'United': 1, 'Manchester': 1, 'feeder': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Manchester United Football Club': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'club': 1, 'United': 1, 'Manchester': 1, 'Manchester United Football Club': 1, 'feeder': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 181.7; query_terms: set(['club', 'United', 'Manchester', 'feeder']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'was', 'the', 'Euro', 'adopted', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'was', 'the', 'adopted', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Adoption', 'of', 'the', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Adoption', 'Euro']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'was', 'the', 'adopted', '?', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Euro', 'Adoption', 'Euro']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'was', 'the', 'adopted', '?', 'of', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'was', 'the', 'adopted', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'adopted': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Adoption': 1, 'Euro': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 'Adoption': 1, 'adopted': 1, 'Euro': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 196.1; query_terms: set(['date', 'adopted']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', '2000', ',', 'in', 'how', 'many', 'countries', 'did', 'the', 'WFP', 'distribute', 'food', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', '2000', ',', 'in', 'how', 'many', 'countries', 'did', 'the', 'distribute', 'food', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['WFP']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', '2000', ',', 'in', 'how', 'many', 'countries', 'did', 'the', 'distribute', 'food', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['WFP']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', '2000', ',', 'in', 'how', 'many', 'countries', 'did', 'the', 'distribute', 'food', '?', 'World', 'Food', 'Program', '(', 'WFP', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', '2000', 'in', 'how', 'many', 'countries', 'did', 'the', 'distribute', 'food', 'World', 'Food', 'Program', 'WFP']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'countries': 1, 'food': 1, 'distribute': 1, 'Food': 1, '2000': 1, 'Program': 1, 'World': 1, 'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'WFP': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'countries': 1, 'food': 1, 'distribute': 1, 'Food': 1, '2000': 1, 'Program': 1, 'World': 1, 'WFP': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x237bdfd0>]
DEBUG  Here is the answer template: question_id: 193.6; query_terms: set(['countries', 'food', 'distribute', 'Food', '2000', 'Program', 'World', 'WFP']); type_weights: defaultdict(<function <lambda> at 0x25f458c0>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'Heinz', 'Ketchup', 'introduced', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'introduced', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Heinz Ketchup']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'introduced', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Heinz Ketchup']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'introduced', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'introduced', 'H', 'J', 'Heinz', 'Co']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'H': 1, 'J': 1, 'introduced': 1, 'Co': 1, 'Heinz': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Heinz Ketchup': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Heinz': 1, 'Co': 1, 'H': 1, 'J': 1, 'introduced': 1, 'Heinz Ketchup': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b350>]
DEBUG  Here is the answer template: question_id: 190.4; query_terms: set(['H', 'Heinz', 'J', 'Co', 'introduced']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'Padre', 'Pio', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Padre', 'Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Padre Pio', 'Padre Pio']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Padre Pio': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Padre Pio': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 199.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x20a4e8c0>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'insect', 'pest', 'threatens', 'avocado', 'crops', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'insect', 'pest', 'threatens', 'avocado', 'crops', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['avocados']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'insect', 'pest', 'threatens', 'avocado', 'crops', '?', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'insect', 'pest', 'threatens', 'avocado', 'crops', '?', 'avocados']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'insect', 'pest', 'threatens', 'avocado', 'crops', 'avocados']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'crops': 1, 'threatens': 1, 'avocado': 1, 'insect': 1, 'pest': 1, 'avocados': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'crops': 1, 'threatens': 1, 'avocado': 1, 'insect': 1, 'pest': 1, 'avocados': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4c110>]
DEBUG  Here is the answer template: question_id: 188.6; query_terms: set(['crops', 'threatens', 'avocado', 'insect', 'pest', 'avocados']); type_weights: defaultdict(<function <lambda> at 0x1ee53d70>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'Thabo', 'Mbeki', 'when', 'he', 'was', 'elected', 'president', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'when', 'he', 'was', 'elected', 'president', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['elected', 'president', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'when', 'he', 'was', 'elected', 'president', '?', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Thabo Mbeki', 'Thabo Mbeki', 'South Africa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'when', 'he', 'was', 'elected', 'president', '?', 'elected', 'president', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'when', 'he', 'was', 'elected', 'president', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'elected': 2, 'old': 1, 'president': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Thabo Mbeki': 2, 'South Africa': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'elected': 2, 'South Africa': 1, 'old': 1, 'Thabo Mbeki': 2, 'president': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 183.6; query_terms: set(['elected', 'old', 'president']); type_weights: defaultdict(<function <lambda> at 0x26dc4b18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'performers', 'appeared', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'performers', 'appeared', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'performers', 'appeared', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'performers', 'appeared', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '?', '1998', 'Edinburgh', 'Fringe']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'performers', 'appeared', 'at', 'the', '1998', 'Edinburgh', 'Fringe', '1998', 'Edinburgh', 'Fringe']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'appeared': 1, '1998': 2, 'Fringe': 2, 'Edinburgh': 2, 'performers': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'appeared': 1, '1998': 2, 'Fringe': 2, 'performers': 1, 'Edinburgh': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 182.1; query_terms: set(['appeared', '1998', 'Fringe', 'performers', 'Edinburgh']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'European', 'Union', 'countries', 'originally', 'adopted', 'the', 'Euro', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'pyramids', 'have', 'been', 'discovered', 'in', 'Egypt', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'pyramids', 'have', 'been', 'discovered', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Egypt']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pyramids', 'of', 'Egypt']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Pyramids', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Egypt']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'pyramids', 'have', 'been', 'discovered', 'in', '?', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Egypt', 'Egypt']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'pyramids', 'have', 'been', 'discovered', 'in', '?', 'Pyramids', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'pyramids', 'have', 'been', 'discovered', 'in', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'discovered': 1, 'Pyramids': 1, 'pyramids': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Egypt': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'discovered': 1, 'Egypt': 2, 'pyramids': 1, 'Pyramids': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 186.1; query_terms: set(['discovered', 'pyramids', 'Pyramids']); type_weights: defaultdict(<function <lambda> at 0x27173320>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'countries', 'originally', 'adopted', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['European Union', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Adoption', 'of', 'the', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Adoption', 'Euro']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'countries', 'originally', 'adopted', 'the', '?', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['European Union', 'Euro', 'Adoption', 'Euro']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'countries', 'originally', 'adopted', 'the', '?', 'of', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'countries', 'originally', 'adopted', 'the', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'originally': 1, 'adopted': 1, 'countries': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Adoption': 1, 'European Union': 1, 'Euro': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'countries': 1, 'originally': 1, 'adopted': 1, 'Adoption': 1, 'European Union': 1, 'Euro': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 196.2; query_terms: set(['originally', 'adopted', 'countries']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'disease', 'does', 'Heinz', 'tout', 'its', 'ketchup', 'as', 'helping', 'to', 'prevent', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'disease', 'does', 'tout', 'its', 'ketchup', 'as', 'helping', 'to', 'prevent', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Heinz']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'disease', 'does', 'tout', 'its', 'ketchup', 'as', 'helping', 'to', 'prevent', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Heinz']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'disease', 'does', 'tout', 'its', 'ketchup', 'as', 'helping', 'to', 'prevent', '?', 'H.', 'J.', 'Heinz', 'Co', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'disease', 'does', 'tout', 'its', 'ketchup', 'as', 'helping', 'to', 'prevent', 'H', 'J', 'Heinz', 'Co']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'prevent': 1, 'Heinz': 1, 'Co': 1, 'H': 1, 'J': 1, 'disease': 1, 'helping': 1, 'tout': 1, 'ketchup': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Heinz': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'prevent': 1, 'Heinz': 2, 'Co': 1, 'H': 1, 'J': 1, 'disease': 1, 'helping': 1, 'tout': 1, 'ketchup': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 190.5; query_terms: set(['prevent', 'Heinz', 'Co', 'H', 'J', 'disease', 'helping', 'tout', 'ketchup']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Padre', 'Pio', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Padre', 'Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Padre Pio', 'Padre Pio']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Padre Pio': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Padre Pio': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 199.2; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1e7a9d70>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'publishes', 'her', 'books', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'publishes', 'her', 'books', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Joanne', 'Kathleen', 'Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Joanne Kathleen']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'publishes', 'her', 'books', '?', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Joanne Kathleen']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'publishes', 'her', 'books', '?', 'Rowling']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'publishes', 'her', 'books', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'publishes': 1, 'books': 1, 'Rowling': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Joanne Kathleen': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'publishes': 1, 'books': 1, 'Joanne Kathleen': 1, 'Rowling': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 189.2; query_terms: set(['publishes', 'books', 'Rowling']); type_weights: defaultdict(<function <lambda> at 0x27cf29b0>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'the', 'tournament', 'take', 'place', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'the', 'tournament', 'take', 'place', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'the', 'tournament', 'take', 'place', '?', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'the', 'tournament', 'take', 'place', '?', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'the', 'tournament', 'take', 'place', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Tournament': 1, '1996': 1, 'tournament': 1, 'place': 1, 'Chess': 1, 'World': 1, 'Super': 1, 'take': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'tournament': 1, '1996': 1, 'Tournament': 1, 'place': 1, 'Chess': 1, 'World': 1, 'Super': 1, 'take': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209d6850>]
DEBUG  Here is the answer template: question_id: 194.1; query_terms: set(['tournament', '1996', 'Tournament', 'place', 'Chess', 'World', 'Super', 'take']); type_weights: defaultdict(<function <lambda> at 0x260bd758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'was', 'Frank', 'Sinatra', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Frank Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Frank', 'Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Frank Sinatra']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Frank Sinatra', 'Frank Sinatra']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Frank Sinatra': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Frank Sinatra': 2, 'born': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de90>]
DEBUG  Here is the answer template: question_id: 200.1; query_terms: set(['city', 'born']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'are', 'the', 'three', 'Great', 'Pyramids', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'are', 'the', 'three', 'located', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Pyramids']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pyramids', 'of', 'Egypt']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Pyramids', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Egypt']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'are', 'the', 'three', 'located', '?', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great Pyramids', 'Egypt']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'are', 'the', 'three', 'located', '?', 'Pyramids', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'are', 'the', 'three', 'located', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'Pyramids': 1, 'three': 1, 'located': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Egypt': 1, 'Great Pyramids': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Egypt': 1, 'three': 1, 'located': 1, 'Great Pyramids': 1, 'Pyramids': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 186.2; query_terms: set(['city', 'located', 'three', 'Pyramids']); type_weights: defaultdict(<function <lambda> at 0x25fdfcf8>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'seats', 'did', 'Mbeki', "'s", 'party', 'win', 'in', 'the', 'election', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'seats', 'did', "'s", 'party', 'win', 'in', 'the', 'election', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mbeki']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Thabo', 'Mbeki', 'elected', 'president', 'of', 'South', 'Africa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['elected', 'president', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Thabo Mbeki', 'South Africa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'seats', 'did', "'s", 'party', 'win', 'in', 'the', 'election', '?', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mbeki', 'Thabo Mbeki', 'South Africa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'seats', 'did', "'s", 'party', 'win', 'in', 'the', 'election', '?', 'elected', 'president', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'seats', 'did', 's', 'party', 'win', 'in', 'the', 'election', 'elected', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 1, 'win': 1, 'elected': 1, 's': 1, 'election': 1, 'seats': 1, 'party': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mbeki': 1, 'Thabo Mbeki': 1, 'South Africa': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'party': 1, 'South Africa': 1, 'win': 1, 'Thabo Mbeki': 1, 'elected': 1, 's': 1, 'Mbeki': 1, 'election': 1, 'seats': 1, 'president': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 183.7; query_terms: set(['party', 'win', 'elected', 's', 'election', 'seats', 'president']); type_weights: defaultdict(<function <lambda> at 0x1e7a9de8>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'Padre', 'Pio', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Padre', 'Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Padre Pio', 'Padre Pio']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Padre Pio': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Padre Pio': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 199.3; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'was', 'Greece', 'allowed', 'to', 'adopt', 'the', 'Euro', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'was', 'allowed', 'to', 'adopt', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Greece', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Adoption', 'of', 'the', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Adoption', 'Euro']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'was', 'allowed', 'to', 'adopt', 'the', '?', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Greece', 'Euro', 'Adoption', 'Euro']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'was', 'allowed', 'to', 'adopt', 'the', '?', 'of', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'was', 'allowed', 'to', 'adopt', 'the', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'adopt': 1, 'allowed': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Euro': 2, 'Adoption': 1, 'Greece': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'allowed': 1, 'adopt': 1, 'Adoption': 1, 'Greece': 1, 'date': 1, 'Euro': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 196.4; query_terms: set(['date', 'adopt', 'allowed']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'abbreviation', 'is', 'the', 'International', 'Rowing', 'Federation', 'also', 'known', 'by', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'abbreviation', 'is', 'the', 'also', 'known', 'by', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['International', 'Rowing', 'Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'abbreviation', 'is', 'the', 'also', 'known', 'by', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['International Rowing Federation', 'International Rowing Federation']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'abbreviation', 'is', 'the', 'also', 'known', 'by', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'abbreviation', 'is', 'the', 'also', 'known', 'by']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'abbreviation': 1, 'known': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'International Rowing Federation': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'abbreviation': 1, 'known': 1, 'International Rowing Federation': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4b350>]
DEBUG  Here is the answer template: question_id: 191.1; query_terms: set(['abbreviation', 'known']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'Sinatra', "'s", 'first', 'performance', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', "'s", 'first', 'performance', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Frank', 'Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Frank Sinatra']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', "'s", 'first', 'performance', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Sinatra', 'Frank Sinatra']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', "'s", 'first', 'performance', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 's', 'first', 'performance']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'performance': 1, 's': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Sinatra': 1, 'Frank Sinatra': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'performance': 1, 's': 1, 'Frank Sinatra': 1, 'Sinatra': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2378de10>]
DEBUG  Here is the answer template: question_id: 200.2; query_terms: set(['performance', 's']); type_weights: defaultdict(<function <lambda> at 0x20a4ce60>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'this', 'tournament', 'conclude', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'this', 'tournament', 'conclude', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'this', 'tournament', 'conclude', '?', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'this', 'tournament', 'conclude', '?', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'this', 'tournament', 'conclude', '1996', 'World', 'Chess', 'Super', 'Tournament']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'conclude': 1, 'Tournament': 1, '1996': 1, 'tournament': 1, 'Chess': 1, 'World': 1, 'Super': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'conclude': 1, 'tournament': 1, '1996': 1, 'Tournament': 1, 'Chess': 1, 'World': 1, 'Super': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 194.2; query_terms: set(['conclude', 'tournament', '1996', 'Tournament', 'Chess', 'World', 'Super']); type_weights: defaultdict(<function <lambda> at 0x1ee53d70>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'much', 'did', 'this', 'publisher', 'pay', 'for', 'her', 'first', 'manuscript', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'much', 'did', 'this', 'publisher', 'pay', 'for', 'her', 'first', 'manuscript', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Joanne', 'Kathleen', 'Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Joanne Kathleen']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'much', 'did', 'this', 'publisher', 'pay', 'for', 'her', 'first', 'manuscript', '?', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Joanne Kathleen']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'much', 'did', 'this', 'publisher', 'pay', 'for', 'her', 'first', 'manuscript', '?', 'Rowling']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'much', 'did', 'this', 'publisher', 'pay', 'for', 'her', 'first', 'manuscript', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'publisher': 1, 'Rowling': 1, 'manuscript': 1, 'pay': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Joanne Kathleen': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Joanne Kathleen': 1, 'publisher': 1, 'pay': 1, 'manuscript': 1, 'Rowling': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20a4c110>]
DEBUG  Here is the answer template: question_id: 189.3; query_terms: set(['publisher', 'pay', 'manuscript', 'Rowling']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'is', 'the', 'largest', 'pyramid', 'ever', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'is', 'the', 'largest', 'pyramid', 'ever', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pyramids', 'of', 'Egypt']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Pyramids', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Egypt']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'is', 'the', 'largest', 'pyramid', 'ever', 'built', '?', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Egypt']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'is', 'the', 'largest', 'pyramid', 'ever', 'built', '?', 'Pyramids', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'is', 'the', 'largest', 'pyramid', 'ever', 'built', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Pyramids': 1, 'pyramid': 1, 'built': 1, 'largest': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Egypt': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Egypt': 1, 'largest': 1, 'pyramid': 1, 'built': 1, 'Pyramids': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 186.4; query_terms: set(['largest', 'pyramid', 'built', 'Pyramids']); type_weights: defaultdict(<function <lambda> at 0x269765f0>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'is', 'the', 'Euro', 'scheduled', 'to', 'completely', 'replace', 'the', 'national', 'currencies', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'is', 'the', 'scheduled', 'to', 'completely', 'replace', 'the', 'national', 'currencies', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Adoption', 'of', 'the', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Adoption', 'Euro']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'is', 'the', 'scheduled', 'to', 'completely', 'replace', 'the', 'national', 'currencies', '?', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Euro', 'Adoption', 'Euro']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'is', 'the', 'scheduled', 'to', 'completely', 'replace', 'the', 'national', 'currencies', '?', 'of', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'is', 'the', 'scheduled', 'to', 'completely', 'replace', 'the', 'national', 'currencies', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'scheduled': 1, 'completely': 1, 'currencies': 1, 'national': 1, 'replace': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Adoption': 1, 'Euro': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'scheduled': 1, 'currencies': 1, 'national': 1, 'replace': 1, 'completely': 1, 'Adoption': 1, 'Euro': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20984cd0>]
DEBUG  Here is the answer template: question_id: 196.5; query_terms: set(['scheduled', 'completely', 'currencies', 'national', 'replace']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'International', 'Rowing', 'Federation', 'Rowing', 'World', 'Cup', 'first', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'Rowing', 'World', 'Cup', 'first', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['International', 'Rowing', 'Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'Padre', 'Pio', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Padre', 'Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Padre Pio', 'Padre Pio']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'when', 'he', 'died', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'when', 'he', 'died']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'old': 1, 'died': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Padre Pio': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'old': 1, 'Padre Pio': 2, 'died': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 199.4; query_terms: set(['old', 'died']); type_weights: defaultdict(<function <lambda> at 0x26fbe500>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'Rowing', 'World', 'Cup', 'first', 'held', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['International Rowing Federation', 'International Rowing Federation']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'Rowing', 'World', 'Cup', 'first', 'held', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'Rowing', 'World', 'Cup', 'first', 'held']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'World': 1, 'Rowing': 1, 'held': 1, 'Cup': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'International Rowing Federation': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'International Rowing Federation': 2, 'World': 1, 'Rowing': 1, 'Cup': 1, 'held': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 191.2; query_terms: set(['World', 'Rowing', 'Cup', 'held']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'Cole', 'Porter', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'height', 'of', 'the', 'largest', 'pyramid', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'height', 'of', 'the', 'largest', 'pyramid', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Pyramids', 'of', 'Egypt']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Pyramids', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Egypt']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'height', 'of', 'the', 'largest', 'pyramid', '?', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Egypt']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'height', 'of', 'the', 'largest', 'pyramid', '?', 'Pyramids', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'height', 'of', 'the', 'largest', 'pyramid', 'Pyramids', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Pyramids': 1, 'largest': 1, 'pyramid': 1, 'height': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Egypt': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'height': 1, 'Egypt': 1, 'largest': 1, 'pyramid': 1, 'Pyramids': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 186.5; query_terms: set(['height', 'largest', 'pyramid', 'Pyramids']); type_weights: defaultdict(<function <lambda> at 0x265d2b90>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Cole', 'Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Cole Porter', 'Cole Porter']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'did': 1, 'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cole Porter': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'did': 1, 'die': 1, 'Cole Porter': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ec6a990>]
DEBUG  Here is the answer template: question_id: 202.3; query_terms: set(['did', 'die']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Sinatra', "'s", 'first', 'recording', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', "'s", 'first', 'recording', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Frank', 'Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Frank Sinatra']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', "'s", 'first', 'recording', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Sinatra', 'Frank Sinatra']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', "'s", 'first', 'recording', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 's', 'first', 'recording']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'recording': 1, 's': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Sinatra': 1, 'Frank Sinatra': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'recording': 1, 'Sinatra': 1, 's': 1, 'Frank Sinatra': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 200.3; query_terms: set(['recording', 's']); type_weights: defaultdict(<function <lambda> at 0x26d09a28>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'date', 'of', 'the', '1999', 'Chicago', 'Marathon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'date', 'of', 'the', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Chicago', 'Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'date', 'of', 'the', '1999', '?', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chicago Marathon', 'Chicago Marathon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', '1999', '?', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', '1999', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, '1999': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Chicago Marathon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, '1999': 2, 'Chicago Marathon': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 184.1; query_terms: set(['date', '1999']); type_weights: defaultdict(<function <lambda> at 0x1ec6c488>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'the', 'Danish', 'referendum', 'of', '2000', ',', 'what', 'percentage', 'of', 'the', 'voters', 'rejected', 'adopting', 'the', 'Euro', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'the', 'referendum', 'of', '2000', ',', 'what', 'percentage', 'of', 'the', 'voters', 'rejected', 'adopting', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Danish', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Adoption', 'of', 'the', 'Euro']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'the']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Adoption', 'Euro']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'the', 'referendum', 'of', '2000', ',', 'what', 'percentage', 'of', 'the', 'voters', 'rejected', 'adopting', 'the', '?', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Danish', 'Euro', 'Adoption', 'Euro']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'the', 'referendum', 'of', '2000', ',', 'what', 'percentage', 'of', 'the', 'voters', 'rejected', 'adopting', 'the', '?', 'of', 'the']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'the', 'referendum', 'of', '2000', 'what', 'percentage', 'of', 'the', 'voters', 'rejected', 'adopting', 'the', 'of', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'voters': 1, 'referendum': 1, 'rejected': 1, '2000': 1, 'adopting': 1, 'percentage': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Danish': 1, 'Adoption': 1, 'Euro': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Danish': 1, 'voters': 1, 'referendum': 1, 'rejected': 1, '2000': 1, 'Adoption': 1, 'adopting': 1, 'percentage': 1, 'Euro': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 196.6; query_terms: set(['voters', 'referendum', 'rejected', '2000', 'adopting', 'percentage']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'is', 'the', 'capital', 'of', 'the', 'Mormon', 'Church', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'did', 'she', 'start', 'writing', 'her', 'first', 'book', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'is', 'the', 'capital', 'of', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mormon Church']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Church', 'Jesus Christ']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'is', 'the', 'capital', 'of', 'the', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mormon Church', 'Church', 'Jesus Christ']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'is', 'the', 'capital', 'of', 'the', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'is', 'the', 'capital', 'of', 'the', 'of', 'of', 'Latterday', 'Saints', 'Mormons']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Mormons': 1, 'Latterday': 1, 'Saints': 1, 'capital': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mormon Church': 1, 'Jesus Christ': 1, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Mormon Church': 1, 'Jesus Christ': 1, 'Church': 1, 'Saints': 1, 'Mormons': 1, 'Latterday': 1, 'capital': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc910>]
DEBUG  Here is the answer template: question_id: 204.6; query_terms: set(['Mormons', 'Latterday', 'Saints', 'capital']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'did', 'she', 'start', 'writing', 'her', 'first', 'book', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Joanne', 'Kathleen', 'Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Rowling']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Joanne Kathleen']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'did', 'she', 'start', 'writing', 'her', 'first', 'book', '?', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Joanne Kathleen']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'did', 'she', 'start', 'writing', 'her', 'first', 'book', '?', 'Rowling']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'did', 'she', 'start', 'writing', 'her', 'first', 'book', 'Rowling']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'start': 1, 'Rowling': 1, 'book': 1, 'writing': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Joanne Kathleen': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'start': 1, 'book': 1, 'Joanne Kathleen': 1, 'writing': 1, 'Rowling': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 189.4; query_terms: set(['start', 'book', 'writing', 'Rowling']); type_weights: defaultdict(<function <lambda> at 0x1f1117d0>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'country', 'won', 'the', 'first', 'four', 'overall', 'International', 'Rowing', 'Federation', 'Rowing', 'World', 'Cup', 'titles', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'country', 'won', 'the', 'first', 'four', 'overall', 'International', 'Rowing', 'Federation', 'Rowing', 'World', 'Cup', 'titles', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['International', 'Rowing', 'Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'country', 'won', 'the', 'first', 'four', 'overall', 'International', 'Rowing', 'Federation', 'Rowing', 'World', 'Cup', 'titles', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['International Rowing Federation']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'country', 'won', 'the', 'first', 'four', 'overall', 'International', 'Rowing', 'Federation', 'Rowing', 'World', 'Cup', 'titles', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'country', 'won', 'the', 'first', 'four', 'overall', 'International', 'Rowing', 'Federation', 'Rowing', 'World', 'Cup', 'titles']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'titles': 1, 'Federation': 1, 'Cup': 1, 'country': 1, 'Rowing': 2, 'overall': 1, 'four': 1, 'won': 1, 'World': 1, 'International': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'International Rowing Federation': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Federation': 1, 'Cup': 1, 'International': 1, 'country': 1, 'Rowing': 2, 'overall': 1, 'four': 1, 'titles': 1, 'World': 1, 'International Rowing Federation': 1, 'won': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 191.3; query_terms: set(['Federation', 'Cup', 'International', 'country', 'Rowing', 'overall', 'four', 'titles', 'World', 'won']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'he', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'he', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Frank', 'Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Frank Sinatra']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'he', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Frank Sinatra']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'he', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'he', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Frank Sinatra': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Frank Sinatra': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 200.4; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x28e49cf8>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Cole', 'Porter', "'s", 'last', 'Broadway', 'show', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', "'s", 'last', 'Broadway', 'show', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Cole', 'Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', "'s", 'last', 'Broadway', 'show', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Cole Porter', 'Cole Porter']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', "'s", 'last', 'Broadway', 'show', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 's', 'last', 'Broadway', 'show']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Broadway': 1, 's': 1, 'show': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cole Porter': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Broadway': 1, 's': 1, 'Cole Porter': 2, 'show': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ed24450>]
DEBUG  Here is the answer template: question_id: 202.5; query_terms: set(['Broadway', 's', 'show']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'animal', 'was', 'the', 'first', 'mammal', 'successfully', 'cloned', 'from', 'adult', 'cells', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'animal', 'was', 'the', 'first', 'mammal', 'successfully', 'cloned', 'from', 'adult', 'cells', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'animal', 'was', 'the', 'first', 'mammal', 'successfully', 'cloned', 'from', 'adult', 'cells', '?', 'cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'animal', 'was', 'the', 'first', 'mammal', 'successfully', 'cloned', 'from', 'adult', 'cells', '?', 'cloning', 'of', 'mammals', '(', 'from', 'adult', 'cells', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'animal', 'was', 'the', 'first', 'mammal', 'successfully', 'cloned', 'from', 'adult', 'cells', 'cloning', 'of', 'mammals', 'from', 'adult', 'cells']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'mammals': 1, 'cells': 2, 'successfully': 1, 'cloned': 1, 'adult': 2, 'animal': 1, 'mammal': 1, 'cloning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'mammals': 1, 'cells': 2, 'successfully': 1, 'cloned': 1, 'adult': 2, 'animal': 1, 'mammal': 1, 'cloning': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x20984bd0>]
DEBUG  Here is the answer template: question_id: 197.1; query_terms: set(['mammals', 'cells', 'successfully', 'cloned', 'adult', 'animal', 'mammal', 'cloning']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'temples', 'are', 'in', 'operation', 'worldwide', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'temples', 'are', 'in', 'operation', 'worldwide', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Church', 'Jesus Christ']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'temples', 'are', 'in', 'operation', 'worldwide', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Church', 'Jesus Christ']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'temples', 'are', 'in', 'operation', 'worldwide', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'temples', 'are', 'in', 'operation', 'worldwide', 'of', 'of', 'Latterday', 'Saints', 'Mormons']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'worldwide': 1, 'temples': 1, 'Saints': 1, 'Mormons': 1, 'Latterday': 1, 'operation': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Jesus Christ': 1, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'worldwide': 1, 'temples': 1, 'Jesus Christ': 1, 'Saints': 1, 'Mormons': 1, 'Latterday': 1, 'Church': 1, 'operation': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 204.7; query_terms: set(['worldwide', 'temples', 'Saints', 'Mormons', 'Latterday', 'operation']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'distance', 'of', 'the', '1999', 'Chicago', 'Marathon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'distance', 'of', 'the', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Chicago', 'Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'distance', 'of', 'the', '1999', '?', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chicago Marathon', 'Chicago Marathon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'distance', 'of', 'the', '1999', '?', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'distance', 'of', 'the', '1999', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 2, 'distance': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Chicago Marathon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1999': 2, 'distance': 1, 'Chicago Marathon': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 184.2; query_terms: set(['1999', 'distance']); type_weights: defaultdict(<function <lambda> at 0x27d332a8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'he', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'he', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Frank', 'Sinatra']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Frank Sinatra']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'he', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Frank Sinatra']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'he', 'when', 'he', 'died', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'he', 'when', 'he', 'died']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'old': 1, 'died': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Frank Sinatra': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'old': 1, 'died': 1, 'Frank Sinatra': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 200.5; query_terms: set(['old', 'died']); type_weights: defaultdict(<function <lambda> at 0x1ec6cb18>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['The', 'Tower', 'of', 'Pisa', 'began', 'to', 'be', 'built', 'in', 'what', 'year', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['The', 'Tower', 'of', 'began', 'to', 'be', 'built', 'in', 'what', 'year', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Leaning', 'Tower', 'of', 'Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['The', 'Tower', 'of', 'began', 'to', 'be', 'built', 'in', 'what', 'year', '?', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pisa', 'Pisa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['The', 'Tower', 'of', 'began', 'to', 'be', 'built', 'in', 'what', 'year', '?', 'Leaning', 'Tower', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['The', 'Tower', 'of', 'began', 'to', 'be', 'built', 'in', 'what', 'year', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Tower': 2, 'Leaning': 1, 'began': 1, 'built': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pisa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'built': 1, 'Tower': 2, 'Pisa': 2, 'began': 1, 'Leaning': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 207.1; query_terms: set(['built', 'Tower', 'began', 'Leaning']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'songs', 'did', 'Cole', 'Porter', 'write', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'songs', 'did', 'write', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Cole', 'Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'songs', 'did', 'write', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Cole Porter', 'Cole Porter']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'songs', 'did', 'write', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'songs', 'did', 'write']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'write': 1, 'songs': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cole Porter': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'write': 1, 'Cole Porter': 2, 'songs': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 202.6; query_terms: set(['write', 'songs']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Carolyn', 'Bessette', 'Kennedy']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Carolyn Bessette Kennedy']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Carolyn Bessette Kennedy']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'she', 'married', 'to']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'married': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Carolyn Bessette Kennedy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'married': 1, 'Carolyn Bessette Kennedy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 209.4; query_terms: set(['married']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'is', 'Padre', 'Pio', "'s", 'tomb', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'is', "'s", 'tomb', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Padre', 'Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'is', "'s", 'tomb', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Padre Pio', 'Padre Pio']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'is', "'s", 'tomb', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'is', 's', 'tomb']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 's': 1, 'tomb': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Padre Pio': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 's': 1, 'tomb': 1, 'Padre Pio': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 199.5; query_terms: set(['city', 's', 'tomb']); type_weights: defaultdict(<function <lambda> at 0x247db668>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'Shakespeare', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['William', 'Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['William Shakespeare']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Shakespeare', 'William Shakespeare']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 201.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'long', 'did', 'it', 'take', 'to', 'build', 'the', 'Tower', 'of', 'Pisa', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'long', 'did', 'it', 'take', 'to', 'build', 'the', 'Tower', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Leaning', 'Tower', 'of', 'Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'long', 'did', 'it', 'take', 'to', 'build', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pisa', 'Pisa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'long', 'did', 'it', 'take', 'to', 'build', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'long', 'did', 'it', 'take', 'to', 'build', 'the', 'Tower', 'of', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Tower': 2, 'Leaning': 1, 'take': 1, 'long': 1, 'build': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pisa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Pisa': 2, 'long': 1, 'build': 1, 'Leaning': 1, 'Tower': 2, 'take': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 207.2; query_terms: set(['build', 'Tower', 'take', 'long', 'Leaning']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'island', 'is', 'Mt.', 'Pinatubo', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'island', 'is', 'Mt.', 'Pinatubo', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1991', 'eruption', 'of', 'Mount', 'Pinatubo']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'elected', 'president', 'of', 'the', 'International', 'Rowing', 'Federation', 'in', '1989', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mount Pinatubo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'island', 'is', 'Mt.', 'Pinatubo', '?', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mount Pinatubo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'island', 'is', 'Mt.', 'Pinatubo', '?', '1991', 'eruption', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'island', 'is', 'Mt', 'Pinatubo', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1991': 1, 'island': 1, 'Pinatubo': 1, 'eruption': 1, 'Mt': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mount Pinatubo': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1991': 1, 'island': 1, 'Pinatubo': 1, 'eruption': 1, 'Mt': 1, 'Mount Pinatubo': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 205.1; query_terms: set(['1991', 'island', 'Pinatubo', 'eruption', 'Mt']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'elected', 'president', 'of', 'the', 'in', '1989', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['International', 'Rowing', 'Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'elected', 'president', 'of', 'the', 'in', '1989', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['International Rowing Federation', 'International Rowing Federation']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'elected', 'president', 'of', 'the', 'in', '1989', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'elected', 'president', 'of', 'the', 'in', '1989']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'elected': 1, '1989': 1, 'president': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'International Rowing Federation': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'International Rowing Federation': 2, 'elected': 1, 'president': 1, '1989': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 191.5; query_terms: set(['elected', 'president', '1989']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'she', 'married', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'she', 'married', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Carolyn', 'Bessette', 'Kennedy']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Carolyn Bessette Kennedy']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'she', 'married', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Carolyn Bessette Kennedy']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'she', 'married', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'she', 'married']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'married': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Carolyn Bessette Kennedy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'married': 1, 'Carolyn Bessette Kennedy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 209.5; query_terms: set(['married']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Cole', 'Porter', "'s", 'first', 'professional', 'musical', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', "'s", 'first', 'professional', 'musical', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Cole', 'Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', "'s", 'first', 'professional', 'musical', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Cole Porter', 'Cole Porter']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', "'s", 'first', 'professional', 'musical', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 's', 'first', 'professional', 'musical']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'professional': 1, 's': 1, 'musical': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cole Porter': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'professional': 1, 's': 1, 'musical': 1, 'Cole Porter': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209d6950>]
DEBUG  Here is the answer template: question_id: 202.7; query_terms: set(['professional', 's', 'musical']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'Padre', 'Pio', 'first', 'receive', 'the', 'stigmata', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'first', 'receive', 'the', 'stigmata', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Padre', 'Pio']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Padre Pio']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'first', 'receive', 'the', 'stigmata', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Padre Pio', 'Padre Pio']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'first', 'receive', 'the', 'stigmata', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'first', 'receive', 'the', 'stigmata']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'receive': 1, 'stigmata': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Padre Pio': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'receive': 1, 'stigmata': 1, 'Padre Pio': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 199.6; query_terms: set(['receive', 'stigmata']); type_weights: defaultdict(<function <lambda> at 0x1e7a9c08>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'the', 'men', "'s", 'winner', 'of', 'the', '1999', 'Chicago', 'Marathon', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'month', 'did', 'it', 'erupt', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'the', 'men', "'s", 'winner', 'of', 'the', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Chicago', 'Marathon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'month', 'did', 'it', 'erupt', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1991', 'eruption', 'of', 'Mount', 'Pinatubo']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mount Pinatubo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'month', 'did', 'it', 'erupt', '?', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mount Pinatubo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'month', 'did', 'it', 'erupt', '?', '1991', 'eruption', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'month', 'did', 'it', 'erupt', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1991': 1, 'erupt': 1, 'eruption': 1, 'month': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mount Pinatubo': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1991': 1, 'Mount Pinatubo': 1, 'erupt': 1, 'eruption': 1, 'month': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 205.2; query_terms: set(['1991', 'erupt', 'eruption', 'month']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Chicago Marathon']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'the', 'men', "'s", 'winner', 'of', 'the', '1999', '?', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Chicago Marathon', 'Chicago Marathon']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'the', 'men', "'s", 'winner', 'of', 'the', '1999', '?', '1999']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'the', 'men', 's', 'winner', 'of', 'the', '1999', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 2, 'winner': 1, 's': 1, 'men': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Chicago Marathon': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1999': 2, 's': 1, 'winner': 1, 'Chicago Marathon': 2, 'men': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 184.3; query_terms: set(['1999', 's', 'winner', 'men']); type_weights: defaultdict(<function <lambda> at 0x1e7a9b90>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['On', 'what', 'date', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['On', 'what', 'date', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Carolyn', 'Bessette', 'Kennedy']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Carolyn Bessette Kennedy']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['On', 'what', 'date', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Carolyn Bessette Kennedy']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['On', 'what', 'date', 'did', 'she', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['On', 'what', 'date', 'did', 'she', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'date': 1, 'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Carolyn Bessette Kennedy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'date': 1, 'die': 1, 'Carolyn Bessette Kennedy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 209.6; query_terms: set(['date', 'die']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'tilt', 'angle', 'of', 'the', 'Tower', 'of', 'Pisa', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'tilt', 'angle', 'of', 'the', 'Tower', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Leaning', 'Tower', 'of', 'Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'tilt', 'angle', 'of', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pisa', 'Pisa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'tilt', 'angle', 'of', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'tilt', 'angle', 'of', 'the', 'Tower', 'of', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'tilt': 1, 'Tower': 2, 'angle': 1, 'Leaning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pisa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'tilt': 1, 'Tower': 2, 'angle': 1, 'Pisa': 2, 'Leaning': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 207.3; query_terms: set(['tilt', 'Tower', 'angle', 'Leaning']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Shakespeare', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['William', 'Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['William Shakespeare']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Shakespeare', 'William Shakespeare']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 201.2; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x267b8758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'position', 'is', 'Nissan', 'among', 'Japanese', 'automakers', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'position', 'is', 'among', 'automakers', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan', 'Japanese']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Nissan', 'Corp', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan Corp']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'position', 'is', 'among', 'automakers', '?', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Nissan', 'Japanese', 'Nissan Corp']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'position', 'is', 'among', 'automakers', '?', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'position', 'is', 'among', 'automakers']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'position': 1, 'automakers': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Nissan': 1, 'Japanese': 1, 'Nissan Corp': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'position': 1, 'Nissan': 1, 'automakers': 1, 'Japanese': 1, 'Nissan Corp': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x269c09d0>]
DEBUG  Here is the answer template: question_id: 203.1; query_terms: set(['position', 'automakers']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'people', 'were', 'killed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'people', 'were', 'killed', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1991', 'eruption', 'of', 'Mount', 'Pinatubo']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mount Pinatubo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'people', 'were', 'killed', '?', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mount Pinatubo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'people', 'were', 'killed', '?', '1991', 'eruption', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'people', 'were', 'killed', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1991': 1, 'eruption': 1, 'killed': 1, 'people': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mount Pinatubo': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1991': 1, 'Mount Pinatubo': 1, 'eruption': 1, 'killed': 1, 'people': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 205.3; query_terms: set(['1991', 'eruption', 'killed', 'people']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'movie', 'was', 'based', 'on', 'her', 'life', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'movie', 'was', 'based', 'on', 'her', 'life', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Patsy', 'Cline']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Patsy Cline']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'movie', 'was', 'based', 'on', 'her', 'life', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Patsy Cline']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'movie', 'was', 'based', 'on', 'her', 'life', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'movie', 'was', 'based', 'on', 'her', 'life']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movie': 1, 'life': 1, 'based': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Patsy Cline': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'movie': 1, 'life': 1, 'based': 1, 'Patsy Cline': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 211.5; query_terms: set(['movie', 'life', 'based']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'government', 'position', 'did', 'she', 'assume', 'in', '1993', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'government', 'position', 'did', 'she', 'assume', 'in', '1993', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Janet', 'Reno']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Janet Reno']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'government', 'position', 'did', 'she', 'assume', 'in', '1993', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Janet Reno']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'government', 'position', 'did', 'she', 'assume', 'in', '1993', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'government', 'position', 'did', 'she', 'assume', 'in', '1993']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'assume': 1, 'position': 1, '1993': 1, 'government': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Janet Reno': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'assume': 1, 'position': 1, '1993': 1, 'Janet Reno': 1, 'government': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 210.1; query_terms: set(['assume', 'position', '1993', 'government']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'boats', 'raced', 'in', 'the', '2000', 'Olympic', 'Games', 'in', 'Sydney', 'Australia', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'much', 'was', 'the', 'Tower', 'of', 'Pisa', 'straightened', 'in', 'the', '1990', "'s", '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'boats', 'raced', 'in', 'the', '2000', 'Olympic', 'Games', 'in', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Sydney Australia']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['International', 'Rowing', 'Federation']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['International Rowing Federation']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'boats', 'raced', 'in', 'the', '2000', 'Olympic', 'Games', 'in', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Sydney Australia', 'International Rowing Federation']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'boats', 'raced', 'in', 'the', '2000', 'Olympic', 'Games', 'in', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'boats', 'raced', 'in', 'the', '2000', 'Olympic', 'Games', 'in']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'boats': 1, 'Games': 1, '2000': 1, 'raced': 1, 'Olympic': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'International Rowing Federation': 1, 'Sydney Australia': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Olympic': 1, 'raced': 1, 'Sydney Australia': 1, 'International Rowing Federation': 1, '2000': 1, 'Games': 1, 'boats': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1ee5ae10>]
DEBUG  Here is the answer template: question_id: 191.6; query_terms: set(['boats', 'raced', '2000', 'Games', 'Olympic']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'much', 'was', 'the', 'Tower', 'of', 'straightened', 'in', 'the', '1990', "'s", '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Leaning', 'Tower', 'of', 'Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'much', 'was', 'the', 'Tower', 'of', 'straightened', 'in', 'the', '1990', "'s", '?', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pisa', 'Pisa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'much', 'was', 'the', 'Tower', 'of', 'straightened', 'in', 'the', '1990', "'s", '?', 'Leaning', 'Tower', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'much', 'was', 'the', 'Tower', 'of', 'straightened', 'in', 'the', '1990', 's', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'straightened': 1, '1990': 1, 'Tower': 2, 's': 1, 'Leaning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pisa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1990': 1, 'Pisa': 2, 's': 1, 'Leaning': 1, 'straightened': 1, 'Tower': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 207.4; query_terms: set(['straightened', '1990', 'Tower', 's', 'Leaning']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'Shakespeare', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'Shakespeare', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['William', 'Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['William Shakespeare']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'Shakespeare', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['William Shakespeare']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'Shakespeare', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'Shakespeare', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1, 'Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'William Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 201.3; query_terms: set(['die', 'Shakespeare']); type_weights: defaultdict(<function <lambda> at 0x1ee53e60>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'party-planning', 'business', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'party-planning', 'business', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Meg', 'Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'party-planning', 'business', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Meg Ryan']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'party-planning', 'business', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'partyplanning', 'business']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'did': 1, 'movie': 1, 'partyplanning': 1, 'business': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Meg Ryan': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'did': 1, 'movie': 1, 'partyplanning': 1, 'Meg Ryan': 1, 'business': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 213.7; query_terms: set(['did', 'movie', 'partyplanning', 'business']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'is', 'president', 'of', 'Nissan', 'Corp.', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'is', 'president', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan Corp.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Nissan', 'Corp', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan Corp']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'is', 'president', 'of', '?', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Nissan Corp.', 'Nissan Corp']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'is', 'president', 'of', '?', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'is', 'president', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'president': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Nissan Corp.': 1, 'Nissan Corp': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'president': 1, 'Nissan Corp.': 1, 'Nissan Corp': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 203.2; query_terms: set(['president']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'cost', 'of', 'preservation', 'of', 'the', 'Tower', 'of', 'Pisa', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'cost', 'of', 'preservation', 'of', 'the', 'Tower', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Leaning', 'Tower', 'of', 'Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'cost', 'of', 'preservation', 'of', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pisa', 'Pisa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'cost', 'of', 'preservation', 'of', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'cost', 'of', 'preservation', 'of', 'the', 'Tower', 'of', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Tower': 2, 'cost': 1, 'preservation': 1, 'Leaning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pisa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Tower': 2, 'cost': 1, 'Pisa': 2, 'preservation': 1, 'Leaning': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 207.5; query_terms: set(['Tower', 'cost', 'preservation', 'Leaning']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'people', 'were', 'evacuated', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'people', 'were', 'evacuated', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1991', 'eruption', 'of', 'Mount', 'Pinatubo']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mount Pinatubo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'people', 'were', 'evacuated', '?', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mount Pinatubo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'people', 'were', 'evacuated', '?', '1991', 'eruption', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'people', 'were', 'evacuated', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1991': 1, 'evacuated': 1, 'eruption': 1, 'people': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mount Pinatubo': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1991': 1, 'Mount Pinatubo': 1, 'people': 1, 'eruption': 1, 'evacuated': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x27c54990>]
DEBUG  Here is the answer template: question_id: 205.4; query_terms: set(['1991', 'people', 'eruption', 'evacuated']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'name', 'of', 'her', 'producer', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'name', 'of', 'her', 'producer', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Patsy', 'Cline']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Patsy Cline']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'name', 'of', 'her', 'producer', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Patsy Cline']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'name', 'of', 'her', 'producer', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'name', 'of', 'her', 'producer']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'name': 1, 'producer': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Patsy Cline': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'name': 1, 'producer': 1, 'Patsy Cline': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 211.6; query_terms: set(['name', 'producer']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'Shakespeare', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'Shakespeare', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['William', 'Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['William Shakespeare']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'Shakespeare', 'when', 'he', 'died', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['William Shakespeare']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'Shakespeare', 'when', 'he', 'died', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'Shakespeare', 'when', 'he', 'died']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'old': 1, 'Shakespeare': 1, 'died': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'William Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'old': 1, 'Shakespeare': 1, 'died': 1, 'William Shakespeare': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 201.4; query_terms: set(['old', 'Shakespeare', 'died']); type_weights: defaultdict(<function <lambda> at 0x1e7a9f50>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'position', 'did', 'she', 'have', 'immediately', 'prior', 'to', '1993', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'position', 'did', 'she', 'have', 'immediately', 'prior', 'to', '1993', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Janet', 'Reno']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Janet Reno']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'position', 'did', 'she', 'have', 'immediately', 'prior', 'to', '1993', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Janet Reno']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'position', 'did', 'she', 'have', 'immediately', 'prior', 'to', '1993', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'position', 'did', 'she', 'have', 'immediately', 'prior', 'to', '1993']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'position': 1, '1993': 1, 'prior': 1, 'immediately': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Janet Reno': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Janet Reno': 1, 'position': 1, '1993': 1, 'immediately': 1, 'prior': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 210.2; query_terms: set(['position', '1993', 'immediately', 'prior']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'high', 'is', 'the', 'Tower', 'of', 'Pisa', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'high', 'is', 'the', 'Tower', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Leaning', 'Tower', 'of', 'Pisa']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Pisa']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'high', 'is', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Pisa', 'Pisa']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'high', 'is', 'the', 'Tower', 'of', '?', 'Leaning', 'Tower', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'high', 'is', 'the', 'Tower', 'of', 'Leaning', 'Tower', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'high': 1, 'Tower': 2, 'Leaning': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Pisa': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'high': 1, 'Tower': 2, 'Pisa': 2, 'Leaning': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 207.6; query_terms: set(['high', 'Tower', 'Leaning']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'city', 'is', 'Nissan', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'city', 'is', 'headquartered', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Nissan', 'Corp', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan Corp']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'city', 'is', 'headquartered', '?', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Nissan', 'Nissan Corp']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'city', 'is', 'headquartered', '?', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'city', 'is', 'headquartered']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'city': 1, 'headquartered': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Nissan': 1, 'Nissan Corp': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'city': 1, 'Nissan': 1, 'headquartered': 1, 'Nissan Corp': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 203.4; query_terms: set(['city', 'headquartered']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'long', 'had', 'Mt.', 'Pinatubo', 'been', 'dormant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'long', 'had', 'Mt.', 'Pinatubo', 'been', 'dormant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1991', 'eruption', 'of', 'Mount', 'Pinatubo']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mount Pinatubo']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'long', 'had', 'Mt.', 'Pinatubo', 'been', 'dormant', '?', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mount Pinatubo']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'long', 'had', 'Mt.', 'Pinatubo', 'been', 'dormant', '?', '1991', 'eruption', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'long', 'had', 'Mt', 'Pinatubo', 'been', 'dormant', '1991', 'eruption', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'dormant': 1, '1991': 1, 'Pinatubo': 1, 'eruption': 1, 'long': 1, 'Mt': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Mount Pinatubo': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'dormant': 1, '1991': 1, 'Pinatubo': 1, 'eruption': 1, 'long': 1, 'Mt': 1, 'Mount Pinatubo': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 205.5; query_terms: set(['dormant', '1991', 'Pinatubo', 'eruption', 'long', 'Mt']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'he', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'he', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Barry', 'Manilow']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Barry Manilow']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'he', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Barry Manilow']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'he', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'he', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Barry Manilow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Barry Manilow': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 212.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'is', 'the', 'Great', 'Wall', 'of', 'China', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'her', 'father', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'is', 'the', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Wall', 'China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Great', 'Wall', 'of', 'China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'her', 'father', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Janet', 'Reno']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Janet Reno']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'her', 'father', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Janet Reno']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'her', 'father', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'her', 'father', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1, 'father': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Janet Reno': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Janet Reno': 1, 'born': 1, 'father': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 210.3; query_terms: set(['born', 'father']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Wall', 'China']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'is', 'the', 'of', '?', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great Wall', 'China', 'Great Wall', 'China']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'is', 'the', 'of', '?', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'is', 'the', 'of', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'old': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Great Wall': 2, 'China': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'China': 2, 'Great Wall': 2, 'old': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 208.1; query_terms: set(['old']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'sonnets', 'did', 'Shakespeare', 'write', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'sonnets', 'did', 'write', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['William', 'Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['William Shakespeare']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'sonnets', 'did', 'write', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Shakespeare', 'William Shakespeare']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'sonnets', 'did', 'write', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'sonnets', 'did', 'write']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'write': 1, 'sonnets': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'write': 1, 'sonnets': 1, 'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 201.5; query_terms: set(['write', 'sonnets']); type_weights: defaultdict(<function <lambda> at 0x272357d0>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'the', 'pageant', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'the', 'pageant', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'the', 'pageant', 'held', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'the', 'pageant', 'held', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'the', 'pageant', 'held', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'pageant': 1, 'held': 1, '2000': 1, 'Pageant': 1, 'America': 1, 'Miss': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'pageant': 1, 'held': 1, '2000': 1, 'Pageant': 1, 'America': 1, 'Miss': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 214.1; query_terms: set(['pageant', 'held', '2000', 'Pageant', 'America', 'Miss']); type_weights: defaultdict(<function <lambda> at 0x1e7a9cf8>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'the', 'Johnstown', 'flood', 'occur', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'the', 'flood', 'occur', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Johnstown', 'flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'the', 'flood', 'occur', '?', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Johnstown', 'Johnstown']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'the', 'flood', 'occur', '?', 'flood']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'the', 'flood', 'occur', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'flood': 2, 'occur': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Johnstown': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'flood': 2, 'occur': 1, 'Johnstown': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209dc8d0>]
DEBUG  Here is the answer template: question_id: 206.1; query_terms: set(['flood', 'occur']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'times', 'has', 'he', 'married', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'times', 'has', 'he', 'married', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Barry', 'Manilow']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Barry Manilow']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'times', 'has', 'he', 'married', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Barry Manilow']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'times', 'has', 'he', 'married', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'times', 'has', 'he', 'married']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'married': 1, 'times': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Barry Manilow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'married': 1, 'Barry Manilow': 1, 'times': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 212.2; query_terms: set(['married', 'times']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'Nissan', 'Corp.', 'luxury', 'car', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'Corp.', 'luxury', 'car', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Nissan', 'Corp', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan Corp']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'Corp.', 'luxury', 'car', '?', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Nissan', 'Nissan Corp']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'Corp.', 'luxury', 'car', '?', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'Corp', 'luxury', 'car']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'car': 1, 'Corp': 1, 'luxury': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Nissan': 1, 'Nissan Corp': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'car': 1, 'Nissan': 1, 'Corp': 1, 'luxury': 1, 'Nissan Corp': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 203.5; query_terms: set(['car', 'Corp', 'luxury']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'plays', 'did', 'Shakespeare', 'write', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'plays', 'did', 'write', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['William', 'Shakespeare']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['William Shakespeare']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'plays', 'did', 'write', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Shakespeare', 'William Shakespeare']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'plays', 'did', 'write', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'plays', 'did', 'write']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'write': 1, 'plays': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'write': 1, 'plays': 1, 'Shakespeare': 1, 'William Shakespeare': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 201.6; query_terms: set(['write', 'plays']); type_weights: defaultdict(<function <lambda> at 0x1ee53cf8>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'people', 'perished', 'in', 'the', 'Johnstown', 'flood', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'people', 'perished', 'in', 'the', 'flood', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Johnstown', 'flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'people', 'perished', 'in', 'the', 'flood', '?', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Johnstown', 'Johnstown']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'people', 'perished', 'in', 'the', 'flood', '?', 'flood']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'people', 'perished', 'in', 'the', 'flood', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'perished': 1, 'flood': 2, 'people': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Johnstown': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'perished': 1, 'flood': 2, 'Johnstown': 2, 'people': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2382ecd0>]
DEBUG  Here is the answer template: question_id: 206.2; query_terms: set(['perished', 'flood', 'people']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'TV', 'network', 'aired', 'the', 'pageant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'TV', 'network', 'aired', 'the', 'pageant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'TV', 'network', 'aired', 'the', 'pageant', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'TV', 'network', 'aired', 'the', 'pageant', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'TV', 'network', 'aired', 'the', 'pageant', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'aired': 1, 'pageant': 1, 'network': 1, 'TV': 1, '2000': 1, 'Pageant': 1, 'America': 1, 'Miss': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'aired': 1, 'pageant': 1, 'network': 1, 'TV': 1, '2000': 1, 'Pageant': 1, 'America': 1, 'Miss': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 214.2; query_terms: set(['aired', 'pageant', 'network', 'TV', '2000', 'Pageant', 'America', 'Miss']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Janet', 'Reno']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Janet Reno']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Janet Reno']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'she', 'grow', 'up']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'grow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Janet Reno': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Janet Reno': 1, 'grow': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 210.4; query_terms: set(['grow']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'long', 'is', 'the', 'Great', 'Wall', 'of', 'China', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'long', 'is', 'the', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Wall', 'China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Great', 'Wall', 'of', 'China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Wall', 'China']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'long', 'is', 'the', 'of', '?', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great Wall', 'China', 'Great Wall', 'China']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'long', 'is', 'the', 'of', '?', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'long', 'is', 'the', 'of', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'long': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Great Wall': 2, 'China': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Great Wall': 2, 'China': 2, 'long': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 208.2; query_terms: set(['long']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'the', 'musical', 'that', 'he', 'wrote', 'about', 'the', 'Harmonistas', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', 'the', 'musical', 'that', 'he', 'wrote', 'about', 'the', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Harmonistas']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Barry', 'Manilow']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Barry Manilow']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', 'the', 'musical', 'that', 'he', 'wrote', 'about', 'the', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Harmonistas', 'Barry Manilow']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'musical', 'that', 'he', 'wrote', 'about', 'the', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'musical', 'that', 'he', 'wrote', 'about', 'the']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'name': 1, 'wrote': 1, 'musical': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Harmonistas': 1, 'Barry Manilow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Harmonistas': 1, 'Barry Manilow': 1, 'name': 1, 'wrote': 1, 'musical': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 212.3; query_terms: set(['name', 'wrote', 'musical']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Nissan', 'formerly', 'known', 'as', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'formerly', 'known', 'as', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Nissan', 'Corp', '.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['.']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Nissan Corp']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'formerly', 'known', 'as', '?', '.']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Nissan', 'Nissan Corp']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'formerly', 'known', 'as', '?', '.']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'formerly', 'known', 'as']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'known': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Nissan': 1, 'Nissan Corp': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'known': 1, 'Nissan': 1, 'Nissan Corp': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 203.6; query_terms: set(['known']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'much', 'water', 'fell', 'on', 'Johnstown', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'much', 'water', 'fell', 'on', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Johnstown', 'flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'much', 'water', 'fell', 'on', '?', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Johnstown', 'Johnstown']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'much', 'water', 'fell', 'on', '?', 'flood']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'much', 'water', 'fell', 'on', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'water': 1, 'flood': 1, 'fell': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Johnstown': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'water': 1, 'flood': 1, 'fell': 1, 'Johnstown': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 206.3; query_terms: set(['water', 'flood', 'fell']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'long', 'was', 'it', 'used', 'as', 'a', 'defense', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'long', 'was', 'it', 'used', 'as', 'a', 'defense', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Great', 'Wall', 'of', 'China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Wall', 'China']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'long', 'was', 'it', 'used', 'as', 'a', 'defense', '?', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great Wall', 'China']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'long', 'was', 'it', 'used', 'as', 'a', 'defense', '?', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'long', 'was', 'it', 'used', 'as', 'a', 'defense', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'defense': 1, 'long': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Great Wall': 1, 'China': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'defense': 1, 'China': 1, 'long': 1, 'Great Wall': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 208.3; query_terms: set(['defense', 'long']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'her', 'top', 'Deputy', 'Attorney', 'in', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'her', 'top', 'Deputy', 'Attorney', 'in', '1999', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Janet', 'Reno']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Janet Reno']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'her', 'top', 'Deputy', 'Attorney', 'in', '1999', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Janet Reno']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'her', 'top', 'Deputy', 'Attorney', 'in', '1999', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'her', 'top', 'Deputy', 'Attorney', 'in', '1999']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 1, 'top': 1, 'Attorney': 1, 'Deputy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Janet Reno': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1999': 1, 'Janet Reno': 1, 'top': 1, 'Attorney': 1, 'Deputy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 210.5; query_terms: set(['1999', 'top', 'Attorney', 'Deputy']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'Cole', 'Porter', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Cole', 'Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Cole Porter', 'Cole Porter']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cole Porter': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Cole Porter': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 202.1; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x1e7a9e60>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'the', 'date', 'of', 'the', 'pageant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', 'the', 'date', 'of', 'the', 'pageant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', 'the', 'date', 'of', 'the', 'pageant', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', 'pageant', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 'the', 'date', 'of', 'the', 'pageant', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Pageant': 1, '2000': 1, 'pageant': 1, 'date': 1, 'America': 1, 'Miss': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'pageant': 1, '2000': 1, 'Pageant': 1, 'date': 1, 'America': 1, 'Miss': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 214.3; query_terms: set(['pageant', '2000', 'Pageant', 'date', 'America', 'Miss']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'dam', 'caused', 'the', 'Johnstown', 'flood', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'dam', 'caused', 'the', 'flood', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Johnstown', 'flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'dam', 'caused', 'the', 'flood', '?', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Johnstown', 'Johnstown']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'dam', 'caused', 'the', 'flood', '?', 'flood']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'dam', 'caused', 'the', 'flood', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'dam': 1, 'flood': 2, 'caused': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Johnstown': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'dam': 1, 'Johnstown': 2, 'caused': 1, 'flood': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 206.4; query_terms: set(['dam', 'caused', 'flood']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'founded', 'the', 'Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'founded', 'the', 'Church', 'of', 'of', 'Latter-day', 'Saints', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Jesus Christ']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Church', 'Jesus Christ']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'founded', 'the', 'Church', 'of', 'of', 'Latter-day', 'Saints', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Jesus Christ', 'Church', 'Jesus Christ']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'founded', 'the', 'Church', 'of', 'of', 'Latter-day', 'Saints', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'founded', 'the', 'Church', 'of', 'of', 'Latterday', 'Saints', 'of', 'of', 'Latterday', 'Saints', 'Mormons']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1, 'Mormons': 1, 'Latterday': 2, 'Saints': 2, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Jesus Christ': 2, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Mormons': 1, 'Jesus Christ': 2, 'Saints': 2, 'founded': 1, 'Latterday': 2, 'Church': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae90d0>]
DEBUG  Here is the answer template: question_id: 204.1; query_terms: set(['founded', 'Mormons', 'Latterday', 'Saints', 'Church']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'Cole', 'Porter', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Cole', 'Porter']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Cole Porter']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'born', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Cole Porter', 'Cole Porter']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'born', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'born']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'born': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Cole Porter': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'born': 1, 'Cole Porter': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 202.2; query_terms: set(['born']); type_weights: defaultdict(<function <lambda> at 0x26a8cf50>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'music', 'school', 'did', 'he', 'attend', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'music', 'school', 'did', 'he', 'attend', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Barry', 'Manilow']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Barry Manilow']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'music', 'school', 'did', 'he', 'attend', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Barry Manilow']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'music', 'school', 'did', 'he', 'attend', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'music', 'school', 'did', 'he', 'attend']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'school': 1, 'music': 1, 'attend': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Barry Manilow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Barry Manilow': 1, 'school': 1, 'music': 1, 'attend': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 212.4; query_terms: set(['school', 'music', 'attend']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Under', 'which', 'dynasty', 'was', 'the', 'wall', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Under', 'which', 'dynasty', 'was', 'the', 'wall', 'built', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Great', 'Wall', 'of', 'China']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Great Wall', 'China']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Under', 'which', 'dynasty', 'was', 'the', 'wall', 'built', '?', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Great Wall', 'China']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Under', 'which', 'dynasty', 'was', 'the', 'wall', 'built', '?', 'of']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Under', 'which', 'dynasty', 'was', 'the', 'wall', 'built', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'wall': 1, 'built': 1, 'dynasty': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Great Wall': 1, 'China': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'wall': 1, 'Great Wall': 1, 'China': 1, 'built': 1, 'dynasty': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 208.4; query_terms: set(['wall', 'built', 'dynasty']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'crowned', 'Miss', 'America', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'crowned', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Miss America']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'crowned', '2000', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Miss America']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'crowned', '2000', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'crowned', '2000', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'crowned': 1, '2000': 2, 'America': 1, 'Miss': 1, 'Pageant': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Miss America': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Pageant': 1, '2000': 2, 'Miss America': 1, 'crowned': 1, 'America': 1, 'Miss': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 214.4; query_terms: set(['crowned', '2000', 'America', 'Miss', 'Pageant']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'disease', 'was', 'she', 'diagnosed', 'with', 'in', '1995', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'disease', 'was', 'she', 'diagnosed', 'with', 'in', '1995', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Janet', 'Reno']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Janet Reno']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'disease', 'was', 'she', 'diagnosed', 'with', 'in', '1995', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Janet Reno']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'disease', 'was', 'she', 'diagnosed', 'with', 'in', '1995', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'disease', 'was', 'she', 'diagnosed', 'with', 'in', '1995']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1995': 1, 'disease': 1, 'diagnosed': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Janet Reno': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Janet Reno': 1, '1995': 1, 'disease': 1, 'diagnosed': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 210.6; query_terms: set(['1995', 'disease', 'diagnosed']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'old', 'was', 'the', 'dam', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'old', 'was', 'the', 'dam', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Johnstown', 'flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'old', 'was', 'the', 'dam', '?', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Johnstown']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'old', 'was', 'the', 'dam', '?', 'flood']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'old', 'was', 'the', 'dam', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'dam': 1, 'old': 1, 'flood': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Johnstown': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'dam': 1, 'Johnstown': 1, 'old': 1, 'flood': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603dd0>]
DEBUG  Here is the answer template: question_id: 206.5; query_terms: set(['dam', 'old', 'flood']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Carolyn', 'Bessette', 'Kennedy']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Carolyn Bessette Kennedy']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Carolyn Bessette Kennedy']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'she', 'grow', 'up', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'she', 'grow', 'up']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'grow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Carolyn Bessette Kennedy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'grow': 1, 'Carolyn Bessette Kennedy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 209.1; query_terms: set(['grow']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['For', 'what', 'female', 'singer', 'was', 'he', 'the', 'musical', 'director', 'and', 'pianist', 'in', 'the', '70', "'s", '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['For', 'what', 'female', 'singer', 'was', 'he', 'the', 'musical', 'director', 'and', 'pianist', 'in', 'the', '70', "'s", '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Barry', 'Manilow']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Barry Manilow']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['For', 'what', 'female', 'singer', 'was', 'he', 'the', 'musical', 'director', 'and', 'pianist', 'in', 'the', '70', "'s", '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Barry Manilow']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['For', 'what', 'female', 'singer', 'was', 'he', 'the', 'musical', 'director', 'and', 'pianist', 'in', 'the', '70', "'s", '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['For', 'what', 'female', 'singer', 'was', 'he', 'the', 'musical', 'director', 'and', 'pianist', 'in', 'the', '70', 's']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'singer': 1, 'director': 1, 's': 1, 'female': 1, '70': 1, 'pianist': 1, 'musical': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Barry Manilow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'singer': 1, 'Barry Manilow': 1, 'director': 1, 's': 1, 'female': 1, '70': 1, 'pianist': 1, 'musical': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 212.5; query_terms: set(['singer', 'director', 's', 'female', '70', 'pianist', 'musical']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'state', 'was', 'Miss', 'America', '2000', 'from', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'state', 'was', '2000', 'from', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Miss America']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'state', 'was', '2000', 'from', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Miss America']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'state', 'was', '2000', 'from', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'state', 'was', '2000', 'from', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Pageant': 1, 'state': 1, 'America': 1, 'Miss': 1, '2000': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Miss America': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Pageant': 1, 'state': 1, '2000': 2, 'Miss America': 1, 'America': 1, 'Miss': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 214.5; query_terms: set(['2000', 'state', 'Pageant', 'Miss', 'America']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'state', 'is', 'Johnstown', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'state', 'is', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Johnstown', 'flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['flood']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Johnstown']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'state', 'is', '?', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Johnstown', 'Johnstown']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'state', 'is', '?', 'flood']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'state', 'is', 'flood']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'flood': 1, 'state': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Johnstown': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'flood': 1, 'state': 1, 'Johnstown': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9090>]
DEBUG  Here is the answer template: question_id: 206.6; query_terms: set(['flood', 'state']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'year', 'was', 'the', 'church', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'was', 'she', 'inducted', 'into', 'the', 'Hollywood', 'Walk', 'of', 'Fame', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'year', 'was', 'the', 'church', 'founded', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'was', 'she', 'inducted', 'into', 'the', 'of', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Hollywood Walk', 'Fame']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Patsy', 'Cline']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Patsy Cline']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'was', 'she', 'inducted', 'into', 'the', 'of', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Hollywood Walk', 'Fame', 'Patsy Cline']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'was', 'she', 'inducted', 'into', 'the', 'of', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'was', 'she', 'inducted', 'into', 'the', 'of']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'inducted': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Hollywood Walk': 1, 'Fame': 1, 'Patsy Cline': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Hollywood Walk': 1, 'Fame': 1, 'inducted': 1, 'Patsy Cline': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 211.1; query_terms: set(['inducted']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Church', 'Jesus Christ']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'year', 'was', 'the', 'church', 'founded', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Church', 'Jesus Christ']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'year', 'was', 'the', 'church', 'founded', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'year', 'was', 'the', 'church', 'founded', 'of', 'of', 'Latterday', 'Saints', 'Mormons']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'founded': 1, 'Mormons': 1, 'Latterday': 1, 'Saints': 1, 'church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Jesus Christ': 1, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Mormons': 1, 'Jesus Christ': 1, 'Church': 1, 'Saints': 1, 'founded': 1, 'Latterday': 1, 'church': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x209d6f90>]
DEBUG  Here is the answer template: question_id: 204.2; query_terms: set(['founded', 'Mormons', 'Latterday', 'Saints', 'church']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'high', 'school', 'did', 'she', 'go', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'high', 'school', 'did', 'she', 'go', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Carolyn', 'Bessette', 'Kennedy']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Carolyn Bessette Kennedy']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'high', 'school', 'did', 'she', 'go', 'to', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Carolyn Bessette Kennedy']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'high', 'school', 'did', 'she', 'go', 'to', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'high', 'school', 'did', 'she', 'go', 'to']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'high': 1, 'school': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Carolyn Bessette Kennedy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'high': 1, 'school': 1, 'Carolyn Bessette Kennedy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 209.2; query_terms: set(['high', 'school']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Patsy', 'Cline']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Patsy Cline']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Patsy Cline']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'she', 'married', 'to']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'married': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Patsy Cline': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'married': 1, 'Patsy Cline': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 211.2; query_terms: set(['married']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'did', 'the', 'Mormon', 'church', 'begin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'did', 'the', 'church', 'begin', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Mormon']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Church', 'Jesus Christ']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'did', 'the', 'church', 'begin', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Mormon', 'Church', 'Jesus Christ']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'did', 'the', 'church', 'begin', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'did', 'the', 'church', 'begin', 'of', 'of', 'Latterday', 'Saints', 'Mormons']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Mormons': 1, 'begin': 1, 'Latterday': 1, 'Saints': 1, 'church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Jesus Christ': 1, 'Mormon': 1, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'begin': 1, 'Jesus Christ': 1, 'Mormon': 1, 'Church': 1, 'Saints': 1, 'Mormons': 1, 'Latterday': 1, 'church': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 204.3; query_terms: set(['Mormons', 'begin', 'Latterday', 'Saints', 'church']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'record', 'label', 'did', 'he', 'sing', 'for', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'record', 'label', 'did', 'he', 'sing', 'for', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Barry', 'Manilow']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Barry Manilow']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'record', 'label', 'did', 'he', 'sing', 'for', 'in', '2000', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Barry Manilow']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'record', 'label', 'did', 'he', 'sing', 'for', 'in', '2000', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'record', 'label', 'did', 'he', 'sing', 'for', 'in', '2000']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'record': 1, 'sing': 1, '2000': 1, 'label': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Barry Manilow': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'record': 1, '2000': 1, 'label': 1, 'Barry Manilow': 1, 'sing': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 212.6; query_terms: set(['record', '2000', 'label', 'sing']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'judges', 'were', 'in', 'the', 'pageant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'judges', 'were', 'in', 'the', 'pageant', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'judges', 'were', 'in', 'the', 'pageant', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'judges', 'were', 'in', 'the', 'pageant', '?', '2000', 'Miss', 'America', 'Pageant']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'judges', 'were', 'in', 'the', 'pageant', '2000', 'Miss', 'America', 'Pageant']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'judges': 1, 'Pageant': 1, '2000': 1, 'pageant': 1, 'America': 1, 'Miss': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'judges': 1, 'pageant': 1, '2000': 1, 'Pageant': 1, 'America': 1, 'Miss': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 214.6; query_terms: set(['judges', 'pageant', '2000', 'Pageant', 'America', 'Miss']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'college', 'did', 'she', 'go', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'college', 'did', 'she', 'go', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Carolyn', 'Bessette', 'Kennedy']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Carolyn Bessette Kennedy']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'college', 'did', 'she', 'go', 'to', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Carolyn Bessette Kennedy']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'college', 'did', 'she', 'go', 'to', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'college', 'did', 'she', 'go', 'to']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'college': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Carolyn Bessette Kennedy': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'college': 1, 'Carolyn Bessette Kennedy': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 209.3; query_terms: set(['college']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'year', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'year', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Patsy', 'Cline']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Patsy Cline']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'year', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Patsy Cline']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'year', 'did', 'she', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'year', 'did', 'she', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Patsy Cline': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Patsy Cline': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781110>]
DEBUG  Here is the answer template: question_id: 211.3; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'many', 'members', 'does', 'it', 'have', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'many', 'members', 'does', 'it', 'have', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Church', 'of', 'Jesus', 'Christ', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Church', 'Jesus Christ']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'many', 'members', 'does', 'it', 'have', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Church', 'Jesus Christ']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'many', 'members', 'does', 'it', 'have', '?', 'of', 'of', 'Latter-day', 'Saints', '(', 'Mormons', ')']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'many', 'members', 'does', 'it', 'have', 'of', 'of', 'Latterday', 'Saints', 'Mormons']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Mormons': 1, 'Latterday': 1, 'Saints': 1, 'members': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Jesus Christ': 1, 'Church': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'Jesus Christ': 1, 'Saints': 1, 'Mormons': 1, 'Latterday': 1, 'members': 1, 'Church': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x2ab983603e10>]
DEBUG  Here is the answer template: question_id: 204.4; query_terms: set(['Mormons', 'Latterday', 'Saints', 'members']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'number': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Where', 'was', 'the', 'festival', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Where', 'was', 'the', 'festival', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Where', 'was', 'the', 'festival', 'held', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Where', 'was', 'the', 'festival', 'held', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Where', 'was', 'the', 'festival', 'held', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 1, 'festival': 1, 'held': 1, 'Sundance': 1, 'Festival': 1, 'Film': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'held': 1, '1999': 1, 'festival': 1, 'Sundance': 1, 'Festival': 1, 'Film': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 215.1; query_terms: set(['held', '1999', 'festival', 'Sundance', 'Festival', 'Film']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'location': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'was', 'Meg', 'Ryan', "'s", 'name', 'at', 'birth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'was', "'s", 'name', 'at', 'birth', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Meg', 'Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'was', "'s", 'name', 'at', 'birth', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Meg Ryan', 'Meg Ryan']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'was', "'s", 'name', 'at', 'birth', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'was', 's', 'name', 'at', 'birth']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'s': 1, 'name': 1, 'birth': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Meg Ryan': 2}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'s': 1, 'name': 1, 'birth': 1, 'Meg Ryan': 2}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 213.1; query_terms: set(['s', 'name', 'birth']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['How', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['How', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Patsy', 'Cline']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Patsy Cline']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['How', 'did', 'she', 'die', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Patsy Cline']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['How', 'did', 'she', 'die', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['How', 'did', 'she', 'die']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'die': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Patsy Cline': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'die': 1, 'Patsy Cline': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 211.4; query_terms: set(['die']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Meg', 'Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Meg Ryan']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'she', 'married', 'to', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'she', 'married', 'to']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'married': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Meg Ryan': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'married': 1, 'Meg Ryan': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1f128090>]
DEBUG  Here is the answer template: question_id: 213.2; query_terms: set(['married']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['What', 'is', 'the', 'name', 'of', 'the', 'artistic', 'director', 'of', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['What', 'is', 'the', 'name', 'of', 'the', 'artistic', 'director', 'of', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['What', 'is', 'the', 'name', 'of', 'the', 'artistic', 'director', 'of', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'artistic', 'director', 'of', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['What', 'is', 'the', 'name', 'of', 'the', 'artistic', 'director', 'of', 'the', 'festival', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'name': 1, 'festival': 1, 'director': 1, '1999': 1, 'Sundance': 1, 'artistic': 1, 'Festival': 1, 'Film': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'name': 1, 'festival': 1, 'director': 1, '1999': 1, 'Sundance': 1, 'artistic': 1, 'Festival': 1, 'Film': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 215.2; query_terms: set(['name', 'festival', 'director', '1999', 'Sundance', 'artistic', 'Festival', 'Film']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9, 'object': 0.9, 'organization': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'did', 'she', 'meet', 'her', 'husband', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'did', 'she', 'meet', 'her', 'husband', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Meg', 'Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'did', 'she', 'meet', 'her', 'husband', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Meg Ryan']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'did', 'she', 'meet', 'her', 'husband', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'did', 'she', 'meet', 'her', 'husband']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'meet': 1, 'husband': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Meg Ryan': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'meet': 1, 'Meg Ryan': 1, 'husband': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 213.3; query_terms: set(['meet', 'husband']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['When', 'was', 'the', 'festival', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['When', 'was', 'the', 'festival', 'held', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['When', 'was', 'the', 'festival', 'held', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['When', 'was', 'the', 'festival', 'held', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['When', 'was', 'the', 'festival', 'held', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'1999': 1, 'festival': 1, 'held': 1, 'Sundance': 1, 'Festival': 1, 'Film': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'held': 1, '1999': 1, 'festival': 1, 'Sundance': 1, 'Festival': 1, 'Film': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 215.3; query_terms: set(['held', '1999', 'festival', 'Sundance', 'Festival', 'Film']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'time_ex': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'bookstore', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'bookstore', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Meg', 'Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'bookstore', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Meg Ryan']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'bookstore', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['In', 'what', 'movie', 'did', 'she', 'own', 'a', 'bookstore']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movie': 1, 'bookstore': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Meg Ryan': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'movie': 1, 'bookstore': 1, 'Meg Ryan': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1eae9050>]
DEBUG  Here is the answer template: question_id: 213.5; query_terms: set(['movie', 'bookstore']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'actress', 'appeared', 'in', 'two', 'films', 'shown', 'at', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'actress', 'appeared', 'in', 'two', 'films', 'shown', 'at', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'actress', 'appeared', 'in', 'two', 'films', 'shown', 'at', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'actress', 'appeared', 'in', 'two', 'films', 'shown', 'at', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'actress', 'appeared', 'in', 'two', 'films', 'shown', 'at', 'the', 'festival', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'appeared': 1, 'two': 1, 'actress': 1, 'festival': 1, '1999': 1, 'Sundance': 1, 'films': 1, 'Festival': 1, 'Film': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'1999': 1, 'appeared': 1, 'two': 1, 'actress': 1, 'festival': 1, 'Sundance': 1, 'films': 1, 'Festival': 1, 'Film': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 215.4; query_terms: set(['1999', 'appeared', 'two', 'actress', 'festival', 'Sundance', 'films', 'Festival', 'Film']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Who', 'was', 'her', 'male', 'lead', 'in', 'that', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Who', 'was', 'her', 'male', 'lead', 'in', 'that', 'movie', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Meg', 'Ryan']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Meg Ryan']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Who', 'was', 'her', 'male', 'lead', 'in', 'that', 'movie', '?']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Meg Ryan']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Who', 'was', 'her', 'male', 'lead', 'in', 'that', 'movie', '?']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Who', 'was', 'her', 'male', 'lead', 'in', 'that', 'movie']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'movie': 1, 'male': 1, 'lead': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Meg Ryan': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'movie': 1, 'male': 1, 'Meg Ryan': 1, 'lead': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e301f50>]
DEBUG  Here is the answer template: question_id: 213.6; query_terms: set(['movie', 'male', 'lead']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'person': 0.9})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'film', 'won', 'the', 'Dramatic', 'Screen', 'Play', 'Award', 'at', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'film', 'won', 'the', 'at', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: ['Dramatic Screen Play Award']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'film', 'won', 'the', 'at', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: ['Dramatic Screen Play Award']
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'film', 'won', 'the', 'at', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'film', 'won', 'the', 'at', 'the', 'festival', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'won': 1, 'festival': 1, '1999': 1, 'Sundance': 1, 'film': 1, 'Festival': 1, 'Film': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {'Dramatic Screen Play Award': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'won': 1, 'festival': 1, '1999': 1, 'Sundance': 1, 'Dramatic Screen Play Award': 1, 'Film': 1, 'Festival': 1, 'film': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e781310>]
DEBUG  Here is the answer template: question_id: 215.5; query_terms: set(['won', 'festival', '1999', 'Sundance', 'Film', 'Festival', 'film']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['Which', 'film', 'won', 'three', 'awards', 'at', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['Which', 'film', 'won', 'three', 'awards', 'at', 'the', 'festival', '?']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the input: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of non-named entities: ['1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.EXTRACT_NE()  Here is the list of named entities: []
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the non-named entities in the question and target: ['Which', 'film', 'won', 'three', 'awards', 'at', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here are the named entities in the question and target: []
DEBUG  Here are the non-named entity query terms before punctuation stripping: ['Which', 'film', 'won', 'three', 'awards', 'at', 'the', 'festival', '?', '1999', 'Sundance', 'Film', 'Festival']
DEBUG  Here are the non-named entity query terms after punctuation stripping: ['Which', 'film', 'won', 'three', 'awards', 'at', 'the', 'festival', '1999', 'Sundance', 'Film', 'Festival']
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of non-named entities in the question and target: {'Sundance': 1, 'festival': 1, 'three': 1, '1999': 1, 'won': 1, 'awards': 1, 'Film': 1, 'Festival': 1, 'film': 1}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of named-entity terms in the question and target: {}
DEBUG QUERY_PROCESSING.GENERATE_VOC()  Here is the frequency dictionary of all terms in the question and target: {'won': 1, 'festival': 1, 'three': 1, '1999': 1, 'Sundance': 1, 'awards': 1, 'film': 1, 'Festival': 1, 'Film': 1}
DEBUG  Here are the queries generated: [<general_classes.SearchQuery object at 0x1e7812d0>]
DEBUG  Here is the answer template: question_id: 215.6; query_terms: set(['won', 'festival', 'three', '1999', 'Sundance', 'awards', 'film', 'Festival', 'Film']); type_weights: defaultdict(<function <lambda> at 0x1e786758>, {'other': 0.5})
